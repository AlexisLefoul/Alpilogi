/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@internationalized";
exports.ids = ["vendor-chunks/@internationalized"];
exports.modules = {

/***/ "(ssr)/./node_modules/@internationalized/date/dist/main.js":
/*!***********************************************************!*\
  !*** ./node_modules/@internationalized/date/dist/main.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var $kgI3C$swchelperscjs_class_private_field_initcjs = __webpack_require__(/*! @swc/helpers/cjs/_class_private_field_init.cjs */ \"(ssr)/./node_modules/@swc/helpers/cjs/_class_private_field_init.cjs\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"CalendarDate\", () => $625ad1e1f4c43bc1$export$99faa760c7908e4f);\n$parcel$export(module.exports, \"CalendarDateTime\", () => $625ad1e1f4c43bc1$export$ca871e8dbb80966f);\n$parcel$export(module.exports, \"Time\", () => $625ad1e1f4c43bc1$export$680ea196effce5f);\n$parcel$export(module.exports, \"ZonedDateTime\", () => $625ad1e1f4c43bc1$export$d3b7288e7994edea);\n$parcel$export(module.exports, \"GregorianCalendar\", () => $af14c9812fdceb33$export$80ee6245ec4f29ec);\n$parcel$export(module.exports, \"JapaneseCalendar\", () => $b0ac0602ef646b2c$export$b746ab2b60cdffbf);\n$parcel$export(module.exports, \"BuddhistCalendar\", () => $561c4ef058278b74$export$42d20a78301dee44);\n$parcel$export(module.exports, \"TaiwanCalendar\", () => $9cc5d3577ec40243$export$65e01080afcb0799);\n$parcel$export(module.exports, \"PersianCalendar\", () => $3c060181fc7249ae$export$37fccdbfd14c5939);\n$parcel$export(module.exports, \"IndianCalendar\", () => $5f1dfa5c67609fe6$export$39f31c639fa15726);\n$parcel$export(module.exports, \"IslamicCivilCalendar\", () => $ecb2c4cc8c9aae25$export$2066795aadd37bfc);\n$parcel$export(module.exports, \"IslamicTabularCalendar\", () => $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7);\n$parcel$export(module.exports, \"IslamicUmalquraCalendar\", () => $ecb2c4cc8c9aae25$export$5baab4758c231076);\n$parcel$export(module.exports, \"HebrewCalendar\", () => $0f5324ee3bdd9396$export$ca405048b8fb5af);\n$parcel$export(module.exports, \"EthiopicCalendar\", () => $4db04d1051af0f2f$export$26ba6eab5e20cd7d);\n$parcel$export(module.exports, \"EthiopicAmeteAlemCalendar\", () => $4db04d1051af0f2f$export$d72e0c37005a4914);\n$parcel$export(module.exports, \"CopticCalendar\", () => $4db04d1051af0f2f$export$fe6243cbe1a4b7c1);\n$parcel$export(module.exports, \"createCalendar\", () => $4922c0a5a69da0ba$export$dd0bbc9b26defe37);\n$parcel$export(module.exports, \"toCalendarDate\", () => $4ae0260a69729f1d$export$93522d1a439f3617);\n$parcel$export(module.exports, \"toCalendarDateTime\", () => $4ae0260a69729f1d$export$b21e0b124e224484);\n$parcel$export(module.exports, \"toTime\", () => $4ae0260a69729f1d$export$d33f79e3ffc3dc83);\n$parcel$export(module.exports, \"toCalendar\", () => $4ae0260a69729f1d$export$b4a036af3fc0b032);\n$parcel$export(module.exports, \"toZoned\", () => $4ae0260a69729f1d$export$84c95a83c799e074);\n$parcel$export(module.exports, \"toTimeZone\", () => $4ae0260a69729f1d$export$538b00033cc11c75);\n$parcel$export(module.exports, \"toLocalTimeZone\", () => $4ae0260a69729f1d$export$d9b67bc93c097491);\n$parcel$export(module.exports, \"fromDate\", () => $4ae0260a69729f1d$export$e57ff100d91bd4b9);\n$parcel$export(module.exports, \"fromAbsolute\", () => $4ae0260a69729f1d$export$1b96692a1ba042ac);\n$parcel$export(module.exports, \"isSameDay\", () => $1f0f7ebf1ae6c530$export$ea39ec197993aef0);\n$parcel$export(module.exports, \"isSameMonth\", () => $1f0f7ebf1ae6c530$export$a18c89cbd24170ff);\n$parcel$export(module.exports, \"isSameYear\", () => $1f0f7ebf1ae6c530$export$5841f9eb9773f25f);\n$parcel$export(module.exports, \"isEqualDay\", () => $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee);\n$parcel$export(module.exports, \"isEqualMonth\", () => $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2);\n$parcel$export(module.exports, \"isEqualYear\", () => $1f0f7ebf1ae6c530$export$ea840f5a6dda8147);\n$parcel$export(module.exports, \"isToday\", () => $1f0f7ebf1ae6c530$export$629b0a497aa65267);\n$parcel$export(module.exports, \"getDayOfWeek\", () => $1f0f7ebf1ae6c530$export$2061056d06d7cdf7);\n$parcel$export(module.exports, \"now\", () => $1f0f7ebf1ae6c530$export$461939dd4422153);\n$parcel$export(module.exports, \"today\", () => $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3);\n$parcel$export(module.exports, \"getHoursInDay\", () => $1f0f7ebf1ae6c530$export$126c91c941de7e);\n$parcel$export(module.exports, \"getLocalTimeZone\", () => $1f0f7ebf1ae6c530$export$aa8b41735afcabd2);\n$parcel$export(module.exports, \"startOfMonth\", () => $1f0f7ebf1ae6c530$export$a5a3b454ada2268e);\n$parcel$export(module.exports, \"startOfWeek\", () => $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4);\n$parcel$export(module.exports, \"startOfYear\", () => $1f0f7ebf1ae6c530$export$f91e89d3d0406102);\n$parcel$export(module.exports, \"endOfMonth\", () => $1f0f7ebf1ae6c530$export$a2258d9c4118825c);\n$parcel$export(module.exports, \"endOfWeek\", () => $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e);\n$parcel$export(module.exports, \"endOfYear\", () => $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e);\n$parcel$export(module.exports, \"getMinimumMonthInYear\", () => $1f0f7ebf1ae6c530$export$5412ac11713b72ad);\n$parcel$export(module.exports, \"getMinimumDayInMonth\", () => $1f0f7ebf1ae6c530$export$b2f4953d301981d5);\n$parcel$export(module.exports, \"getWeeksInMonth\", () => $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654);\n$parcel$export(module.exports, \"minDate\", () => $1f0f7ebf1ae6c530$export$5c333a116e949cdd);\n$parcel$export(module.exports, \"maxDate\", () => $1f0f7ebf1ae6c530$export$a75f2bff57811055);\n$parcel$export(module.exports, \"isWeekend\", () => $1f0f7ebf1ae6c530$export$618d60ea299da42);\n$parcel$export(module.exports, \"isWeekday\", () => $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed);\n$parcel$export(module.exports, \"parseDate\", () => $4c32e2d98e5a5134$export$6b862160d295c8e);\n$parcel$export(module.exports, \"parseDateTime\", () => $4c32e2d98e5a5134$export$588937bcd60ade55);\n$parcel$export(module.exports, \"parseTime\", () => $4c32e2d98e5a5134$export$c9698ec7f05a07e1);\n$parcel$export(module.exports, \"parseAbsolute\", () => $4c32e2d98e5a5134$export$5adfdab05168c219);\n$parcel$export(module.exports, \"parseAbsoluteToLocal\", () => $4c32e2d98e5a5134$export$8e384432362ed0f0);\n$parcel$export(module.exports, \"parseZonedDateTime\", () => $4c32e2d98e5a5134$export$fd7893f06e92a6a4);\n$parcel$export(module.exports, \"parseDuration\", () => $4c32e2d98e5a5134$export$ecae829bb3747ea6);\n$parcel$export(module.exports, \"DateFormatter\", () => $8f23a04ae90a588b$export$ad991b66133851cf);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nfunction $a5090d6430502238$export$842a2cf37af977e1(amount, numerator) {\n    return amount - numerator * Math.floor(amount / numerator);\n}\nfunction $a5090d6430502238$export$784d13d8ee351f07(date) {\n    if (date.era) return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(date.calendar, date.era, date.year, date.month, date.day);\n    else return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(date.calendar, date.year, date.month, date.day);\n}\nfunction $a5090d6430502238$export$27fa0172ae2644b3(date) {\n    if (date.era) return new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n    else return new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);\n}\n\n\nconst $af14c9812fdceb33$var$EPOCH = 1721426; // 001/01/03 Julian C.E.\nfunction $af14c9812fdceb33$export$f297eb839006d339(era, year, month, day) {\n    year = $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year);\n    let y1 = year - 1;\n    let monthOffset = -2;\n    if (month <= 2) monthOffset = 0;\n    else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year)) monthOffset = -1;\n    return $af14c9812fdceb33$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);\n}\nfunction $af14c9812fdceb33$export$553d7fa8e3805fc0(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\nfunction $af14c9812fdceb33$export$c36e0ecb2d4fa69d(era, year) {\n    return era === \"BC\" ? 1 - year : year;\n}\nfunction $af14c9812fdceb33$export$4475b7e617eb123c(year) {\n    let era = \"AD\";\n    if (year <= 0) {\n        era = \"BC\";\n        year = 1 - year;\n    }\n    return [\n        era,\n        year\n    ];\n}\nconst $af14c9812fdceb33$var$daysInMonth = {\n    standard: [\n        31,\n        28,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ],\n    leapyear: [\n        31,\n        29,\n        31,\n        30,\n        31,\n        30,\n        31,\n        31,\n        30,\n        31,\n        30,\n        31\n    ]\n};\nclass $af14c9812fdceb33$export$80ee6245ec4f29ec {\n    fromJulianDay(jd) {\n        let jd0 = jd;\n        let depoch = jd0 - $af14c9812fdceb33$var$EPOCH;\n        let quadricent = Math.floor(depoch / 146097);\n        let dqc = (0, $a5090d6430502238$export$842a2cf37af977e1)(depoch, 146097);\n        let cent = Math.floor(dqc / 36524);\n        let dcent = (0, $a5090d6430502238$export$842a2cf37af977e1)(dqc, 36524);\n        let quad = Math.floor(dcent / 1461);\n        let dquad = (0, $a5090d6430502238$export$842a2cf37af977e1)(dcent, 1461);\n        let yindex = Math.floor(dquad / 365);\n        let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);\n        let [era, year] = $af14c9812fdceb33$export$4475b7e617eb123c(extendedYear);\n        let yearDay = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, 1, 1);\n        let leapAdj = 2;\n        if (jd0 < $af14c9812fdceb33$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;\n        else if ($af14c9812fdceb33$export$553d7fa8e3805fc0(year)) leapAdj = 1;\n        let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);\n        let day = jd0 - $af14c9812fdceb33$export$f297eb839006d339(era, year, month, 1) + 1;\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, month, day);\n    }\n    toJulianDay(date) {\n        return $af14c9812fdceb33$export$f297eb839006d339(date.era, date.year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        return $af14c9812fdceb33$var$daysInMonth[$af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? \"leapyear\" : \"standard\"][date.month - 1];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getMonthsInYear(date) {\n        return 12;\n    }\n    getDaysInYear(date) {\n        return $af14c9812fdceb33$export$553d7fa8e3805fc0(date.year) ? 366 : 365;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getYearsInEra(date) {\n        return 9999;\n    }\n    getEras() {\n        return [\n            \"BC\",\n            \"AD\"\n        ];\n    }\n    isInverseEra(date) {\n        return date.era === \"BC\";\n    }\n    balanceDate(date) {\n        if (date.year <= 0) {\n            date.era = date.era === \"BC\" ? \"AD\" : \"BC\";\n            date.year = 1 - date.year;\n        }\n    }\n    constructor(){\n        this.identifier = \"gregory\";\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\n// Locales starting on Sunday have been removed for compression.\nconst $4d88eff242b38a9e$export$7a5acbd77d414bd9 = {\n    \"001\": 1,\n    AD: 1,\n    AE: 6,\n    AF: 6,\n    AI: 1,\n    AL: 1,\n    AM: 1,\n    AN: 1,\n    AR: 1,\n    AT: 1,\n    AU: 1,\n    AX: 1,\n    AZ: 1,\n    BA: 1,\n    BE: 1,\n    BG: 1,\n    BH: 6,\n    BM: 1,\n    BN: 1,\n    BY: 1,\n    CH: 1,\n    CL: 1,\n    CM: 1,\n    CN: 1,\n    CR: 1,\n    CY: 1,\n    CZ: 1,\n    DE: 1,\n    DJ: 6,\n    DK: 1,\n    DZ: 6,\n    EC: 1,\n    EE: 1,\n    EG: 6,\n    ES: 1,\n    FI: 1,\n    FJ: 1,\n    FO: 1,\n    FR: 1,\n    GB: 1,\n    GE: 1,\n    GF: 1,\n    GP: 1,\n    GR: 1,\n    HR: 1,\n    HU: 1,\n    IE: 1,\n    IQ: 6,\n    IR: 6,\n    IS: 1,\n    IT: 1,\n    JO: 6,\n    KG: 1,\n    KW: 6,\n    KZ: 1,\n    LB: 1,\n    LI: 1,\n    LK: 1,\n    LT: 1,\n    LU: 1,\n    LV: 1,\n    LY: 6,\n    MC: 1,\n    MD: 1,\n    ME: 1,\n    MK: 1,\n    MN: 1,\n    MQ: 1,\n    MV: 5,\n    MY: 1,\n    NL: 1,\n    NO: 1,\n    NZ: 1,\n    OM: 6,\n    PL: 1,\n    QA: 6,\n    RE: 1,\n    RO: 1,\n    RS: 1,\n    RU: 1,\n    SD: 6,\n    SE: 1,\n    SI: 1,\n    SK: 1,\n    SM: 1,\n    SY: 6,\n    TJ: 1,\n    TM: 1,\n    TR: 1,\n    UA: 1,\n    UY: 1,\n    UZ: 1,\n    VA: 1,\n    VN: 1,\n    XK: 1\n};\n\n\nfunction $1f0f7ebf1ae6c530$export$ea39ec197993aef0(a, b) {\n    b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);\n    return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $1f0f7ebf1ae6c530$export$a18c89cbd24170ff(a, b) {\n    b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);\n    // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.\n    a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);\n    b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);\n    return a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $1f0f7ebf1ae6c530$export$5841f9eb9773f25f(a, b) {\n    b = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(b, a.calendar);\n    a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);\n    b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);\n    return a.era === b.era && a.year === b.year;\n}\nfunction $1f0f7ebf1ae6c530$export$91b62ebf2ba703ee(a, b) {\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;\n}\nfunction $1f0f7ebf1ae6c530$export$5a8da0c44a3afdf2(a, b) {\n    a = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(a);\n    b = $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(b);\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;\n}\nfunction $1f0f7ebf1ae6c530$export$ea840f5a6dda8147(a, b) {\n    a = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(a);\n    b = $1f0f7ebf1ae6c530$export$f91e89d3d0406102(b);\n    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;\n}\nfunction $1f0f7ebf1ae6c530$export$629b0a497aa65267(date, timeZone) {\n    return $1f0f7ebf1ae6c530$export$ea39ec197993aef0(date, $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone));\n}\nfunction $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale) {\n    let julian = date.calendar.toJulianDay(date);\n    // If julian is negative, then julian % 7 will be negative, so we adjust\n    // accordingly.  Julian day 0 is Monday.\n    let dayOfWeek = Math.ceil(julian + 1 - $1f0f7ebf1ae6c530$var$getWeekStart(locale)) % 7;\n    if (dayOfWeek < 0) dayOfWeek += 7;\n    return dayOfWeek;\n}\nfunction $1f0f7ebf1ae6c530$export$461939dd4422153(timeZone) {\n    return (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(Date.now(), timeZone);\n}\nfunction $1f0f7ebf1ae6c530$export$d0bdf45af03a6ea3(timeZone) {\n    return (0, $4ae0260a69729f1d$export$93522d1a439f3617)($1f0f7ebf1ae6c530$export$461939dd4422153(timeZone));\n}\nfunction $1f0f7ebf1ae6c530$export$68781ddf31c0090f(a, b) {\n    return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);\n}\nfunction $1f0f7ebf1ae6c530$export$c19a80a9721b80f6(a, b) {\n    return $1f0f7ebf1ae6c530$var$timeToMs(a) - $1f0f7ebf1ae6c530$var$timeToMs(b);\n}\nfunction $1f0f7ebf1ae6c530$var$timeToMs(a) {\n    return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;\n}\nfunction $1f0f7ebf1ae6c530$export$126c91c941de7e(a, timeZone) {\n    let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(a, timeZone);\n    let tomorrow = a.add({\n        days: 1\n    });\n    let tomorrowMs = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(tomorrow, timeZone);\n    return (tomorrowMs - ms) / 3600000;\n}\nlet $1f0f7ebf1ae6c530$var$localTimeZone = null;\nfunction $1f0f7ebf1ae6c530$export$aa8b41735afcabd2() {\n    // TODO: invalidate this somehow?\n    if ($1f0f7ebf1ae6c530$var$localTimeZone == null) $1f0f7ebf1ae6c530$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return $1f0f7ebf1ae6c530$var$localTimeZone;\n}\nfunction $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date) {\n    // Use `subtract` instead of `set` so we don't get constrained in an era.\n    return date.subtract({\n        days: date.day - 1\n    });\n}\nfunction $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date) {\n    return date.add({\n        days: date.calendar.getDaysInMonth(date) - date.day\n    });\n}\nfunction $1f0f7ebf1ae6c530$export$f91e89d3d0406102(date) {\n    return $1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date.subtract({\n        months: date.month - 1\n    }));\n}\nfunction $1f0f7ebf1ae6c530$export$8b7aa55c66d5569e(date) {\n    return $1f0f7ebf1ae6c530$export$a2258d9c4118825c(date.add({\n        months: date.calendar.getMonthsInYear(date) - date.month\n    }));\n}\nfunction $1f0f7ebf1ae6c530$export$5412ac11713b72ad(date) {\n    if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);\n    return 1;\n}\nfunction $1f0f7ebf1ae6c530$export$b2f4953d301981d5(date) {\n    if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);\n    return 1;\n}\nfunction $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale) {\n    let dayOfWeek = $1f0f7ebf1ae6c530$export$2061056d06d7cdf7(date, locale);\n    return date.subtract({\n        days: dayOfWeek\n    });\n}\nfunction $1f0f7ebf1ae6c530$export$ef8b6d9133084f4e(date, locale) {\n    return $1f0f7ebf1ae6c530$export$42c81a444fbfb5d4(date, locale).add({\n        days: 6\n    });\n}\nconst $1f0f7ebf1ae6c530$var$cachedRegions = new Map();\nfunction $1f0f7ebf1ae6c530$var$getRegion(locale) {\n    // If the Intl.Locale API is available, use it to get the region for the locale.\n    // @ts-ignore\n    if (Intl.Locale) {\n        // Constructing an Intl.Locale is expensive, so cache the result.\n        let region = $1f0f7ebf1ae6c530$var$cachedRegions.get(locale);\n        if (!region) {\n            // @ts-ignore\n            region = new Intl.Locale(locale).maximize().region;\n            if (region) $1f0f7ebf1ae6c530$var$cachedRegions.set(locale, region);\n        }\n        return region;\n    }\n    // If not, just try splitting the string.\n    // If the second part of the locale string is 'u',\n    // then this is a unicode extension, so ignore it.\n    // Otherwise, it should be the region.\n    let part = locale.split(\"-\")[1];\n    return part === \"u\" ? undefined : part;\n}\nfunction $1f0f7ebf1ae6c530$var$getWeekStart(locale) {\n    // TODO: use Intl.Locale for this once browsers support the weekInfo property\n    // https://github.com/tc39/proposal-intl-locale-info\n    let region = $1f0f7ebf1ae6c530$var$getRegion(locale);\n    return region ? (0, $4d88eff242b38a9e$export$7a5acbd77d414bd9)[region] || 0 : 0;\n}\nfunction $1f0f7ebf1ae6c530$export$ccc1b2479e7dd654(date, locale) {\n    let days = date.calendar.getDaysInMonth(date);\n    return Math.ceil(($1f0f7ebf1ae6c530$export$2061056d06d7cdf7($1f0f7ebf1ae6c530$export$a5a3b454ada2268e(date), locale) + days) / 7);\n}\nfunction $1f0f7ebf1ae6c530$export$5c333a116e949cdd(a, b) {\n    if (a && b) return a.compare(b) <= 0 ? a : b;\n    return a || b;\n}\nfunction $1f0f7ebf1ae6c530$export$a75f2bff57811055(a, b) {\n    if (a && b) return a.compare(b) >= 0 ? a : b;\n    return a || b;\n}\nconst $1f0f7ebf1ae6c530$var$WEEKEND_DATA = {\n    AF: [\n        4,\n        5\n    ],\n    AE: [\n        5,\n        6\n    ],\n    BH: [\n        5,\n        6\n    ],\n    DZ: [\n        5,\n        6\n    ],\n    EG: [\n        5,\n        6\n    ],\n    IL: [\n        5,\n        6\n    ],\n    IQ: [\n        5,\n        6\n    ],\n    IR: [\n        5,\n        5\n    ],\n    JO: [\n        5,\n        6\n    ],\n    KW: [\n        5,\n        6\n    ],\n    LY: [\n        5,\n        6\n    ],\n    OM: [\n        5,\n        6\n    ],\n    QA: [\n        5,\n        6\n    ],\n    SA: [\n        5,\n        6\n    ],\n    SD: [\n        5,\n        6\n    ],\n    SY: [\n        5,\n        6\n    ],\n    YE: [\n        5,\n        6\n    ]\n};\nfunction $1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale) {\n    let julian = date.calendar.toJulianDay(date);\n    // If julian is negative, then julian % 7 will be negative, so we adjust\n    // accordingly.  Julian day 0 is Monday.\n    let dayOfWeek = Math.ceil(julian + 1) % 7;\n    if (dayOfWeek < 0) dayOfWeek += 7;\n    let region = $1f0f7ebf1ae6c530$var$getRegion(locale);\n    // Use Intl.Locale for this once weekInfo is supported.\n    // https://github.com/tc39/proposal-intl-locale-info\n    let [start, end] = $1f0f7ebf1ae6c530$var$WEEKEND_DATA[region] || [\n        6,\n        0\n    ];\n    return dayOfWeek === start || dayOfWeek === end;\n}\nfunction $1f0f7ebf1ae6c530$export$ee9d87258e1d19ed(date, locale) {\n    return !$1f0f7ebf1ae6c530$export$618d60ea299da42(date, locale);\n}\n\n\nfunction $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) {\n    date = $4ae0260a69729f1d$export$b4a036af3fc0b032(date, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());\n    let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(date.era, date.year);\n    return $4ae0260a69729f1d$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n    // Note: Date.UTC() interprets one and two-digit years as being in the\n    // 20th century, so don't use it\n    let date = new Date();\n    date.setUTCHours(hour, minute, second, millisecond);\n    date.setUTCFullYear(year, month - 1, day);\n    return date.getTime();\n}\nfunction $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone) {\n    // Fast path for UTC.\n    if (timeZone === \"UTC\") return 0;\n    // Fast path: for local timezone after 1970, use native Date.\n    if (ms > 0 && timeZone === (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n    let { year: year, month: month, day: day, hour: hour, minute: minute, second: second } = $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone);\n    let utc = $4ae0260a69729f1d$var$epochFromParts(year, month, day, hour, minute, second, 0);\n    return utc - Math.floor(ms / 1000) * 1000;\n}\nconst $4ae0260a69729f1d$var$formattersByTimeZone = new Map();\nfunction $4ae0260a69729f1d$var$getTimeZoneParts(ms, timeZone) {\n    let formatter = $4ae0260a69729f1d$var$formattersByTimeZone.get(timeZone);\n    if (!formatter) {\n        formatter = new Intl.DateTimeFormat(\"en-US\", {\n            timeZone: timeZone,\n            hour12: false,\n            era: \"short\",\n            year: \"numeric\",\n            month: \"numeric\",\n            day: \"numeric\",\n            hour: \"numeric\",\n            minute: \"numeric\",\n            second: \"numeric\"\n        });\n        $4ae0260a69729f1d$var$formattersByTimeZone.set(timeZone, formatter);\n    }\n    let parts = formatter.formatToParts(new Date(ms));\n    let namedParts = {};\n    for (let part of parts)if (part.type !== \"literal\") namedParts[part.type] = part.value;\n    return {\n        // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n        year: namedParts.era === \"BC\" || namedParts.era === \"B\" ? -namedParts.year + 1 : +namedParts.year,\n        month: +namedParts.month,\n        day: +namedParts.day,\n        hour: namedParts.hour === \"24\" ? 0 : +namedParts.hour,\n        minute: +namedParts.minute,\n        second: +namedParts.second\n    };\n}\nconst $4ae0260a69729f1d$var$DAYMILLIS = 86400000;\nfunction $4ae0260a69729f1d$export$136f38efe7caf549(date, timeZone) {\n    let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date);\n    let earlier = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);\n    let later = ms - $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);\n    return $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $4ae0260a69729f1d$var$getValidWallTimes(date, timeZone, earlier, later) {\n    let found = earlier === later ? [\n        earlier\n    ] : [\n        earlier,\n        later\n    ];\n    return found.filter((absolute)=>$4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute));\n}\nfunction $4ae0260a69729f1d$var$isValidWallTime(date, timeZone, absolute) {\n    let parts = $4ae0260a69729f1d$var$getTimeZoneParts(absolute, timeZone);\n    return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation = \"compatible\") {\n    let dateTime = $4ae0260a69729f1d$export$b21e0b124e224484(date);\n    // Fast path: if the time zone is UTC, use native Date.\n    if (timeZone === \"UTC\") return $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);\n    // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n    if (timeZone === (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)() && disambiguation === \"compatible\") {\n        dateTime = $4ae0260a69729f1d$export$b4a036af3fc0b032(dateTime, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());\n        // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n        let date = new Date();\n        let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n        date.setFullYear(year, dateTime.month - 1, dateTime.day);\n        date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n        return date.getTime();\n    }\n    let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(dateTime);\n    let offsetBefore = $4ae0260a69729f1d$export$59c99f3515d3493f(ms - $4ae0260a69729f1d$var$DAYMILLIS, timeZone);\n    let offsetAfter = $4ae0260a69729f1d$export$59c99f3515d3493f(ms + $4ae0260a69729f1d$var$DAYMILLIS, timeZone);\n    let valid = $4ae0260a69729f1d$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n    if (valid.length === 1) return valid[0];\n    if (valid.length > 1) switch(disambiguation){\n        // 'compatible' means 'earlier' for \"fall back\" transitions\n        case \"compatible\":\n        case \"earlier\":\n            return valid[0];\n        case \"later\":\n            return valid[valid.length - 1];\n        case \"reject\":\n            throw new RangeError(\"Multiple possible absolute times found\");\n    }\n    switch(disambiguation){\n        case \"earlier\":\n            return Math.min(ms - offsetBefore, ms - offsetAfter);\n        // 'compatible' means 'later' for \"spring forward\" transitions\n        case \"compatible\":\n        case \"later\":\n            return Math.max(ms - offsetBefore, ms - offsetAfter);\n        case \"reject\":\n            throw new RangeError(\"No such absolute time found\");\n    }\n}\nfunction $4ae0260a69729f1d$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = \"compatible\") {\n    return new Date($4ae0260a69729f1d$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone) {\n    let offset = $4ae0260a69729f1d$export$59c99f3515d3493f(ms, timeZone);\n    let date = new Date(ms + offset);\n    let year = date.getUTCFullYear();\n    let month = date.getUTCMonth() + 1;\n    let day = date.getUTCDate();\n    let hour = date.getUTCHours();\n    let minute = date.getUTCMinutes();\n    let second = date.getUTCSeconds();\n    let millisecond = date.getUTCMilliseconds();\n    return new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $4ae0260a69729f1d$export$e57ff100d91bd4b9(date, timeZone) {\n    return $4ae0260a69729f1d$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $4ae0260a69729f1d$export$d7f92bcd3596b086(date) {\n    return $4ae0260a69729f1d$export$e57ff100d91bd4b9(date, (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)());\n}\nfunction $4ae0260a69729f1d$export$93522d1a439f3617(dateTime) {\n    return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $4ae0260a69729f1d$export$6f4d78149f3f53ac(date) {\n    return {\n        era: date.era,\n        year: date.year,\n        month: date.month,\n        day: date.day\n    };\n}\nfunction $4ae0260a69729f1d$export$4d0393e732857be5(date) {\n    return {\n        hour: date.hour,\n        minute: date.minute,\n        second: date.second,\n        millisecond: date.millisecond\n    };\n}\nfunction $4ae0260a69729f1d$export$b21e0b124e224484(date, time) {\n    let hour = 0, minute = 0, second = 0, millisecond = 0;\n    if (\"timeZone\" in date) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = date);\n    else if (\"hour\" in date && !time) return date;\n    if (time) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = time);\n    return new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $4ae0260a69729f1d$export$d33f79e3ffc3dc83(dateTime) {\n    return new (0, $625ad1e1f4c43bc1$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $4ae0260a69729f1d$export$b4a036af3fc0b032(date, calendar) {\n    if (date.calendar.identifier === calendar.identifier) return date;\n    let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n    let copy = date.copy();\n    copy.calendar = calendar;\n    copy.era = calendarDate.era;\n    copy.year = calendarDate.year;\n    copy.month = calendarDate.month;\n    copy.day = calendarDate.day;\n    (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(copy);\n    return copy;\n}\nfunction $4ae0260a69729f1d$export$84c95a83c799e074(date, timeZone, disambiguation) {\n    if (date instanceof (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)) {\n        if (date.timeZone === timeZone) return date;\n        return $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone);\n    }\n    let ms = $4ae0260a69729f1d$export$5107c82f94518f5c(date, timeZone, disambiguation);\n    return $4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $4ae0260a69729f1d$export$83aac07b4c37b25(date) {\n    let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;\n    return new Date(ms);\n}\nfunction $4ae0260a69729f1d$export$538b00033cc11c75(date, timeZone) {\n    let ms = $4ae0260a69729f1d$export$bd4fb2bc8bb06fb(date) - date.offset;\n    return $4ae0260a69729f1d$export$b4a036af3fc0b032($4ae0260a69729f1d$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $4ae0260a69729f1d$export$d9b67bc93c097491(date) {\n    return $4ae0260a69729f1d$export$538b00033cc11c75(date, (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)());\n}\n\n\n\nconst $5c0571aa5b6fb5da$var$ONE_HOUR = 3600000;\nfunction $5c0571aa5b6fb5da$export$e16d8520af44a096(date, duration) {\n    let mutableDate = date.copy();\n    let days = \"hour\" in mutableDate ? $5c0571aa5b6fb5da$var$addTimeFields(mutableDate, duration) : 0;\n    $5c0571aa5b6fb5da$var$addYears(mutableDate, duration.years || 0);\n    if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);\n    mutableDate.month += duration.months || 0;\n    $5c0571aa5b6fb5da$var$balanceYearMonth(mutableDate);\n    $5c0571aa5b6fb5da$var$constrainMonthDay(mutableDate);\n    mutableDate.day += (duration.weeks || 0) * 7;\n    mutableDate.day += duration.days || 0;\n    mutableDate.day += days;\n    $5c0571aa5b6fb5da$var$balanceDay(mutableDate);\n    if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);\n    // Constrain in case adding ended up with a date outside the valid range for the calendar system.\n    // The behavior here is slightly different than when constraining in the `set` function in that\n    // we adjust smaller fields to their minimum/maximum values rather than constraining each field\n    // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.\n    if (mutableDate.year < 1) {\n        mutableDate.year = 1;\n        mutableDate.month = 1;\n        mutableDate.day = 1;\n    }\n    let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);\n    if (mutableDate.year > maxYear) {\n        var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;\n        let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);\n        mutableDate.year = maxYear;\n        mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);\n        mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);\n    }\n    if (mutableDate.month < 1) {\n        mutableDate.month = 1;\n        mutableDate.day = 1;\n    }\n    let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);\n    if (mutableDate.month > maxMonth) {\n        mutableDate.month = maxMonth;\n        mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);\n    }\n    mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));\n    return mutableDate;\n}\nfunction $5c0571aa5b6fb5da$var$addYears(date, years) {\n    var _date_calendar_isInverseEra, _date_calendar;\n    if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;\n    date.year += years;\n}\nfunction $5c0571aa5b6fb5da$var$balanceYearMonth(date) {\n    while(date.month < 1){\n        $5c0571aa5b6fb5da$var$addYears(date, -1);\n        date.month += date.calendar.getMonthsInYear(date);\n    }\n    let monthsInYear = 0;\n    while(date.month > (monthsInYear = date.calendar.getMonthsInYear(date))){\n        date.month -= monthsInYear;\n        $5c0571aa5b6fb5da$var$addYears(date, 1);\n    }\n}\nfunction $5c0571aa5b6fb5da$var$balanceDay(date) {\n    while(date.day < 1){\n        date.month--;\n        $5c0571aa5b6fb5da$var$balanceYearMonth(date);\n        date.day += date.calendar.getDaysInMonth(date);\n    }\n    while(date.day > date.calendar.getDaysInMonth(date)){\n        date.day -= date.calendar.getDaysInMonth(date);\n        date.month++;\n        $5c0571aa5b6fb5da$var$balanceYearMonth(date);\n    }\n}\nfunction $5c0571aa5b6fb5da$var$constrainMonthDay(date) {\n    date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));\n    date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));\n}\nfunction $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(date) {\n    if (date.calendar.constrainDate) date.calendar.constrainDate(date);\n    date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));\n    $5c0571aa5b6fb5da$var$constrainMonthDay(date);\n}\nfunction $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration) {\n    let inverseDuration = {};\n    for(let key in duration)if (typeof duration[key] === \"number\") inverseDuration[key] = -duration[key];\n    return inverseDuration;\n}\nfunction $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3(date, duration) {\n    return $5c0571aa5b6fb5da$export$e16d8520af44a096(date, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));\n}\nfunction $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(date, fields) {\n    let mutableDate = date.copy();\n    if (fields.era != null) mutableDate.era = fields.era;\n    if (fields.year != null) mutableDate.year = fields.year;\n    if (fields.month != null) mutableDate.month = fields.month;\n    if (fields.day != null) mutableDate.day = fields.day;\n    $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutableDate);\n    return mutableDate;\n}\nfunction $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(value, fields) {\n    let mutableValue = value.copy();\n    if (fields.hour != null) mutableValue.hour = fields.hour;\n    if (fields.minute != null) mutableValue.minute = fields.minute;\n    if (fields.second != null) mutableValue.second = fields.second;\n    if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;\n    $5c0571aa5b6fb5da$export$7555de1e070510cb(mutableValue);\n    return mutableValue;\n}\nfunction $5c0571aa5b6fb5da$var$balanceTime(time) {\n    time.second += Math.floor(time.millisecond / 1000);\n    time.millisecond = $5c0571aa5b6fb5da$var$nonNegativeMod(time.millisecond, 1000);\n    time.minute += Math.floor(time.second / 60);\n    time.second = $5c0571aa5b6fb5da$var$nonNegativeMod(time.second, 60);\n    time.hour += Math.floor(time.minute / 60);\n    time.minute = $5c0571aa5b6fb5da$var$nonNegativeMod(time.minute, 60);\n    let days = Math.floor(time.hour / 24);\n    time.hour = $5c0571aa5b6fb5da$var$nonNegativeMod(time.hour, 24);\n    return days;\n}\nfunction $5c0571aa5b6fb5da$export$7555de1e070510cb(time) {\n    time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));\n    time.second = Math.max(0, Math.min(time.second, 59));\n    time.minute = Math.max(0, Math.min(time.minute, 59));\n    time.hour = Math.max(0, Math.min(time.hour, 23));\n}\nfunction $5c0571aa5b6fb5da$var$nonNegativeMod(a, b) {\n    let result = a % b;\n    if (result < 0) result += b;\n    return result;\n}\nfunction $5c0571aa5b6fb5da$var$addTimeFields(time, duration) {\n    time.hour += duration.hours || 0;\n    time.minute += duration.minutes || 0;\n    time.second += duration.seconds || 0;\n    time.millisecond += duration.milliseconds || 0;\n    return $5c0571aa5b6fb5da$var$balanceTime(time);\n}\nfunction $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, duration) {\n    let res = time.copy();\n    $5c0571aa5b6fb5da$var$addTimeFields(res, duration);\n    return res;\n}\nfunction $5c0571aa5b6fb5da$export$fe34d3a381cd7501(time, duration) {\n    return $5c0571aa5b6fb5da$export$7ed87b6bc2506470(time, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));\n}\nfunction $5c0571aa5b6fb5da$export$d52ced6badfb9a4c(value, field, amount, options) {\n    let mutable = value.copy();\n    switch(field){\n        case \"era\":\n            {\n                let eras = value.calendar.getEras();\n                let eraIndex = eras.indexOf(value.era);\n                if (eraIndex < 0) throw new Error(\"Invalid era: \" + value.era);\n                eraIndex = $5c0571aa5b6fb5da$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);\n                mutable.era = eras[eraIndex];\n                // Constrain the year and other fields within the era, so the era doesn't change when we balance below.\n                $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);\n                break;\n            }\n        case \"year\":\n            var _mutable_calendar_isInverseEra, _mutable_calendar;\n            if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;\n            // The year field should not cycle within the era as that can cause weird behavior affecting other fields.\n            // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back\n            // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.\n            mutable.year = $5c0571aa5b6fb5da$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);\n            if (mutable.year === -Infinity) mutable.year = 1;\n            if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);\n            break;\n        case \"month\":\n            mutable.month = $5c0571aa5b6fb5da$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"day\":\n            mutable.day = $5c0571aa5b6fb5da$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);\n            break;\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n    if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);\n    $5c0571aa5b6fb5da$export$c4e2ecac49351ef2(mutable);\n    return mutable;\n}\nfunction $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(value, field, amount, options) {\n    let mutable = value.copy();\n    switch(field){\n        case \"hour\":\n            {\n                let hours = value.hour;\n                let min = 0;\n                let max = 23;\n                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n                    let isPM = hours >= 12;\n                    min = isPM ? 12 : 0;\n                    max = isPM ? 23 : 11;\n                }\n                mutable.hour = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);\n                break;\n            }\n        case \"minute\":\n            mutable.minute = $5c0571aa5b6fb5da$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"second\":\n            mutable.second = $5c0571aa5b6fb5da$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        case \"millisecond\":\n            mutable.millisecond = $5c0571aa5b6fb5da$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);\n            break;\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n    return mutable;\n}\nfunction $5c0571aa5b6fb5da$var$cycleValue(value, amount, min, max, round = false) {\n    if (round) {\n        value += Math.sign(amount);\n        if (value < min) value = max;\n        let div = Math.abs(amount);\n        if (amount > 0) value = Math.ceil(value / div) * div;\n        else value = Math.floor(value / div) * div;\n        if (value > max) value = min;\n    } else {\n        value += amount;\n        if (value < min) value = max - (min - value - 1);\n        else if (value > max) value = min + (value - max - 1);\n    }\n    return value;\n}\nfunction $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, duration) {\n    let ms;\n    if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {\n        let res = $5c0571aa5b6fb5da$export$e16d8520af44a096((0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime), {\n            years: duration.years,\n            months: duration.months,\n            weeks: duration.weeks,\n            days: duration.days\n        });\n        // Changing the date may change the timezone offset, so we need to recompute\n        // using the 'compatible' disambiguation.\n        ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res, dateTime.timeZone);\n    } else // Otherwise, preserve the offset of the original date.\n    ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n    // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.\n    // For example, adding one hour during a DST transition may result in the hour field staying the same or\n    // skipping an hour. This results in the offset field changing value instead of the specified field.\n    ms += duration.milliseconds || 0;\n    ms += (duration.seconds || 0) * 1000;\n    ms += (duration.minutes || 0) * 60000;\n    ms += (duration.hours || 0) * 3600000;\n    let res = (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone);\n    return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(res, dateTime.calendar);\n}\nfunction $5c0571aa5b6fb5da$export$6814caac34ca03c7(dateTime, duration) {\n    return $5c0571aa5b6fb5da$export$96b1d28349274637(dateTime, $5c0571aa5b6fb5da$export$3e2544e88a25bff8(duration));\n}\nfunction $5c0571aa5b6fb5da$export$9a297d111fc86b79(dateTime, field, amount, options) {\n    // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.\n    // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC\n    // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.\n    switch(field){\n        case \"hour\":\n            {\n                let min = 0;\n                let max = 23;\n                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {\n                    let isPM = dateTime.hour >= 12;\n                    min = isPM ? 12 : 0;\n                    max = isPM ? 23 : 11;\n                }\n                // The minimum and maximum hour may be affected by daylight saving time.\n                // For example, it might jump forward at midnight, and skip 1am.\n                // Or it might end at midnight and repeat the 11pm hour. To handle this, we get\n                // the possible absolute times for the min and max, and find the maximum range\n                // that is within the current day.\n                let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime);\n                let minDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {\n                    hour: min\n                }), new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());\n                let minAbsolute = [\n                    (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"earlier\"),\n                    (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(minDate, dateTime.timeZone, \"later\")\n                ].filter((ms)=>(0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];\n                let maxDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)($5c0571aa5b6fb5da$export$e5d5e1c1822b6e56(plainDateTime, {\n                    hour: max\n                }), new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());\n                let maxAbsolute = [\n                    (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"earlier\"),\n                    (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, \"later\")\n                ].filter((ms)=>(0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop();\n                // Since hours may repeat, we need to operate on the absolute time in milliseconds.\n                // This is done in hours from the Unix epoch so that cycleValue works correctly,\n                // and then converted back to milliseconds.\n                let ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;\n                let hours = Math.floor(ms / $5c0571aa5b6fb5da$var$ONE_HOUR);\n                let remainder = ms % $5c0571aa5b6fb5da$var$ONE_HOUR;\n                ms = $5c0571aa5b6fb5da$var$cycleValue(hours, amount, Math.floor(minAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), Math.floor(maxAbsolute / $5c0571aa5b6fb5da$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $5c0571aa5b6fb5da$var$ONE_HOUR + remainder;\n                // Now compute the new timezone offset, and convert the absolute time back to local time.\n                return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n            }\n        case \"minute\":\n        case \"second\":\n        case \"millisecond\":\n            // @ts-ignore\n            return $5c0571aa5b6fb5da$export$dd02b3e0007dfe28(dateTime, field, amount, options);\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n            {\n                let res = $5c0571aa5b6fb5da$export$d52ced6badfb9a4c((0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime), field, amount, options);\n                let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res, dateTime.timeZone);\n                return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n            }\n        default:\n            throw new Error(\"Unsupported field \" + field);\n    }\n}\nfunction $5c0571aa5b6fb5da$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {\n    // Set the date/time fields, and recompute the UTC offset to account for DST changes.\n    // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.\n    let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(dateTime);\n    let res = $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56($5c0571aa5b6fb5da$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);\n    // If the resulting plain date time values are equal, return the original time.\n    // We don't want to change the offset when setting the time to the same value.\n    if (res.compare(plainDateTime) === 0) return dateTime;\n    let ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);\n    return (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)((0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);\n}\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\nconst $4c32e2d98e5a5134$var$TIME_RE = /^(\\d{2})(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $4c32e2d98e5a5134$var$DATE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\nconst $4c32e2d98e5a5134$var$DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?$/;\nconst $4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:([+-]\\d{2})(?::?(\\d{2}))?)?\\[(.*?)\\]$/;\nconst $4c32e2d98e5a5134$var$ABSOLUTE_RE = /^(\\d{4})-(\\d{2})-(\\d{2})(?:T(\\d{2}))?(?::(\\d{2}))?(?::(\\d{2}))?(\\.\\d+)?(?:(?:([+-]\\d{2})(?::?(\\d{2}))?)|Z)$/;\nconst $4c32e2d98e5a5134$var$DATE_TIME_DURATION_RE = /^((?<negative>-)|\\+)?P((?<years>\\d*)Y)?((?<months>\\d*)M)?((?<weeks>\\d*)W)?((?<days>\\d*)D)?((?<time>T)((?<hours>\\d*[.,]?\\d{1,9})H)?((?<minutes>\\d*[.,]?\\d{1,9})M)?((?<seconds>\\d*[.,]?\\d{1,9})S)?)?$/;\nconst $4c32e2d98e5a5134$var$requiredDurationTimeGroups = [\n    \"hours\",\n    \"minutes\",\n    \"seconds\"\n];\nconst $4c32e2d98e5a5134$var$requiredDurationGroups = [\n    \"years\",\n    \"months\",\n    \"weeks\",\n    \"days\",\n    ...$4c32e2d98e5a5134$var$requiredDurationTimeGroups\n];\nfunction $4c32e2d98e5a5134$export$c9698ec7f05a07e1(value) {\n    let m = value.match($4c32e2d98e5a5134$var$TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 time string: \" + value);\n    return new (0, $625ad1e1f4c43bc1$export$680ea196effce5f)($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 23), m[2] ? $4c32e2d98e5a5134$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $4c32e2d98e5a5134$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);\n}\nfunction $4c32e2d98e5a5134$export$6b862160d295c8e(value) {\n    let m = value.match($4c32e2d98e5a5134$var$DATE_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date string: \" + value);\n    let date = new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)($4c32e2d98e5a5134$var$parseNumber(m[1], 0, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1);\n    date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    return date;\n}\nfunction $4c32e2d98e5a5134$export$588937bcd60ade55(value) {\n    let m = value.match($4c32e2d98e5a5134$var$DATE_TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $625ad1e1f4c43bc1$export$ca871e8dbb80966f)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    return date;\n}\nfunction $4c32e2d98e5a5134$export$fd7893f06e92a6a4(value, disambiguation) {\n    let m = value.match($4c32e2d98e5a5134$var$ZONED_DATE_TIME_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    let plainDateTime = (0, $4ae0260a69729f1d$export$b21e0b124e224484)(date);\n    let ms;\n    if (m[8]) {\n        var _m_;\n        date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 3600000 + $4c32e2d98e5a5134$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n        ms = (0, $4ae0260a69729f1d$export$bd4fb2bc8bb06fb)(date) - date.offset;\n        // Validate offset against parsed date.\n        let absolutes = (0, $4ae0260a69729f1d$export$136f38efe7caf549)(plainDateTime, date.timeZone);\n        if (!absolutes.includes(ms)) throw new Error(`Offset ${$4c32e2d98e5a5134$var$offsetToString(date.offset)} is invalid for ${$4c32e2d98e5a5134$export$4223de14708adc63(date)} in ${date.timeZone}`);\n    } else // Convert to absolute and back to fix invalid times due to DST.\n    ms = (0, $4ae0260a69729f1d$export$5107c82f94518f5c)((0, $4ae0260a69729f1d$export$b21e0b124e224484)(plainDateTime), date.timeZone, disambiguation);\n    return (0, $4ae0260a69729f1d$export$1b96692a1ba042ac)(ms, date.timeZone);\n}\nfunction $4c32e2d98e5a5134$export$5adfdab05168c219(value, timeZone) {\n    let m = value.match($4c32e2d98e5a5134$var$ABSOLUTE_RE);\n    if (!m) throw new Error(\"Invalid ISO 8601 date time string: \" + value);\n    let date = new (0, $625ad1e1f4c43bc1$export$d3b7288e7994edea)($4c32e2d98e5a5134$var$parseNumber(m[1], 1, 9999), $4c32e2d98e5a5134$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $4c32e2d98e5a5134$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $4c32e2d98e5a5134$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $4c32e2d98e5a5134$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $4c32e2d98e5a5134$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);\n    date.day = $4c32e2d98e5a5134$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));\n    var _m_;\n    if (m[8]) date.offset = $4c32e2d98e5a5134$var$parseNumber(m[8], -23, 23) * 3600000 + $4c32e2d98e5a5134$var$parseNumber((_m_ = m[9]) !== null && _m_ !== void 0 ? _m_ : \"0\", 0, 59) * 60000;\n    return (0, $4ae0260a69729f1d$export$538b00033cc11c75)(date, timeZone);\n}\nfunction $4c32e2d98e5a5134$export$8e384432362ed0f0(value) {\n    return $4c32e2d98e5a5134$export$5adfdab05168c219(value, (0, $1f0f7ebf1ae6c530$export$aa8b41735afcabd2)());\n}\nfunction $4c32e2d98e5a5134$var$parseNumber(value, min, max) {\n    let val = Number(value);\n    if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);\n    return val;\n}\nfunction $4c32e2d98e5a5134$export$f59dee82248f5ad4(time) {\n    return `${String(time.hour).padStart(2, \"0\")}:${String(time.minute).padStart(2, \"0\")}:${String(time.second).padStart(2, \"0\")}${time.millisecond ? String(time.millisecond / 1000).slice(1) : \"\"}`;\n}\nfunction $4c32e2d98e5a5134$export$60dfd74aa96791bd(date) {\n    let gregorianDate = (0, $4ae0260a69729f1d$export$b4a036af3fc0b032)(date, new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)());\n    return `${String(gregorianDate.year).padStart(4, \"0\")}-${String(gregorianDate.month).padStart(2, \"0\")}-${String(gregorianDate.day).padStart(2, \"0\")}`;\n}\nfunction $4c32e2d98e5a5134$export$4223de14708adc63(date) {\n    // @ts-ignore\n    return `${$4c32e2d98e5a5134$export$60dfd74aa96791bd(date)}T${$4c32e2d98e5a5134$export$f59dee82248f5ad4(date)}`;\n}\nfunction $4c32e2d98e5a5134$var$offsetToString(offset) {\n    let sign = Math.sign(offset) < 0 ? \"-\" : \"+\";\n    offset = Math.abs(offset);\n    let offsetHours = Math.floor(offset / 3600000);\n    let offsetMinutes = offset % 3600000 / 60000;\n    return `${sign}${String(offsetHours).padStart(2, \"0\")}:${String(offsetMinutes).padStart(2, \"0\")}`;\n}\nfunction $4c32e2d98e5a5134$export$bf79f1ebf4b18792(date) {\n    return `${$4c32e2d98e5a5134$export$4223de14708adc63(date)}${$4c32e2d98e5a5134$var$offsetToString(date.offset)}[${date.timeZone}]`;\n}\nfunction $4c32e2d98e5a5134$export$ecae829bb3747ea6(value) {\n    var _match_groups, _match_groups1, _match_groups2, _match_groups3, _match_groups4, _match_groups5, _match_groups6, _match_groups7, _match_groups8;\n    const match = value.match($4c32e2d98e5a5134$var$DATE_TIME_DURATION_RE);\n    if (!match) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    const parseDurationGroup = (group, isNegative, min, max)=>{\n        if (!group) return 0;\n        try {\n            const sign = isNegative ? -1 : 1;\n            return sign * $4c32e2d98e5a5134$var$parseNumber(group.replace(\",\", \".\"), min, max);\n        } catch  {\n            throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n        }\n    };\n    const isNegative = !!((_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups.negative);\n    const hasRequiredGroups = $4c32e2d98e5a5134$var$requiredDurationGroups.some((group)=>{\n        var _match_groups;\n        return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n    });\n    if (!hasRequiredGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    const durationStringIncludesTime = (_match_groups1 = match.groups) === null || _match_groups1 === void 0 ? void 0 : _match_groups1.time;\n    if (durationStringIncludesTime) {\n        const hasRequiredDurationTimeGroups = $4c32e2d98e5a5134$var$requiredDurationTimeGroups.some((group)=>{\n            var _match_groups;\n            return (_match_groups = match.groups) === null || _match_groups === void 0 ? void 0 : _match_groups[group];\n        });\n        if (!hasRequiredDurationTimeGroups) throw new Error(`Invalid ISO 8601 Duration string: ${value}`);\n    }\n    const duration = {\n        years: parseDurationGroup((_match_groups2 = match.groups) === null || _match_groups2 === void 0 ? void 0 : _match_groups2.years, isNegative, 0, 9999),\n        months: parseDurationGroup((_match_groups3 = match.groups) === null || _match_groups3 === void 0 ? void 0 : _match_groups3.months, isNegative, 0, 12),\n        weeks: parseDurationGroup((_match_groups4 = match.groups) === null || _match_groups4 === void 0 ? void 0 : _match_groups4.weeks, isNegative, 0, Infinity),\n        days: parseDurationGroup((_match_groups5 = match.groups) === null || _match_groups5 === void 0 ? void 0 : _match_groups5.days, isNegative, 0, 31),\n        hours: parseDurationGroup((_match_groups6 = match.groups) === null || _match_groups6 === void 0 ? void 0 : _match_groups6.hours, isNegative, 0, 23),\n        minutes: parseDurationGroup((_match_groups7 = match.groups) === null || _match_groups7 === void 0 ? void 0 : _match_groups7.minutes, isNegative, 0, 59),\n        seconds: parseDurationGroup((_match_groups8 = match.groups) === null || _match_groups8 === void 0 ? void 0 : _match_groups8.seconds, isNegative, 0, 59)\n    };\n    if (duration.hours !== undefined && duration.hours % 1 !== 0 && (duration.minutes || duration.seconds)) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n    if (duration.minutes !== undefined && duration.minutes % 1 !== 0 && duration.seconds) throw new Error(`Invalid ISO 8601 Duration string: ${value} - only the smallest unit can be fractional`);\n    return duration;\n}\n\n\n\n\nfunction $625ad1e1f4c43bc1$var$shiftArgs(args) {\n    let calendar = typeof args[0] === \"object\" ? args.shift() : new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)();\n    let era;\n    if (typeof args[0] === \"string\") era = args.shift();\n    else {\n        let eras = calendar.getEras();\n        era = eras[eras.length - 1];\n    }\n    let year = args.shift();\n    let month = args.shift();\n    let day = args.shift();\n    return [\n        calendar,\n        era,\n        year,\n        month,\n        day\n    ];\n}\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.\n// If that behavior is desired, use the AnyCalendarDate interface instead.\n// @ts-ignore\n$625ad1e1f4c43bc1$var$_type = /*#__PURE__*/ new WeakMap();\nclass $625ad1e1f4c43bc1$export$99faa760c7908e4f {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);\n        else return new $625ad1e1f4c43bc1$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);\n    }\n    /** Returns a new `CalendarDate` with the given duration added to it. */ add(duration) {\n        return (0, $5c0571aa5b6fb5da$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be)(this, fields);\n    }\n    /**\n   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $5c0571aa5b6fb5da$export$d52ced6badfb9a4c)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */ toDate(timeZone) {\n        return (0, $4ae0260a69729f1d$export$e67a095c620b86fe)(this, timeZone);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */ toString() {\n        return (0, $4c32e2d98e5a5134$export$60dfd74aa96791bd)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        return (0, $1f0f7ebf1ae6c530$export$68781ddf31c0090f)(this, b);\n    }\n    constructor(...args){\n        (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);\n    }\n}\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$625ad1e1f4c43bc1$var$_type1 = /*#__PURE__*/ new WeakMap();\nclass $625ad1e1f4c43bc1$export$680ea196effce5f {\n    /** Returns a copy of this time. */ copy() {\n        return new $625ad1e1f4c43bc1$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `Time` with the given duration added to it. */ add(duration) {\n        return (0, $5c0571aa5b6fb5da$export$7ed87b6bc2506470)(this, duration);\n    }\n    /** Returns a new `Time` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $5c0571aa5b6fb5da$export$fe34d3a381cd7501)(this, duration);\n    }\n    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56)(this, fields);\n    }\n    /**\n   * Returns a new `Time` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $5c0571aa5b6fb5da$export$dd02b3e0007dfe28)(this, field, amount, options);\n    }\n    /** Converts the time to an ISO 8601 formatted string. */ toString() {\n        return (0, $4c32e2d98e5a5134$export$f59dee82248f5ad4)(this);\n    }\n    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */ compare(b) {\n        return (0, $1f0f7ebf1ae6c530$export$c19a80a9721b80f6)(this, b);\n    }\n    constructor(hour = 0, minute = 0, second = 0, millisecond = 0){\n        (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type1, {\n            writable: true,\n            value: void 0\n        });\n        this.hour = hour;\n        this.minute = minute;\n        this.second = second;\n        this.millisecond = millisecond;\n        (0, $5c0571aa5b6fb5da$export$7555de1e070510cb)(this);\n    }\n}\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$625ad1e1f4c43bc1$var$_type2 = /*#__PURE__*/ new WeakMap();\nclass $625ad1e1f4c43bc1$export$ca871e8dbb80966f {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n        else return new $625ad1e1f4c43bc1$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration added to it. */ add(duration) {\n        return (0, $5c0571aa5b6fb5da$export$e16d8520af44a096)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $5c0571aa5b6fb5da$export$4e2d2ead65e5f7e3)(this, duration);\n    }\n    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {\n        return (0, $5c0571aa5b6fb5da$export$adaa4cf7ef1b65be)((0, $5c0571aa5b6fb5da$export$e5d5e1c1822b6e56)(this, fields), fields);\n    }\n    /**\n   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        switch(field){\n            case \"era\":\n            case \"year\":\n            case \"month\":\n            case \"day\":\n                return (0, $5c0571aa5b6fb5da$export$d52ced6badfb9a4c)(this, field, amount, options);\n            default:\n                return (0, $5c0571aa5b6fb5da$export$dd02b3e0007dfe28)(this, field, amount, options);\n        }\n    }\n    /** Converts the date to a native JavaScript Date object in the given time zone. */ toDate(timeZone, disambiguation) {\n        return (0, $4ae0260a69729f1d$export$e67a095c620b86fe)(this, timeZone, disambiguation);\n    }\n    /** Converts the date to an ISO 8601 formatted string. */ toString() {\n        return (0, $4c32e2d98e5a5134$export$4223de14708adc63)(this);\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        let res = (0, $1f0f7ebf1ae6c530$export$68781ddf31c0090f)(this, b);\n        if (res === 0) return (0, $1f0f7ebf1ae6c530$export$c19a80a9721b80f6)(this, (0, $4ae0260a69729f1d$export$b21e0b124e224484)(b));\n        return res;\n    }\n    constructor(...args){\n        (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type2, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.hour = args.shift() || 0;\n        this.minute = args.shift() || 0;\n        this.second = args.shift() || 0;\n        this.millisecond = args.shift() || 0;\n        (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);\n    }\n}\nvar // This prevents TypeScript from allowing other types with the same fields to match.\n// @ts-ignore\n$625ad1e1f4c43bc1$var$_type3 = /*#__PURE__*/ new WeakMap();\nclass $625ad1e1f4c43bc1$export$d3b7288e7994edea {\n    /** Returns a copy of this date. */ copy() {\n        if (this.era) return new $625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n        else return new $625ad1e1f4c43bc1$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration added to it. */ add(duration) {\n        return (0, $5c0571aa5b6fb5da$export$96b1d28349274637)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */ subtract(duration) {\n        return (0, $5c0571aa5b6fb5da$export$6814caac34ca03c7)(this, duration);\n    }\n    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields, disambiguation) {\n        return (0, $5c0571aa5b6fb5da$export$31b5430eb18be4f8)(this, fields, disambiguation);\n    }\n    /**\n   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.\n   * When the resulting value reaches the limits of the field, it wraps around.\n   */ cycle(field, amount, options) {\n        return (0, $5c0571aa5b6fb5da$export$9a297d111fc86b79)(this, field, amount, options);\n    }\n    /** Converts the date to a native JavaScript Date object. */ toDate() {\n        return (0, $4ae0260a69729f1d$export$83aac07b4c37b25)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */ toString() {\n        return (0, $4c32e2d98e5a5134$export$bf79f1ebf4b18792)(this);\n    }\n    /** Converts the date to an ISO 8601 formatted string in UTC. */ toAbsoluteString() {\n        return this.toDate().toISOString();\n    }\n    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {\n        // TODO: Is this a bad idea??\n        return this.toDate().getTime() - (0, $4ae0260a69729f1d$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();\n    }\n    constructor(...args){\n        (0, $kgI3C$swchelperscjs_class_private_field_initcjs._)(this, $625ad1e1f4c43bc1$var$_type3, {\n            writable: true,\n            value: void 0\n        });\n        let [calendar, era, year, month, day] = $625ad1e1f4c43bc1$var$shiftArgs(args);\n        let timeZone = args.shift();\n        let offset = args.shift();\n        this.calendar = calendar;\n        this.era = era;\n        this.year = year;\n        this.month = month;\n        this.day = day;\n        this.timeZone = timeZone;\n        this.offset = offset;\n        this.hour = args.shift() || 0;\n        this.minute = args.shift() || 0;\n        this.second = args.shift() || 0;\n        this.millisecond = args.shift() || 0;\n        (0, $5c0571aa5b6fb5da$export$c4e2ecac49351ef2)(this);\n    }\n}\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $b0ac0602ef646b2c$var$ERA_START_DATES = [\n    [\n        1868,\n        9,\n        8\n    ],\n    [\n        1912,\n        7,\n        30\n    ],\n    [\n        1926,\n        12,\n        25\n    ],\n    [\n        1989,\n        1,\n        8\n    ],\n    [\n        2019,\n        5,\n        1\n    ]\n];\nconst $b0ac0602ef646b2c$var$ERA_END_DATES = [\n    [\n        1912,\n        7,\n        29\n    ],\n    [\n        1926,\n        12,\n        24\n    ],\n    [\n        1989,\n        1,\n        7\n    ],\n    [\n        2019,\n        4,\n        30\n    ]\n];\nconst $b0ac0602ef646b2c$var$ERA_ADDENDS = [\n    1867,\n    1911,\n    1925,\n    1988,\n    2018\n];\nconst $b0ac0602ef646b2c$var$ERA_NAMES = [\n    \"meiji\",\n    \"taisho\",\n    \"showa\",\n    \"heisei\",\n    \"reiwa\"\n];\nfunction $b0ac0602ef646b2c$var$findEraFromGregorianDate(date) {\n    const idx = $b0ac0602ef646b2c$var$ERA_START_DATES.findIndex(([year, month, day])=>{\n        if (date.year < year) return true;\n        if (date.year === year && date.month < month) return true;\n        if (date.year === year && date.month === month && date.day < day) return true;\n        return false;\n    });\n    if (idx === -1) return $b0ac0602ef646b2c$var$ERA_START_DATES.length - 1;\n    if (idx === 0) return 0;\n    return idx - 1;\n}\nfunction $b0ac0602ef646b2c$var$toGregorian(date) {\n    let eraAddend = $b0ac0602ef646b2c$var$ERA_ADDENDS[$b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era)];\n    if (!eraAddend) throw new Error(\"Unknown era: \" + date.era);\n    return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);\n}\nclass $b0ac0602ef646b2c$export$b746ab2b60cdffbf extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let date = super.fromJulianDay(jd);\n        let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(date);\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, $b0ac0602ef646b2c$var$ERA_NAMES[era], date.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era], date.month, date.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($b0ac0602ef646b2c$var$toGregorian(date));\n    }\n    balanceDate(date) {\n        let gregorianDate = $b0ac0602ef646b2c$var$toGregorian(date);\n        let era = $b0ac0602ef646b2c$var$findEraFromGregorianDate(gregorianDate);\n        if ($b0ac0602ef646b2c$var$ERA_NAMES[era] !== date.era) {\n            date.era = $b0ac0602ef646b2c$var$ERA_NAMES[era];\n            date.year = gregorianDate.year - $b0ac0602ef646b2c$var$ERA_ADDENDS[era];\n        }\n        // Constrain in case we went before the first supported era.\n        this.constrainDate(date);\n    }\n    constrainDate(date) {\n        let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);\n        let end = $b0ac0602ef646b2c$var$ERA_END_DATES[idx];\n        if (end != null) {\n            let [endYear, endMonth, endDay] = end;\n            // Constrain the year to the maximum possible value in the era.\n            // Then constrain the month and day fields within that.\n            let maxYear = endYear - $b0ac0602ef646b2c$var$ERA_ADDENDS[idx];\n            date.year = Math.max(1, Math.min(maxYear, date.year));\n            if (date.year === maxYear) {\n                date.month = Math.min(endMonth, date.month);\n                if (date.month === endMonth) date.day = Math.min(endDay, date.day);\n            }\n        }\n        if (date.year === 1 && idx >= 0) {\n            let [, startMonth, startDay] = $b0ac0602ef646b2c$var$ERA_START_DATES[idx];\n            date.month = Math.max(startMonth, date.month);\n            if (date.month === startMonth) date.day = Math.max(startDay, date.day);\n        }\n    }\n    getEras() {\n        return $b0ac0602ef646b2c$var$ERA_NAMES;\n    }\n    getYearsInEra(date) {\n        // Get the number of years in the era, taking into account the date's month and day fields.\n        let era = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);\n        let cur = $b0ac0602ef646b2c$var$ERA_START_DATES[era];\n        let next = $b0ac0602ef646b2c$var$ERA_START_DATES[era + 1];\n        if (next == null) // 9999 gregorian is the maximum year allowed.\n        return 9999 - cur[0] + 1;\n        let years = next[0] - cur[0];\n        if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;\n        return years;\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($b0ac0602ef646b2c$var$toGregorian(date));\n    }\n    getMinimumMonthInYear(date) {\n        let start = $b0ac0602ef646b2c$var$getMinimums(date);\n        return start ? start[1] : 1;\n    }\n    getMinimumDayInMonth(date) {\n        let start = $b0ac0602ef646b2c$var$getMinimums(date);\n        return start && date.month === start[1] ? start[2] : 1;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"japanese\";\n    }\n}\nfunction $b0ac0602ef646b2c$var$getMinimums(date) {\n    if (date.year === 1) {\n        let idx = $b0ac0602ef646b2c$var$ERA_NAMES.indexOf(date.era);\n        return $b0ac0602ef646b2c$var$ERA_START_DATES[idx];\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $561c4ef058278b74$var$BUDDHIST_ERA_START = -543;\nclass $561c4ef058278b74$export$42d20a78301dee44 extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let gregorianDate = super.fromJulianDay(jd);\n        let year = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year - $561c4ef058278b74$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($561c4ef058278b74$var$toGregorian(date));\n    }\n    getEras() {\n        return [\n            \"BE\"\n        ];\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($561c4ef058278b74$var$toGregorian(date));\n    }\n    balanceDate() {}\n    constructor(...args){\n        super(...args);\n        this.identifier = \"buddhist\";\n    }\n}\nfunction $561c4ef058278b74$var$toGregorian(date) {\n    let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)(date.year + $561c4ef058278b74$var$BUDDHIST_ERA_START);\n    return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $9cc5d3577ec40243$var$TAIWAN_ERA_START = 1911;\nfunction $9cc5d3577ec40243$var$gregorianYear(date) {\n    return date.era === \"minguo\" ? date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START : 1 - date.year + $9cc5d3577ec40243$var$TAIWAN_ERA_START;\n}\nfunction $9cc5d3577ec40243$var$gregorianToTaiwan(year) {\n    let y = year - $9cc5d3577ec40243$var$TAIWAN_ERA_START;\n    if (y > 0) return [\n        \"minguo\",\n        y\n    ];\n    else return [\n        \"before_minguo\",\n        1 - y\n    ];\n}\nclass $9cc5d3577ec40243$export$65e01080afcb0799 extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        let date = super.fromJulianDay(jd);\n        let extendedYear = (0, $af14c9812fdceb33$export$c36e0ecb2d4fa69d)(date.era, date.year);\n        let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan(extendedYear);\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, date.month, date.day);\n    }\n    toJulianDay(date) {\n        return super.toJulianDay($9cc5d3577ec40243$var$toGregorian(date));\n    }\n    getEras() {\n        return [\n            \"before_minguo\",\n            \"minguo\"\n        ];\n    }\n    balanceDate(date) {\n        let [era, year] = $9cc5d3577ec40243$var$gregorianToTaiwan($9cc5d3577ec40243$var$gregorianYear(date));\n        date.era = era;\n        date.year = year;\n    }\n    isInverseEra(date) {\n        return date.era === \"before_minguo\";\n    }\n    getDaysInMonth(date) {\n        return super.getDaysInMonth($9cc5d3577ec40243$var$toGregorian(date));\n    }\n    getYearsInEra(date) {\n        return date.era === \"before_minguo\" ? 9999 : 9999 - $9cc5d3577ec40243$var$TAIWAN_ERA_START;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"roc\" // Republic of China\n        ;\n    }\n}\nfunction $9cc5d3577ec40243$var$toGregorian(date) {\n    let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)($9cc5d3577ec40243$var$gregorianYear(date));\n    return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(era, year, date.month, date.day);\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $3c060181fc7249ae$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.\nfunction $3c060181fc7249ae$var$isLeapYear(year) {\n    let y0 = year > 0 ? year - 474 : year - 473;\n    let y1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(y0, 2820) + 474;\n    return (0, $a5090d6430502238$export$842a2cf37af977e1)((y1 + 38) * 31, 128) < 31;\n}\nfunction $3c060181fc7249ae$var$persianToJulianDay(year, month, day) {\n    let y0 = year > 0 ? year - 474 : year - 473;\n    let y1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(y0, 2820) + 474;\n    let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;\n    return $3c060181fc7249ae$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;\n}\nclass $3c060181fc7249ae$export$37fccdbfd14c5939 {\n    fromJulianDay(jd) {\n        let d0 = jd - $3c060181fc7249ae$var$persianToJulianDay(475, 1, 1);\n        let n2820 = Math.floor(d0 / 1029983);\n        let d1 = (0, $a5090d6430502238$export$842a2cf37af977e1)(d0, 1029983);\n        let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);\n        let year = 474 + 2820 * n2820 + y2820;\n        if (year <= 0) year--;\n        let yDay = jd - $3c060181fc7249ae$var$persianToJulianDay(year, 1, 1) + 1;\n        let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);\n        let day = jd - $3c060181fc7249ae$var$persianToJulianDay(year, month, 1) + 1;\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year, month, day);\n    }\n    toJulianDay(date) {\n        return $3c060181fc7249ae$var$persianToJulianDay(date.year, date.month, date.day);\n    }\n    getMonthsInYear() {\n        return 12;\n    }\n    getDaysInMonth(date) {\n        if (date.month <= 6) return 31;\n        if (date.month <= 11) return 30;\n        return $3c060181fc7249ae$var$isLeapYear(date.year) ? 30 : 29;\n    }\n    getEras() {\n        return [\n            \"AP\"\n        ];\n    }\n    getYearsInEra() {\n        // 9378-10-10 persian is 9999-12-31 gregorian.\n        // Round down to 9377 to set the maximum full year.\n        return 9377;\n    }\n    constructor(){\n        this.identifier = \"persian\";\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\n// Starts in 78 AD,\nconst $5f1dfa5c67609fe6$var$INDIAN_ERA_START = 78;\n// The Indian year starts 80 days later than the Gregorian year.\nconst $5f1dfa5c67609fe6$var$INDIAN_YEAR_START = 80;\nclass $5f1dfa5c67609fe6$export$39f31c639fa15726 extends (0, $af14c9812fdceb33$export$80ee6245ec4f29ec) {\n    fromJulianDay(jd) {\n        // Gregorian date for Julian day\n        let date = super.fromJulianDay(jd);\n        // Year in Saka era\n        let indianYear = date.year - $5f1dfa5c67609fe6$var$INDIAN_ERA_START;\n        // Day number in Gregorian year (starting from 0)\n        let yDay = jd - (0, $af14c9812fdceb33$export$f297eb839006d339)(date.era, date.year, 1, 1);\n        let leapMonth;\n        if (yDay < $5f1dfa5c67609fe6$var$INDIAN_YEAR_START) {\n            //  Day is at the end of the preceding Saka year\n            indianYear--;\n            // Days in leapMonth this year, previous Gregorian year\n            leapMonth = (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;\n            yDay += leapMonth + 155 + 90 + 10;\n        } else {\n            // Days in leapMonth this year\n            leapMonth = (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;\n            yDay -= $5f1dfa5c67609fe6$var$INDIAN_YEAR_START;\n        }\n        let indianMonth;\n        let indianDay;\n        if (yDay < leapMonth) {\n            indianMonth = 1;\n            indianDay = yDay + 1;\n        } else {\n            let mDay = yDay - leapMonth;\n            if (mDay < 155) {\n                indianMonth = Math.floor(mDay / 31) + 2;\n                indianDay = mDay % 31 + 1;\n            } else {\n                mDay -= 155;\n                indianMonth = Math.floor(mDay / 30) + 7;\n                indianDay = mDay % 30 + 1;\n            }\n        }\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);\n    }\n    toJulianDay(date) {\n        let extendedYear = date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START;\n        let [era, year] = (0, $af14c9812fdceb33$export$4475b7e617eb123c)(extendedYear);\n        let leapMonth;\n        let jd;\n        if ((0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(year)) {\n            leapMonth = 31;\n            jd = (0, $af14c9812fdceb33$export$f297eb839006d339)(era, year, 3, 21);\n        } else {\n            leapMonth = 30;\n            jd = (0, $af14c9812fdceb33$export$f297eb839006d339)(era, year, 3, 22);\n        }\n        if (date.month === 1) return jd + date.day - 1;\n        jd += leapMonth + Math.min(date.month - 2, 5) * 31;\n        if (date.month >= 8) jd += (date.month - 7) * 30;\n        jd += date.day - 1;\n        return jd;\n    }\n    getDaysInMonth(date) {\n        if (date.month === 1 && (0, $af14c9812fdceb33$export$553d7fa8e3805fc0)(date.year + $5f1dfa5c67609fe6$var$INDIAN_ERA_START)) return 31;\n        if (date.month >= 2 && date.month <= 6) return 31;\n        return 30;\n    }\n    getYearsInEra() {\n        // 9999-12-31 gregorian is 9920-10-10 indian.\n        // Round down to 9919 for the last full year.\n        return 9919;\n    }\n    getEras() {\n        return [\n            \"saka\"\n        ];\n    }\n    balanceDate() {}\n    constructor(...args){\n        super(...args);\n        this.identifier = \"indian\";\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $ecb2c4cc8c9aae25$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)\nconst $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)\nconst $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START = 1300;\nconst $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END = 1600;\nconst $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS = 460322;\nfunction $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, day) {\n    return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;\n}\nfunction $ecb2c4cc8c9aae25$var$julianDayToIslamic(calendar, epoch, jd) {\n    let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);\n    let month = Math.min(12, Math.ceil((jd - (29 + $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);\n    let day = jd - $ecb2c4cc8c9aae25$var$islamicToJulianDay(epoch, year, month, 1) + 1;\n    return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(calendar, year, month, day);\n}\nfunction $ecb2c4cc8c9aae25$var$isLeapYear(year) {\n    return (14 + 11 * year) % 30 < 11;\n}\nclass $ecb2c4cc8c9aae25$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$CIVIL_EPOC, jd);\n    }\n    toJulianDay(date) {\n        return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$CIVIL_EPOC, date.year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        let length = 29 + date.month % 2;\n        if (date.month === 12 && $ecb2c4cc8c9aae25$var$isLeapYear(date.year)) length++;\n        return length;\n    }\n    getMonthsInYear() {\n        return 12;\n    }\n    getDaysInYear(date) {\n        return $ecb2c4cc8c9aae25$var$isLeapYear(date.year) ? 355 : 354;\n    }\n    getYearsInEra() {\n        // 9999 gregorian\n        return 9665;\n    }\n    getEras() {\n        return [\n            \"AH\"\n        ];\n    }\n    constructor(){\n        this.identifier = \"islamic-civil\";\n    }\n}\nclass $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7 extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        return $ecb2c4cc8c9aae25$var$julianDayToIslamic(this, $ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, jd);\n    }\n    toJulianDay(date) {\n        return $ecb2c4cc8c9aae25$var$islamicToJulianDay($ecb2c4cc8c9aae25$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"islamic-tbla\";\n    }\n}\n// Generated by scripts/generate-umalqura.js\nconst $ecb2c4cc8c9aae25$var$UMALQURA_DATA = \"qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=\";\nlet $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH;\nlet $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE;\nfunction $ecb2c4cc8c9aae25$var$umalquraYearStart(year) {\n    return $ecb2c4cc8c9aae25$var$UMALQURA_START_DAYS + $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];\n}\nfunction $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, month) {\n    let idx = year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START;\n    let mask = 0x01 << 11 - (month - 1);\n    if (($ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;\n    else return 30;\n}\nfunction $ecb2c4cc8c9aae25$var$umalquraMonthStart(year, month) {\n    let day = $ecb2c4cc8c9aae25$var$umalquraYearStart(year);\n    for(let i = 1; i < month; i++)day += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);\n    return day;\n}\nfunction $ecb2c4cc8c9aae25$var$umalquraYearLength(year) {\n    return $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year + 1 - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START];\n}\nclass $ecb2c4cc8c9aae25$export$5baab4758c231076 extends $ecb2c4cc8c9aae25$export$2066795aadd37bfc {\n    fromJulianDay(jd) {\n        let days = jd - $ecb2c4cc8c9aae25$var$CIVIL_EPOC;\n        let startDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START);\n        let endDays = $ecb2c4cc8c9aae25$var$umalquraYearStart($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END);\n        if (days < startDays || days > endDays) return super.fromJulianDay(jd);\n        else {\n            let y = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START - 1;\n            let m = 1;\n            let d = 1;\n            while(d > 0){\n                y++;\n                d = days - $ecb2c4cc8c9aae25$var$umalquraYearStart(y) + 1;\n                let yearLength = $ecb2c4cc8c9aae25$var$umalquraYearLength(y);\n                if (d === yearLength) {\n                    m = 12;\n                    break;\n                } else if (d < yearLength) {\n                    let monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);\n                    m = 1;\n                    while(d > monthLength){\n                        d -= monthLength;\n                        m++;\n                        monthLength = $ecb2c4cc8c9aae25$var$umalquraMonthLength(y, m);\n                    }\n                    break;\n                }\n            }\n            return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, y, m, days - $ecb2c4cc8c9aae25$var$umalquraMonthStart(y, m) + 1);\n        }\n    }\n    toJulianDay(date) {\n        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END) return super.toJulianDay(date);\n        return $ecb2c4cc8c9aae25$var$CIVIL_EPOC + $ecb2c4cc8c9aae25$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);\n    }\n    getDaysInMonth(date) {\n        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);\n        return $ecb2c4cc8c9aae25$var$umalquraMonthLength(date.year, date.month);\n    }\n    getDaysInYear(date) {\n        if (date.year < $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START || date.year > $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);\n        return $ecb2c4cc8c9aae25$var$umalquraYearLength(date.year);\n    }\n    constructor(){\n        super();\n        this.identifier = \"islamic-umalqura\";\n        if (!$ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH) $ecb2c4cc8c9aae25$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($ecb2c4cc8c9aae25$var$UMALQURA_DATA), (c)=>c.charCodeAt(0)).buffer);\n        if (!$ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE) {\n            $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START + 1);\n            let yearStart = 0;\n            for(let year = $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START; year <= $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_END; year++){\n                $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START_TABLE[year - $ecb2c4cc8c9aae25$var$UMALQURA_YEAR_START] = yearStart;\n                for(let i = 1; i <= 12; i++)yearStart += $ecb2c4cc8c9aae25$var$umalquraMonthLength(year, i);\n            }\n        }\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\n\nconst $0f5324ee3bdd9396$var$HEBREW_EPOCH = 347997;\n// Hebrew date calculations are performed in terms of days, hours, and\n// \"parts\" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.\nconst $0f5324ee3bdd9396$var$HOUR_PARTS = 1080;\nconst $0f5324ee3bdd9396$var$DAY_PARTS = 24 * $0f5324ee3bdd9396$var$HOUR_PARTS;\n// An approximate value for the length of a lunar month.\n// It is used to calculate the approximate year and month of a given\n// absolute date.\nconst $0f5324ee3bdd9396$var$MONTH_DAYS = 29;\nconst $0f5324ee3bdd9396$var$MONTH_FRACT = 12 * $0f5324ee3bdd9396$var$HOUR_PARTS + 793;\nconst $0f5324ee3bdd9396$var$MONTH_PARTS = $0f5324ee3bdd9396$var$MONTH_DAYS * $0f5324ee3bdd9396$var$DAY_PARTS + $0f5324ee3bdd9396$var$MONTH_FRACT;\nfunction $0f5324ee3bdd9396$var$isLeapYear(year) {\n    return (0, $a5090d6430502238$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;\n}\n// Test for delay of start of new year and to avoid\n// Sunday, Wednesday, and Friday as start of the new year.\nfunction $0f5324ee3bdd9396$var$hebrewDelay1(year) {\n    let months = Math.floor((235 * year - 234) / 19);\n    let parts = 12084 + 13753 * months;\n    let day = months * 29 + Math.floor(parts / 25920);\n    if ((0, $a5090d6430502238$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;\n    return day;\n}\n// Check for delay in start of new year due to length of adjacent years\nfunction $0f5324ee3bdd9396$var$hebrewDelay2(year) {\n    let last = $0f5324ee3bdd9396$var$hebrewDelay1(year - 1);\n    let present = $0f5324ee3bdd9396$var$hebrewDelay1(year);\n    let next = $0f5324ee3bdd9396$var$hebrewDelay1(year + 1);\n    if (next - present === 356) return 2;\n    if (present - last === 382) return 1;\n    return 0;\n}\nfunction $0f5324ee3bdd9396$var$startOfYear(year) {\n    return $0f5324ee3bdd9396$var$hebrewDelay1(year) + $0f5324ee3bdd9396$var$hebrewDelay2(year);\n}\nfunction $0f5324ee3bdd9396$var$getDaysInYear(year) {\n    return $0f5324ee3bdd9396$var$startOfYear(year + 1) - $0f5324ee3bdd9396$var$startOfYear(year);\n}\nfunction $0f5324ee3bdd9396$var$getYearType(year) {\n    let yearLength = $0f5324ee3bdd9396$var$getDaysInYear(year);\n    if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.\n    switch(yearLength){\n        case 353:\n            return 0; // deficient\n        case 354:\n            return 1; // normal\n        case 355:\n            return 2; // complete\n    }\n}\nfunction $0f5324ee3bdd9396$var$getDaysInMonth(year, month) {\n    // Normalize month numbers from 1 - 13, even on non-leap years\n    if (month >= 6 && !$0f5324ee3bdd9396$var$isLeapYear(year)) month++;\n    // First of all, dispose of fixed-length 29 day months\n    if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;\n    let yearType = $0f5324ee3bdd9396$var$getYearType(year);\n    // If it's Heshvan, days depend on length of year\n    if (month === 2) return yearType === 2 ? 30 : 29;\n    // Similarly, Kislev varies with the length of year\n    if (month === 3) return yearType === 0 ? 29 : 30;\n    // Adar I only exists in leap years\n    if (month === 6) return $0f5324ee3bdd9396$var$isLeapYear(year) ? 30 : 0;\n    return 30;\n}\nclass $0f5324ee3bdd9396$export$ca405048b8fb5af {\n    fromJulianDay(jd) {\n        let d = jd - $0f5324ee3bdd9396$var$HEBREW_EPOCH;\n        let m = d * $0f5324ee3bdd9396$var$DAY_PARTS / $0f5324ee3bdd9396$var$MONTH_PARTS; // Months (approx)\n        let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)\n        let ys = $0f5324ee3bdd9396$var$startOfYear(year); // 1st day of year\n        let dayOfYear = Math.floor(d - ys);\n        // Because of the postponement rules, it's possible to guess wrong.  Fix it.\n        while(dayOfYear < 1){\n            year--;\n            ys = $0f5324ee3bdd9396$var$startOfYear(year);\n            dayOfYear = Math.floor(d - ys);\n        }\n        // Now figure out which month we're in, and the date within that month\n        let month = 1;\n        let monthStart = 0;\n        while(monthStart < dayOfYear){\n            monthStart += $0f5324ee3bdd9396$var$getDaysInMonth(year, month);\n            month++;\n        }\n        month--;\n        monthStart -= $0f5324ee3bdd9396$var$getDaysInMonth(year, month);\n        let day = dayOfYear - monthStart;\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, year, month, day);\n    }\n    toJulianDay(date) {\n        let jd = $0f5324ee3bdd9396$var$startOfYear(date.year);\n        for(let month = 1; month < date.month; month++)jd += $0f5324ee3bdd9396$var$getDaysInMonth(date.year, month);\n        return jd + date.day + $0f5324ee3bdd9396$var$HEBREW_EPOCH;\n    }\n    getDaysInMonth(date) {\n        return $0f5324ee3bdd9396$var$getDaysInMonth(date.year, date.month);\n    }\n    getMonthsInYear(date) {\n        return $0f5324ee3bdd9396$var$isLeapYear(date.year) ? 13 : 12;\n    }\n    getDaysInYear(date) {\n        return $0f5324ee3bdd9396$var$getDaysInYear(date.year);\n    }\n    getYearsInEra() {\n        // 6239 gregorian\n        return 9999;\n    }\n    getEras() {\n        return [\n            \"AM\"\n        ];\n    }\n    balanceYearMonth(date, previousDate) {\n        // Keep date in the same month when switching between leap years and non leap years\n        if (previousDate.year !== date.year) {\n            if ($0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && !$0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;\n            else if (!$0f5324ee3bdd9396$var$isLeapYear(previousDate.year) && $0f5324ee3bdd9396$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;\n        }\n    }\n    constructor(){\n        this.identifier = \"hebrew\";\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $4db04d1051af0f2f$var$ETHIOPIC_EPOCH = 1723856;\nconst $4db04d1051af0f2f$var$COPTIC_EPOCH = 1824665;\n// The delta between Amete Alem 1 and Amete Mihret 1\n// AA 5501 = AM 1\nconst $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA = 5500;\nfunction $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, day) {\n    return epoch // difference from Julian epoch to 1,1,1\n     + 365 * year // number of days from years\n     + Math.floor(year / 4) // extra day of leap year\n     + 30 * (month - 1 // number of days from months (1 based)\n    ) + day - 1 // number of days for present month (1 based)\n    ;\n}\nfunction $4db04d1051af0f2f$var$julianDayToCE(epoch, jd) {\n    let year = Math.floor(4 * (jd - epoch) / 1461);\n    let month = 1 + Math.floor((jd - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);\n    let day = jd + 1 - $4db04d1051af0f2f$var$ceToJulianDay(epoch, year, month, 1);\n    return [\n        year,\n        month,\n        day\n    ];\n}\nfunction $4db04d1051af0f2f$var$getLeapDay(year) {\n    return Math.floor(year % 4 / 3);\n}\nfunction $4db04d1051af0f2f$var$getDaysInMonth(year, month) {\n    // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and\n    // an intercalary month at the end of the year of 5 or 6 days, depending whether\n    // the year is a leap year or not. The Leap Year follows the same rules as the\n    // Julian Calendar so that the extra month always has six days in the year before\n    // a Julian Leap Year.\n    if (month % 13 !== 0) // not intercalary month\n    return 30;\n    else // intercalary month 5 days + possible leap day\n    return $4db04d1051af0f2f$var$getLeapDay(year) + 5;\n}\nclass $4db04d1051af0f2f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);\n        let era = \"AM\";\n        if (year <= 0) {\n            era = \"AA\";\n            year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;\n        }\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n    toJulianDay(date) {\n        let year = date.year;\n        if (date.era === \"AA\") year -= $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;\n        return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        return $4db04d1051af0f2f$var$getDaysInMonth(date.year, date.month);\n    }\n    getMonthsInYear() {\n        return 13;\n    }\n    getDaysInYear(date) {\n        return 365 + $4db04d1051af0f2f$var$getLeapDay(date.year);\n    }\n    getYearsInEra(date) {\n        // 9999-12-31 gregorian is 9992-20-02 ethiopic.\n        // Round down to 9991 for the last full year.\n        // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.\n        return date.era === \"AA\" ? 9999 : 9991;\n    }\n    getEras() {\n        return [\n            \"AA\",\n            \"AM\"\n        ];\n    }\n    constructor(){\n        this.identifier = \"ethiopic\";\n    }\n}\nclass $4db04d1051af0f2f$export$d72e0c37005a4914 extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$ETHIOPIC_EPOCH, jd);\n        year += $4db04d1051af0f2f$var$AMETE_MIHRET_DELTA;\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, \"AA\", year, month, day);\n    }\n    getEras() {\n        return [\n            \"AA\"\n        ];\n    }\n    getYearsInEra() {\n        // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.\n        return 9999;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"ethioaa\" // also known as 'ethiopic-amete-alem' in ICU\n        ;\n    }\n}\nclass $4db04d1051af0f2f$export$fe6243cbe1a4b7c1 extends $4db04d1051af0f2f$export$26ba6eab5e20cd7d {\n    fromJulianDay(jd) {\n        let [year, month, day] = $4db04d1051af0f2f$var$julianDayToCE($4db04d1051af0f2f$var$COPTIC_EPOCH, jd);\n        let era = \"CE\";\n        if (year <= 0) {\n            era = \"BCE\";\n            year = 1 - year;\n        }\n        return new (0, $625ad1e1f4c43bc1$export$99faa760c7908e4f)(this, era, year, month, day);\n    }\n    toJulianDay(date) {\n        let year = date.year;\n        if (date.era === \"BCE\") year = 1 - year;\n        return $4db04d1051af0f2f$var$ceToJulianDay($4db04d1051af0f2f$var$COPTIC_EPOCH, year, date.month, date.day);\n    }\n    getDaysInMonth(date) {\n        let year = date.year;\n        if (date.era === \"BCE\") year = 1 - year;\n        return $4db04d1051af0f2f$var$getDaysInMonth(year, date.month);\n    }\n    isInverseEra(date) {\n        return date.era === \"BCE\";\n    }\n    balanceDate(date) {\n        if (date.year <= 0) {\n            date.era = date.era === \"BCE\" ? \"CE\" : \"BCE\";\n            date.year = 1 - date.year;\n        }\n    }\n    getEras() {\n        return [\n            \"BCE\",\n            \"CE\"\n        ];\n    }\n    getYearsInEra(date) {\n        // 9999-12-30 gregorian is 9716-02-20 coptic.\n        // Round down to 9715 for the last full year.\n        // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.\n        return date.era === \"BCE\" ? 9999 : 9715;\n    }\n    constructor(...args){\n        super(...args);\n        this.identifier = \"coptic\";\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\n\n\n\nfunction $4922c0a5a69da0ba$export$dd0bbc9b26defe37(name) {\n    switch(name){\n        case \"buddhist\":\n            return new (0, $561c4ef058278b74$export$42d20a78301dee44)();\n        case \"ethiopic\":\n            return new (0, $4db04d1051af0f2f$export$26ba6eab5e20cd7d)();\n        case \"ethioaa\":\n            return new (0, $4db04d1051af0f2f$export$d72e0c37005a4914)();\n        case \"coptic\":\n            return new (0, $4db04d1051af0f2f$export$fe6243cbe1a4b7c1)();\n        case \"hebrew\":\n            return new (0, $0f5324ee3bdd9396$export$ca405048b8fb5af)();\n        case \"indian\":\n            return new (0, $5f1dfa5c67609fe6$export$39f31c639fa15726)();\n        case \"islamic-civil\":\n            return new (0, $ecb2c4cc8c9aae25$export$2066795aadd37bfc)();\n        case \"islamic-tbla\":\n            return new (0, $ecb2c4cc8c9aae25$export$37f0887f2f9d22f7)();\n        case \"islamic-umalqura\":\n            return new (0, $ecb2c4cc8c9aae25$export$5baab4758c231076)();\n        case \"japanese\":\n            return new (0, $b0ac0602ef646b2c$export$b746ab2b60cdffbf)();\n        case \"persian\":\n            return new (0, $3c060181fc7249ae$export$37fccdbfd14c5939)();\n        case \"roc\":\n            return new (0, $9cc5d3577ec40243$export$65e01080afcb0799)();\n        case \"gregory\":\n        default:\n            return new (0, $af14c9812fdceb33$export$80ee6245ec4f29ec)();\n    }\n}\n\n\n\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $8f23a04ae90a588b$var$formatterCache = new Map();\nclass $8f23a04ae90a588b$export$ad991b66133851cf {\n    /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {\n        return this.formatter.format(value);\n    }\n    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */ formatToParts(value) {\n        return this.formatter.formatToParts(value);\n    }\n    /** Formats a date range as a string. */ formatRange(start, end) {\n        // @ts-ignore\n        if (typeof this.formatter.formatRange === \"function\") // @ts-ignore\n        return this.formatter.formatRange(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        // Very basic fallback for old browsers.\n        return `${this.formatter.format(start)} \\u{2013} ${this.formatter.format(end)}`;\n    }\n    /** Formats a date range as an array of parts. */ formatRangeToParts(start, end) {\n        // @ts-ignore\n        if (typeof this.formatter.formatRangeToParts === \"function\") // @ts-ignore\n        return this.formatter.formatRangeToParts(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        let startParts = this.formatter.formatToParts(start);\n        let endParts = this.formatter.formatToParts(end);\n        return [\n            ...startParts.map((p)=>({\n                    ...p,\n                    source: \"startRange\"\n                })),\n            {\n                type: \"literal\",\n                value: \" \\u2013 \",\n                source: \"shared\"\n            },\n            ...endParts.map((p)=>({\n                    ...p,\n                    source: \"endRange\"\n                }))\n        ];\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {\n        let resolvedOptions = this.formatter.resolvedOptions();\n        if ($8f23a04ae90a588b$var$hasBuggyResolvedHourCycle()) {\n            if (!this.resolvedHourCycle) this.resolvedHourCycle = $8f23a04ae90a588b$var$getResolvedHourCycle(resolvedOptions.locale, this.options);\n            resolvedOptions.hourCycle = this.resolvedHourCycle;\n            resolvedOptions.hour12 = this.resolvedHourCycle === \"h11\" || this.resolvedHourCycle === \"h12\";\n        }\n        // Safari uses a different name for the Ethiopic (Amete Alem) calendar.\n        // https://bugs.webkit.org/show_bug.cgi?id=241564\n        if (resolvedOptions.calendar === \"ethiopic-amete-alem\") resolvedOptions.calendar = \"ethioaa\";\n        return resolvedOptions;\n    }\n    constructor(locale, options = {}){\n        this.formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options);\n        this.options = options;\n    }\n}\n// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.\n//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)\n//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)\n//     rather than h12 (12:00 - 11:59).\n//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal\n//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]\n// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791\n// [2] https://github.com/tc39/ecma402/issues/402\n// [3] https://bugs.webkit.org/show_bug.cgi?id=229313\n// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802\nconst $8f23a04ae90a588b$var$hour12Preferences = {\n    true: {\n        // Only Japanese uses the h11 style for 12 hour time. All others use h12.\n        ja: \"h11\"\n    },\n    false: {\n    }\n};\nfunction $8f23a04ae90a588b$var$getCachedDateFormatter(locale, options = {}) {\n    // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.\n    // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.\n    if (typeof options.hour12 === \"boolean\" && $8f23a04ae90a588b$var$hasBuggyHour12Behavior()) {\n        options = {\n            ...options\n        };\n        let pref = $8f23a04ae90a588b$var$hour12Preferences[String(options.hour12)][locale.split(\"-\")[0]];\n        let defaultHourCycle = options.hour12 ? \"h12\" : \"h23\";\n        options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;\n        delete options.hour12;\n    }\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : \"\");\n    if ($8f23a04ae90a588b$var$formatterCache.has(cacheKey)) return $8f23a04ae90a588b$var$formatterCache.get(cacheKey);\n    let numberFormatter = new Intl.DateTimeFormat(locale, options);\n    $8f23a04ae90a588b$var$formatterCache.set(cacheKey, numberFormatter);\n    return numberFormatter;\n}\nlet $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = null;\nfunction $8f23a04ae90a588b$var$hasBuggyHour12Behavior() {\n    if ($8f23a04ae90a588b$var$_hasBuggyHour12Behavior == null) $8f23a04ae90a588b$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat(\"en-US\", {\n        hour: \"numeric\",\n        hour12: false\n    }).format(new Date(2020, 2, 3, 0)) === \"24\";\n    return $8f23a04ae90a588b$var$_hasBuggyHour12Behavior;\n}\nlet $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = null;\nfunction $8f23a04ae90a588b$var$hasBuggyResolvedHourCycle() {\n    if ($8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle == null) $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat(\"fr\", {\n        hour: \"numeric\",\n        hour12: false\n    }).resolvedOptions().hourCycle === \"h12\";\n    return $8f23a04ae90a588b$var$_hasBuggyResolvedHourCycle;\n}\nfunction $8f23a04ae90a588b$var$getResolvedHourCycle(locale, options) {\n    if (!options.timeStyle && !options.hour) return undefined;\n    // Work around buggy results in resolved hourCycle and hour12 options in WebKit.\n    // Format the minimum possible hour and maximum possible hour in a day and parse the results.\n    locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, \"\");\n    locale += (locale.includes(\"-u-\") ? \"\" : \"-u\") + \"-nu-latn\";\n    let formatter = $8f23a04ae90a588b$var$getCachedDateFormatter(locale, {\n        ...options,\n        timeZone: undefined // use local timezone\n    });\n    let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p)=>p.type === \"hour\").value, 10);\n    let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p)=>p.type === \"hour\").value, 10);\n    if (min === 0 && max === 23) return \"h23\";\n    if (min === 24 && max === 23) return \"h24\";\n    if (min === 0 && max === 11) return \"h11\";\n    if (min === 12 && max === 11) return \"h12\";\n    throw new Error(\"Unexpected hour cycle result\");\n}\n\n\n\n\n//# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGludGVybmF0aW9uYWxpemVkL2RhdGUvZGlzdC9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFBLHVEQUF1RCxtQkFBTyxDQUFDLDJIQUFnRDs7O0FBRy9HO0FBQ0EsK0JBQStCLHFEQUFxRDtBQUNwRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsaUZBQWlGO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHVFQUF1RTtBQUN0RztBQUNBLGlCQUFpQix1RUFBdUU7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBLDRDQUE0QyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUU7QUFDdEUsNENBQTRDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtBQUM5RCxpREFBaUQsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFO0FBQ3hHLHVEQUF1RCxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsc0JBQXNCLEVBQUUsVUFBVSxFQUFFO0FBQ2xKLGdEQUFnRCxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUseUJBQXlCLEVBQUUsVUFBVSxFQUFFO0FBQzlJLCtLQUErSyxJQUFJLDJCQUEyQixJQUFJLDJCQUEyQixJQUFJO0FBQ2pQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrREFBK0QsbURBQW1ELGlCQUFpQixpREFBaUQsS0FBSyxjQUFjO0FBQ3ZNLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLEtBQUssS0FBSyxLQUFLLEtBQUssSUFBSTtBQUNwRztBQUNBO0FBQ0E7QUFDQSxjQUFjLG1DQUFtQyxHQUFHLHFDQUFxQyxHQUFHLHFDQUFxQyxFQUFFLGlFQUFpRTtBQUNwTTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRDQUE0QyxHQUFHLDZDQUE2QyxHQUFHLDJDQUEyQztBQUN4SjtBQUNBO0FBQ0E7QUFDQSxjQUFjLGdEQUFnRCxHQUFHLGdEQUFnRDtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLEtBQUssRUFBRSxxQ0FBcUMsR0FBRyx1Q0FBdUM7QUFDcEc7QUFDQTtBQUNBLGNBQWMsZ0RBQWdELEVBQUUsa0RBQWtELEdBQUcsY0FBYztBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxNQUFNO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsaUVBQWlFLE1BQU07QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGlGQUFpRixNQUFNO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsaUdBQWlHLE1BQU07QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpS0FBaUssT0FBTztBQUN4SywrSUFBK0ksT0FBTztBQUN0SjtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLHFEQUFxRDtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtEQUFrRDtBQUNsRCx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsV0FBVztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLGlEQUFpRDtBQUN2SDtBQUNBLCtCQUErQixTQUFTO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RkFBeUY7QUFDekYseURBQXlEO0FBQ3pELDBEQUEwRDtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsb0JBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhCQUE4QixHQUFHLE1BQU0sRUFBRSwyQkFBMkI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbHAtYWxwaWxvZ2kvLi9ub2RlX21vZHVsZXMvQGludGVybmF0aW9uYWxpemVkL2RhdGUvZGlzdC9tYWluLmpzPzlkY2IiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRrZ0kzQyRzd2NoZWxwZXJzY2pzX2NsYXNzX3ByaXZhdGVfZmllbGRfaW5pdGNqcyA9IHJlcXVpcmUoXCJAc3djL2hlbHBlcnMvY2pzL19jbGFzc19wcml2YXRlX2ZpZWxkX2luaXQuY2pzXCIpO1xuXG5cbmZ1bmN0aW9uICRwYXJjZWwkZXhwb3J0KGUsIG4sIHYsIHMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIHNldDogcywgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG59XG5cbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIkNhbGVuZGFyRGF0ZVwiLCAoKSA9PiAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0Zik7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJDYWxlbmRhckRhdGVUaW1lXCIsICgpID0+ICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRjYTg3MWU4ZGJiODA5NjZmKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIlRpbWVcIiwgKCkgPT4gJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDY4MGVhMTk2ZWZmY2U1Zik7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJab25lZERhdGVUaW1lXCIsICgpID0+ICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRkM2I3Mjg4ZTc5OTRlZGVhKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIkdyZWdvcmlhbkNhbGVuZGFyXCIsICgpID0+ICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIkphcGFuZXNlQ2FsZW5kYXJcIiwgKCkgPT4gJGIwYWMwNjAyZWY2NDZiMmMkZXhwb3J0JGI3NDZhYjJiNjBjZGZmYmYpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiQnVkZGhpc3RDYWxlbmRhclwiLCAoKSA9PiAkNTYxYzRlZjA1ODI3OGI3NCRleHBvcnQkNDJkMjBhNzgzMDFkZWU0NCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJUYWl3YW5DYWxlbmRhclwiLCAoKSA9PiAkOWNjNWQzNTc3ZWM0MDI0MyRleHBvcnQkNjVlMDEwODBhZmNiMDc5OSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJQZXJzaWFuQ2FsZW5kYXJcIiwgKCkgPT4gJDNjMDYwMTgxZmM3MjQ5YWUkZXhwb3J0JDM3ZmNjZGJmZDE0YzU5MzkpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiSW5kaWFuQ2FsZW5kYXJcIiwgKCkgPT4gJDVmMWRmYTVjNjc2MDlmZTYkZXhwb3J0JDM5ZjMxYzYzOWZhMTU3MjYpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiSXNsYW1pY0NpdmlsQ2FsZW5kYXJcIiwgKCkgPT4gJGVjYjJjNGNjOGM5YWFlMjUkZXhwb3J0JDIwNjY3OTVhYWRkMzdiZmMpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiSXNsYW1pY1RhYnVsYXJDYWxlbmRhclwiLCAoKSA9PiAkZWNiMmM0Y2M4YzlhYWUyNSRleHBvcnQkMzdmMDg4N2YyZjlkMjJmNyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJJc2xhbWljVW1hbHF1cmFDYWxlbmRhclwiLCAoKSA9PiAkZWNiMmM0Y2M4YzlhYWUyNSRleHBvcnQkNWJhYWI0NzU4YzIzMTA3Nik7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJIZWJyZXdDYWxlbmRhclwiLCAoKSA9PiAkMGY1MzI0ZWUzYmRkOTM5NiRleHBvcnQkY2E0MDUwNDhiOGZiNWFmKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIkV0aGlvcGljQ2FsZW5kYXJcIiwgKCkgPT4gJDRkYjA0ZDEwNTFhZjBmMmYkZXhwb3J0JDI2YmE2ZWFiNWUyMGNkN2QpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiRXRoaW9waWNBbWV0ZUFsZW1DYWxlbmRhclwiLCAoKSA9PiAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkZDcyZTBjMzcwMDVhNDkxNCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJDb3B0aWNDYWxlbmRhclwiLCAoKSA9PiAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkZmU2MjQzY2JlMWE0YjdjMSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJjcmVhdGVDYWxlbmRhclwiLCAoKSA9PiAkNDkyMmMwYTVhNjlkYTBiYSRleHBvcnQkZGQwYmJjOWIyNmRlZmUzNyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJ0b0NhbGVuZGFyRGF0ZVwiLCAoKSA9PiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkOTM1MjJkMWE0MzlmMzYxNyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJ0b0NhbGVuZGFyRGF0ZVRpbWVcIiwgKCkgPT4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGIyMWUwYjEyNGUyMjQ0ODQpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwidG9UaW1lXCIsICgpID0+ICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRkMzNmNzllM2ZmYzNkYzgzKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcInRvQ2FsZW5kYXJcIiwgKCkgPT4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwidG9ab25lZFwiLCAoKSA9PiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkODRjOTVhODNjNzk5ZTA3NCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJ0b1RpbWVab25lXCIsICgpID0+ICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1MzhiMDAwMzNjYzExYzc1KTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcInRvTG9jYWxUaW1lWm9uZVwiLCAoKSA9PiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkZDliNjdiYzkzYzA5NzQ5MSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJmcm9tRGF0ZVwiLCAoKSA9PiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkZTU3ZmYxMDBkOTFiZDRiOSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJmcm9tQWJzb2x1dGVcIiwgKCkgPT4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiaXNTYW1lRGF5XCIsICgpID0+ICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRlYTM5ZWMxOTc5OTNhZWYwKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcImlzU2FtZU1vbnRoXCIsICgpID0+ICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhMThjODljYmQyNDE3MGZmKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcImlzU2FtZVllYXJcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDU4NDFmOWViOTc3M2YyNWYpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiaXNFcXVhbERheVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkOTFiNjJlYmYyYmE3MDNlZSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJpc0VxdWFsTW9udGhcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDVhOGRhMGM0NGEzYWZkZjIpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiaXNFcXVhbFllYXJcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGVhODQwZjVhNmRkYTgxNDcpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiaXNUb2RheVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNjI5YjBhNDk3YWE2NTI2Nyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJnZXREYXlPZldlZWtcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDIwNjEwNTZkMDZkN2NkZjcpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwibm93XCIsICgpID0+ICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ0NjE5MzlkZDQ0MjIxNTMpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwidG9kYXlcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGQwYmRmNDVhZjAzYTZlYTMpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiZ2V0SG91cnNJbkRheVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkMTI2YzkxYzk0MWRlN2UpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiZ2V0TG9jYWxUaW1lWm9uZVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYWE4YjQxNzM1YWZjYWJkMik7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJzdGFydE9mTW9udGhcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGE1YTNiNDU0YWRhMjI2OGUpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwic3RhcnRPZldlZWtcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDQyYzgxYTQ0NGZiZmI1ZDQpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwic3RhcnRPZlllYXJcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGY5MWU4OWQzZDA0MDYxMDIpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiZW5kT2ZNb250aFwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYTIyNThkOWM0MTE4ODI1Yyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJlbmRPZldlZWtcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGVmOGI2ZDkxMzMwODRmNGUpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwiZW5kT2ZZZWFyXCIsICgpID0+ICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ4YjdhYTU1YzY2ZDU1NjllKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcImdldE1pbmltdW1Nb250aEluWWVhclwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNTQxMmFjMTE3MTNiNzJhZCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJnZXRNaW5pbXVtRGF5SW5Nb250aFwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYjJmNDk1M2QzMDE5ODFkNSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJnZXRXZWVrc0luTW9udGhcIiwgKCkgPT4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGNjYzFiMjQ3OWU3ZGQ2NTQpO1xuJHBhcmNlbCRleHBvcnQobW9kdWxlLmV4cG9ydHMsIFwibWluRGF0ZVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNWMzMzNhMTE2ZTk0OWNkZCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJtYXhEYXRlXCIsICgpID0+ICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhNzVmMmJmZjU3ODExMDU1KTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcImlzV2Vla2VuZFwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNjE4ZDYwZWEyOTlkYTQyKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcImlzV2Vla2RheVwiLCAoKSA9PiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkZWU5ZDg3MjU4ZTFkMTllZCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJwYXJzZURhdGVcIiwgKCkgPT4gJDRjMzJlMmQ5OGU1YTUxMzQkZXhwb3J0JDZiODYyMTYwZDI5NWM4ZSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJwYXJzZURhdGVUaW1lXCIsICgpID0+ICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ1ODg5MzdiY2Q2MGFkZTU1KTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcInBhcnNlVGltZVwiLCAoKSA9PiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkYzk2OThlYzdmMDVhMDdlMSk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJwYXJzZUFic29sdXRlXCIsICgpID0+ICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ1YWRmZGFiMDUxNjhjMjE5KTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcInBhcnNlQWJzb2x1dGVUb0xvY2FsXCIsICgpID0+ICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ4ZTM4NDQzMjM2MmVkMGYwKTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcInBhcnNlWm9uZWREYXRlVGltZVwiLCAoKSA9PiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkZmQ3ODkzZjA2ZTkyYTZhNCk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJwYXJzZUR1cmF0aW9uXCIsICgpID0+ICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRlY2FlODI5YmIzNzQ3ZWE2KTtcbiRwYXJjZWwkZXhwb3J0KG1vZHVsZS5leHBvcnRzLCBcIkRhdGVGb3JtYXR0ZXJcIiwgKCkgPT4gJDhmMjNhMDRhZTkwYTU4OGIkZXhwb3J0JGFkOTkxYjY2MTMzODUxY2YpO1xuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIC8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gUG9ydGlvbnMgb2YgdGhlIGNvZGUgaW4gdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gdGhlIFRDMzkgVGVtcG9yYWwgcHJvcG9zYWwuXG4vLyBPcmlnaW5hbCBsaWNlbnNpbmcgY2FuIGJlIGZvdW5kIGluIHRoZSBOT1RJQ0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gUG9ydGlvbnMgb2YgdGhlIGNvZGUgaW4gdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gSUNVLlxuLy8gT3JpZ2luYWwgbGljZW5zaW5nIGNhbiBiZSBmb3VuZCBpbiB0aGUgTk9USUNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbmZ1bmN0aW9uICRhNTA5MGQ2NDMwNTAyMjM4JGV4cG9ydCQ4NDJhMmNmMzdhZjk3N2UxKGFtb3VudCwgbnVtZXJhdG9yKSB7XG4gICAgcmV0dXJuIGFtb3VudCAtIG51bWVyYXRvciAqIE1hdGguZmxvb3IoYW1vdW50IC8gbnVtZXJhdG9yKTtcbn1cbmZ1bmN0aW9uICRhNTA5MGQ2NDMwNTAyMjM4JGV4cG9ydCQ3ODRkMTNkOGVlMzUxZjA3KGRhdGUpIHtcbiAgICBpZiAoZGF0ZS5lcmEpIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKShkYXRlLmNhbGVuZGFyLCBkYXRlLmVyYSwgZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRheSk7XG4gICAgZWxzZSByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikoZGF0ZS5jYWxlbmRhciwgZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRheSk7XG59XG5mdW5jdGlvbiAkYTUwOTBkNjQzMDUwMjIzOCRleHBvcnQkMjdmYTAxNzJhZTI2NDRiMyhkYXRlKSB7XG4gICAgaWYgKGRhdGUuZXJhKSByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkY2E4NzFlOGRiYjgwOTY2ZikoZGF0ZS5jYWxlbmRhciwgZGF0ZS5lcmEsIGRhdGUueWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXksIGRhdGUuaG91ciwgZGF0ZS5taW51dGUsIGRhdGUuc2Vjb25kLCBkYXRlLm1pbGxpc2Vjb25kKTtcbiAgICBlbHNlIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRjYTg3MWU4ZGJiODA5NjZmKShkYXRlLmNhbGVuZGFyLCBkYXRlLnllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF5LCBkYXRlLmhvdXIsIGRhdGUubWludXRlLCBkYXRlLnNlY29uZCk7XG59XG5cblxuY29uc3QgJGFmMTRjOTgxMmZkY2ViMzMkdmFyJEVQT0NIID0gMTcyMTQyNjsgLy8gMDAxLzAxLzAzIEp1bGlhbiBDLkUuXG5mdW5jdGlvbiAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkZjI5N2ViODM5MDA2ZDMzOShlcmEsIHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgICB5ZWFyID0gJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGMzNmUwZWNiMmQ0ZmE2OWQoZXJhLCB5ZWFyKTtcbiAgICBsZXQgeTEgPSB5ZWFyIC0gMTtcbiAgICBsZXQgbW9udGhPZmZzZXQgPSAtMjtcbiAgICBpZiAobW9udGggPD0gMikgbW9udGhPZmZzZXQgPSAwO1xuICAgIGVsc2UgaWYgKCRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ1NTNkN2ZhOGUzODA1ZmMwKHllYXIpKSBtb250aE9mZnNldCA9IC0xO1xuICAgIHJldHVybiAkYWYxNGM5ODEyZmRjZWIzMyR2YXIkRVBPQ0ggLSAxICsgMzY1ICogeTEgKyBNYXRoLmZsb29yKHkxIC8gNCkgLSBNYXRoLmZsb29yKHkxIC8gMTAwKSArIE1hdGguZmxvb3IoeTEgLyA0MDApICsgTWF0aC5mbG9vcigoMzY3ICogbW9udGggLSAzNjIpIC8gMTIgKyBtb250aE9mZnNldCArIGRheSk7XG59XG5mdW5jdGlvbiAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkNTUzZDdmYThlMzgwNWZjMCh5ZWFyKSB7XG4gICAgcmV0dXJuIHllYXIgJSA0ID09PSAwICYmICh5ZWFyICUgMTAwICE9PSAwIHx8IHllYXIgJSA0MDAgPT09IDApO1xufVxuZnVuY3Rpb24gJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGMzNmUwZWNiMmQ0ZmE2OWQoZXJhLCB5ZWFyKSB7XG4gICAgcmV0dXJuIGVyYSA9PT0gXCJCQ1wiID8gMSAtIHllYXIgOiB5ZWFyO1xufVxuZnVuY3Rpb24gJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDQ0NzViN2U2MTdlYjEyM2MoeWVhcikge1xuICAgIGxldCBlcmEgPSBcIkFEXCI7XG4gICAgaWYgKHllYXIgPD0gMCkge1xuICAgICAgICBlcmEgPSBcIkJDXCI7XG4gICAgICAgIHllYXIgPSAxIC0geWVhcjtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgZXJhLFxuICAgICAgICB5ZWFyXG4gICAgXTtcbn1cbmNvbnN0ICRhZjE0Yzk4MTJmZGNlYjMzJHZhciRkYXlzSW5Nb250aCA9IHtcbiAgICBzdGFuZGFyZDogW1xuICAgICAgICAzMSxcbiAgICAgICAgMjgsXG4gICAgICAgIDMxLFxuICAgICAgICAzMCxcbiAgICAgICAgMzEsXG4gICAgICAgIDMwLFxuICAgICAgICAzMSxcbiAgICAgICAgMzEsXG4gICAgICAgIDMwLFxuICAgICAgICAzMSxcbiAgICAgICAgMzAsXG4gICAgICAgIDMxXG4gICAgXSxcbiAgICBsZWFweWVhcjogW1xuICAgICAgICAzMSxcbiAgICAgICAgMjksXG4gICAgICAgIDMxLFxuICAgICAgICAzMCxcbiAgICAgICAgMzEsXG4gICAgICAgIDMwLFxuICAgICAgICAzMSxcbiAgICAgICAgMzEsXG4gICAgICAgIDMwLFxuICAgICAgICAzMSxcbiAgICAgICAgMzAsXG4gICAgICAgIDMxXG4gICAgXVxufTtcbmNsYXNzICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjIHtcbiAgICBmcm9tSnVsaWFuRGF5KGpkKSB7XG4gICAgICAgIGxldCBqZDAgPSBqZDtcbiAgICAgICAgbGV0IGRlcG9jaCA9IGpkMCAtICRhZjE0Yzk4MTJmZGNlYjMzJHZhciRFUE9DSDtcbiAgICAgICAgbGV0IHF1YWRyaWNlbnQgPSBNYXRoLmZsb29yKGRlcG9jaCAvIDE0NjA5Nyk7XG4gICAgICAgIGxldCBkcWMgPSAoMCwgJGE1MDkwZDY0MzA1MDIyMzgkZXhwb3J0JDg0MmEyY2YzN2FmOTc3ZTEpKGRlcG9jaCwgMTQ2MDk3KTtcbiAgICAgICAgbGV0IGNlbnQgPSBNYXRoLmZsb29yKGRxYyAvIDM2NTI0KTtcbiAgICAgICAgbGV0IGRjZW50ID0gKDAsICRhNTA5MGQ2NDMwNTAyMjM4JGV4cG9ydCQ4NDJhMmNmMzdhZjk3N2UxKShkcWMsIDM2NTI0KTtcbiAgICAgICAgbGV0IHF1YWQgPSBNYXRoLmZsb29yKGRjZW50IC8gMTQ2MSk7XG4gICAgICAgIGxldCBkcXVhZCA9ICgwLCAkYTUwOTBkNjQzMDUwMjIzOCRleHBvcnQkODQyYTJjZjM3YWY5NzdlMSkoZGNlbnQsIDE0NjEpO1xuICAgICAgICBsZXQgeWluZGV4ID0gTWF0aC5mbG9vcihkcXVhZCAvIDM2NSk7XG4gICAgICAgIGxldCBleHRlbmRlZFllYXIgPSBxdWFkcmljZW50ICogNDAwICsgY2VudCAqIDEwMCArIHF1YWQgKiA0ICsgeWluZGV4ICsgKGNlbnQgIT09IDQgJiYgeWluZGV4ICE9PSA0ID8gMSA6IDApO1xuICAgICAgICBsZXQgW2VyYSwgeWVhcl0gPSAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkNDQ3NWI3ZTYxN2ViMTIzYyhleHRlbmRlZFllYXIpO1xuICAgICAgICBsZXQgeWVhckRheSA9IGpkMCAtICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCRmMjk3ZWI4MzkwMDZkMzM5KGVyYSwgeWVhciwgMSwgMSk7XG4gICAgICAgIGxldCBsZWFwQWRqID0gMjtcbiAgICAgICAgaWYgKGpkMCA8ICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCRmMjk3ZWI4MzkwMDZkMzM5KGVyYSwgeWVhciwgMywgMSkpIGxlYXBBZGogPSAwO1xuICAgICAgICBlbHNlIGlmICgkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkNTUzZDdmYThlMzgwNWZjMCh5ZWFyKSkgbGVhcEFkaiA9IDE7XG4gICAgICAgIGxldCBtb250aCA9IE1hdGguZmxvb3IoKCh5ZWFyRGF5ICsgbGVhcEFkaikgKiAxMiArIDM3MykgLyAzNjcpO1xuICAgICAgICBsZXQgZGF5ID0gamQwIC0gJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGYyOTdlYjgzOTAwNmQzMzkoZXJhLCB5ZWFyLCBtb250aCwgMSkgKyAxO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikoZXJhLCB5ZWFyLCBtb250aCwgZGF5KTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGYyOTdlYjgzOTAwNmQzMzkoZGF0ZS5lcmEsIGRhdGUueWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXkpO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIHJldHVybiAkYWYxNGM5ODEyZmRjZWIzMyR2YXIkZGF5c0luTW9udGhbJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDU1M2Q3ZmE4ZTM4MDVmYzAoZGF0ZS55ZWFyKSA/IFwibGVhcHllYXJcIiA6IFwic3RhbmRhcmRcIl1bZGF0ZS5tb250aCAtIDFdO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgZ2V0TW9udGhzSW5ZZWFyKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIDEyO1xuICAgIH1cbiAgICBnZXREYXlzSW5ZZWFyKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ1NTNkN2ZhOGUzODA1ZmMwKGRhdGUueWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBnZXRZZWFyc0luRXJhKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIDk5OTk7XG4gICAgfVxuICAgIGdldEVyYXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIkJDXCIsXG4gICAgICAgICAgICBcIkFEXCJcbiAgICAgICAgXTtcbiAgICB9XG4gICAgaXNJbnZlcnNlRXJhKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZXJhID09PSBcIkJDXCI7XG4gICAgfVxuICAgIGJhbGFuY2VEYXRlKGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUueWVhciA8PSAwKSB7XG4gICAgICAgICAgICBkYXRlLmVyYSA9IGRhdGUuZXJhID09PSBcIkJDXCIgPyBcIkFEXCIgOiBcIkJDXCI7XG4gICAgICAgICAgICBkYXRlLnllYXIgPSAxIC0gZGF0ZS55ZWFyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IFwiZ3JlZ29yeVwiO1xuICAgIH1cbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gRGF0YSBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS91bmljb2RlLWNsZHIvY2xkci1jb3JlL2Jsb2IvbWFzdGVyL3N1cHBsZW1lbnRhbC93ZWVrRGF0YS5qc29uXG4vLyBMb2NhbGVzIHN0YXJ0aW5nIG9uIFN1bmRheSBoYXZlIGJlZW4gcmVtb3ZlZCBmb3IgY29tcHJlc3Npb24uXG5jb25zdCAkNGQ4OGVmZjI0MmIzOGE5ZSRleHBvcnQkN2E1YWNiZDc3ZDQxNGJkOSA9IHtcbiAgICBcIjAwMVwiOiAxLFxuICAgIEFEOiAxLFxuICAgIEFFOiA2LFxuICAgIEFGOiA2LFxuICAgIEFJOiAxLFxuICAgIEFMOiAxLFxuICAgIEFNOiAxLFxuICAgIEFOOiAxLFxuICAgIEFSOiAxLFxuICAgIEFUOiAxLFxuICAgIEFVOiAxLFxuICAgIEFYOiAxLFxuICAgIEFaOiAxLFxuICAgIEJBOiAxLFxuICAgIEJFOiAxLFxuICAgIEJHOiAxLFxuICAgIEJIOiA2LFxuICAgIEJNOiAxLFxuICAgIEJOOiAxLFxuICAgIEJZOiAxLFxuICAgIENIOiAxLFxuICAgIENMOiAxLFxuICAgIENNOiAxLFxuICAgIENOOiAxLFxuICAgIENSOiAxLFxuICAgIENZOiAxLFxuICAgIENaOiAxLFxuICAgIERFOiAxLFxuICAgIERKOiA2LFxuICAgIERLOiAxLFxuICAgIERaOiA2LFxuICAgIEVDOiAxLFxuICAgIEVFOiAxLFxuICAgIEVHOiA2LFxuICAgIEVTOiAxLFxuICAgIEZJOiAxLFxuICAgIEZKOiAxLFxuICAgIEZPOiAxLFxuICAgIEZSOiAxLFxuICAgIEdCOiAxLFxuICAgIEdFOiAxLFxuICAgIEdGOiAxLFxuICAgIEdQOiAxLFxuICAgIEdSOiAxLFxuICAgIEhSOiAxLFxuICAgIEhVOiAxLFxuICAgIElFOiAxLFxuICAgIElROiA2LFxuICAgIElSOiA2LFxuICAgIElTOiAxLFxuICAgIElUOiAxLFxuICAgIEpPOiA2LFxuICAgIEtHOiAxLFxuICAgIEtXOiA2LFxuICAgIEtaOiAxLFxuICAgIExCOiAxLFxuICAgIExJOiAxLFxuICAgIExLOiAxLFxuICAgIExUOiAxLFxuICAgIExVOiAxLFxuICAgIExWOiAxLFxuICAgIExZOiA2LFxuICAgIE1DOiAxLFxuICAgIE1EOiAxLFxuICAgIE1FOiAxLFxuICAgIE1LOiAxLFxuICAgIE1OOiAxLFxuICAgIE1ROiAxLFxuICAgIE1WOiA1LFxuICAgIE1ZOiAxLFxuICAgIE5MOiAxLFxuICAgIE5POiAxLFxuICAgIE5aOiAxLFxuICAgIE9NOiA2LFxuICAgIFBMOiAxLFxuICAgIFFBOiA2LFxuICAgIFJFOiAxLFxuICAgIFJPOiAxLFxuICAgIFJTOiAxLFxuICAgIFJVOiAxLFxuICAgIFNEOiA2LFxuICAgIFNFOiAxLFxuICAgIFNJOiAxLFxuICAgIFNLOiAxLFxuICAgIFNNOiAxLFxuICAgIFNZOiA2LFxuICAgIFRKOiAxLFxuICAgIFRNOiAxLFxuICAgIFRSOiAxLFxuICAgIFVBOiAxLFxuICAgIFVZOiAxLFxuICAgIFVaOiAxLFxuICAgIFZBOiAxLFxuICAgIFZOOiAxLFxuICAgIFhLOiAxXG59O1xuXG5cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRlYTM5ZWMxOTc5OTNhZWYwKGEsIGIpIHtcbiAgICBiID0gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiNGEwMzZhZjNmYzBiMDMyKShiLCBhLmNhbGVuZGFyKTtcbiAgICByZXR1cm4gYS5lcmEgPT09IGIuZXJhICYmIGEueWVhciA9PT0gYi55ZWFyICYmIGEubW9udGggPT09IGIubW9udGggJiYgYS5kYXkgPT09IGIuZGF5O1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGExOGM4OWNiZDI0MTcwZmYoYSwgYikge1xuICAgIGIgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpKGIsIGEuY2FsZW5kYXIpO1xuICAgIC8vIEluIHRoZSBKYXBhbmVzZSBjYWxlbmRhciwgbW9udGhzIGNhbiBzcGFuIG11bHRpcGxlIGVyYXMveWVhcnMsIHNvIG9ubHkgY29tcGFyZSB0aGUgZmlyc3Qgb2YgdGhlIG1vbnRoLlxuICAgIGEgPSAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYTVhM2I0NTRhZGEyMjY4ZShhKTtcbiAgICBiID0gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGE1YTNiNDU0YWRhMjI2OGUoYik7XG4gICAgcmV0dXJuIGEuZXJhID09PSBiLmVyYSAmJiBhLnllYXIgPT09IGIueWVhciAmJiBhLm1vbnRoID09PSBiLm1vbnRoO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDU4NDFmOWViOTc3M2YyNWYoYSwgYikge1xuICAgIGIgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpKGIsIGEuY2FsZW5kYXIpO1xuICAgIGEgPSAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkZjkxZTg5ZDNkMDQwNjEwMihhKTtcbiAgICBiID0gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGY5MWU4OWQzZDA0MDYxMDIoYik7XG4gICAgcmV0dXJuIGEuZXJhID09PSBiLmVyYSAmJiBhLnllYXIgPT09IGIueWVhcjtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ5MWI2MmViZjJiYTcwM2VlKGEsIGIpIHtcbiAgICByZXR1cm4gYS5jYWxlbmRhci5pZGVudGlmaWVyID09PSBiLmNhbGVuZGFyLmlkZW50aWZpZXIgJiYgYS5lcmEgPT09IGIuZXJhICYmIGEueWVhciA9PT0gYi55ZWFyICYmIGEubW9udGggPT09IGIubW9udGggJiYgYS5kYXkgPT09IGIuZGF5O1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDVhOGRhMGM0NGEzYWZkZjIoYSwgYikge1xuICAgIGEgPSAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYTVhM2I0NTRhZGEyMjY4ZShhKTtcbiAgICBiID0gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGE1YTNiNDU0YWRhMjI2OGUoYik7XG4gICAgcmV0dXJuIGEuY2FsZW5kYXIuaWRlbnRpZmllciA9PT0gYi5jYWxlbmRhci5pZGVudGlmaWVyICYmIGEuZXJhID09PSBiLmVyYSAmJiBhLnllYXIgPT09IGIueWVhciAmJiBhLm1vbnRoID09PSBiLm1vbnRoO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGVhODQwZjVhNmRkYTgxNDcoYSwgYikge1xuICAgIGEgPSAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkZjkxZTg5ZDNkMDQwNjEwMihhKTtcbiAgICBiID0gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGY5MWU4OWQzZDA0MDYxMDIoYik7XG4gICAgcmV0dXJuIGEuY2FsZW5kYXIuaWRlbnRpZmllciA9PT0gYi5jYWxlbmRhci5pZGVudGlmaWVyICYmIGEuZXJhID09PSBiLmVyYSAmJiBhLnllYXIgPT09IGIueWVhcjtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ2MjliMGE0OTdhYTY1MjY3KGRhdGUsIHRpbWVab25lKSB7XG4gICAgcmV0dXJuICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRlYTM5ZWMxOTc5OTNhZWYwKGRhdGUsICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRkMGJkZjQ1YWYwM2E2ZWEzKHRpbWVab25lKSk7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkMjA2MTA1NmQwNmQ3Y2RmNyhkYXRlLCBsb2NhbGUpIHtcbiAgICBsZXQganVsaWFuID0gZGF0ZS5jYWxlbmRhci50b0p1bGlhbkRheShkYXRlKTtcbiAgICAvLyBJZiBqdWxpYW4gaXMgbmVnYXRpdmUsIHRoZW4ganVsaWFuICUgNyB3aWxsIGJlIG5lZ2F0aXZlLCBzbyB3ZSBhZGp1c3RcbiAgICAvLyBhY2NvcmRpbmdseS4gIEp1bGlhbiBkYXkgMCBpcyBNb25kYXkuXG4gICAgbGV0IGRheU9mV2VlayA9IE1hdGguY2VpbChqdWxpYW4gKyAxIC0gJDFmMGY3ZWJmMWFlNmM1MzAkdmFyJGdldFdlZWtTdGFydChsb2NhbGUpKSAlIDc7XG4gICAgaWYgKGRheU9mV2VlayA8IDApIGRheU9mV2VlayArPSA3O1xuICAgIHJldHVybiBkYXlPZldlZWs7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNDYxOTM5ZGQ0NDIyMTUzKHRpbWVab25lKSB7XG4gICAgcmV0dXJuICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMWI5NjY5MmExYmEwNDJhYykoRGF0ZS5ub3coKSwgdGltZVpvbmUpO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGQwYmRmNDVhZjAzYTZlYTModGltZVpvbmUpIHtcbiAgICByZXR1cm4gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ5MzUyMmQxYTQzOWYzNjE3KSgkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNDYxOTM5ZGQ0NDIyMTUzKHRpbWVab25lKSk7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNjg3ODFkZGYzMWMwMDkwZihhLCBiKSB7XG4gICAgcmV0dXJuIGEuY2FsZW5kYXIudG9KdWxpYW5EYXkoYSkgLSBiLmNhbGVuZGFyLnRvSnVsaWFuRGF5KGIpO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGMxOWE4MGE5NzIxYjgwZjYoYSwgYikge1xuICAgIHJldHVybiAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkdGltZVRvTXMoYSkgLSAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkdGltZVRvTXMoYik7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkdGltZVRvTXMoYSkge1xuICAgIHJldHVybiBhLmhvdXIgKiAzNjAwMDAwICsgYS5taW51dGUgKiA2MDAwMCArIGEuc2Vjb25kICogMTAwMCArIGEubWlsbGlzZWNvbmQ7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkMTI2YzkxYzk0MWRlN2UoYSwgdGltZVpvbmUpIHtcbiAgICBsZXQgbXMgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMpKGEsIHRpbWVab25lKTtcbiAgICBsZXQgdG9tb3Jyb3cgPSBhLmFkZCh7XG4gICAgICAgIGRheXM6IDFcbiAgICB9KTtcbiAgICBsZXQgdG9tb3Jyb3dNcyA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTEwN2M4MmY5NDUxOGY1YykodG9tb3Jyb3csIHRpbWVab25lKTtcbiAgICByZXR1cm4gKHRvbW9ycm93TXMgLSBtcykgLyAzNjAwMDAwO1xufVxubGV0ICQxZjBmN2ViZjFhZTZjNTMwJHZhciRsb2NhbFRpbWVab25lID0gbnVsbDtcbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhYThiNDE3MzVhZmNhYmQyKCkge1xuICAgIC8vIFRPRE86IGludmFsaWRhdGUgdGhpcyBzb21laG93P1xuICAgIGlmICgkMWYwZjdlYmYxYWU2YzUzMCR2YXIkbG9jYWxUaW1lWm9uZSA9PSBudWxsKSAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkbG9jYWxUaW1lWm9uZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkudGltZVpvbmU7XG4gICAgcmV0dXJuICQxZjBmN2ViZjFhZTZjNTMwJHZhciRsb2NhbFRpbWVab25lO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGE1YTNiNDU0YWRhMjI2OGUoZGF0ZSkge1xuICAgIC8vIFVzZSBgc3VidHJhY3RgIGluc3RlYWQgb2YgYHNldGAgc28gd2UgZG9uJ3QgZ2V0IGNvbnN0cmFpbmVkIGluIGFuIGVyYS5cbiAgICByZXR1cm4gZGF0ZS5zdWJ0cmFjdCh7XG4gICAgICAgIGRheXM6IGRhdGUuZGF5IC0gMVxuICAgIH0pO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGEyMjU4ZDljNDExODgyNWMoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmFkZCh7XG4gICAgICAgIGRheXM6IGRhdGUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgoZGF0ZSkgLSBkYXRlLmRheVxuICAgIH0pO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGY5MWU4OWQzZDA0MDYxMDIoZGF0ZSkge1xuICAgIHJldHVybiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYTVhM2I0NTRhZGEyMjY4ZShkYXRlLnN1YnRyYWN0KHtcbiAgICAgICAgbW9udGhzOiBkYXRlLm1vbnRoIC0gMVxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ4YjdhYTU1YzY2ZDU1NjllKGRhdGUpIHtcbiAgICByZXR1cm4gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGEyMjU4ZDljNDExODgyNWMoZGF0ZS5hZGQoe1xuICAgICAgICBtb250aHM6IGRhdGUuY2FsZW5kYXIuZ2V0TW9udGhzSW5ZZWFyKGRhdGUpIC0gZGF0ZS5tb250aFxuICAgIH0pKTtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ1NDEyYWMxMTcxM2I3MmFkKGRhdGUpIHtcbiAgICBpZiAoZGF0ZS5jYWxlbmRhci5nZXRNaW5pbXVtTW9udGhJblllYXIpIHJldHVybiBkYXRlLmNhbGVuZGFyLmdldE1pbmltdW1Nb250aEluWWVhcihkYXRlKTtcbiAgICByZXR1cm4gMTtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRiMmY0OTUzZDMwMTk4MWQ1KGRhdGUpIHtcbiAgICBpZiAoZGF0ZS5jYWxlbmRhci5nZXRNaW5pbXVtRGF5SW5Nb250aCkgcmV0dXJuIGRhdGUuY2FsZW5kYXIuZ2V0TWluaW11bURheUluTW9udGgoZGF0ZSk7XG4gICAgcmV0dXJuIDE7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkNDJjODFhNDQ0ZmJmYjVkNChkYXRlLCBsb2NhbGUpIHtcbiAgICBsZXQgZGF5T2ZXZWVrID0gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDIwNjEwNTZkMDZkN2NkZjcoZGF0ZSwgbG9jYWxlKTtcbiAgICByZXR1cm4gZGF0ZS5zdWJ0cmFjdCh7XG4gICAgICAgIGRheXM6IGRheU9mV2Vla1xuICAgIH0pO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGVmOGI2ZDkxMzMwODRmNGUoZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ0MmM4MWE0NDRmYmZiNWQ0KGRhdGUsIGxvY2FsZSkuYWRkKHtcbiAgICAgICAgZGF5czogNlxuICAgIH0pO1xufVxuY29uc3QgJDFmMGY3ZWJmMWFlNmM1MzAkdmFyJGNhY2hlZFJlZ2lvbnMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkZ2V0UmVnaW9uKGxvY2FsZSkge1xuICAgIC8vIElmIHRoZSBJbnRsLkxvY2FsZSBBUEkgaXMgYXZhaWxhYmxlLCB1c2UgaXQgdG8gZ2V0IHRoZSByZWdpb24gZm9yIHRoZSBsb2NhbGUuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChJbnRsLkxvY2FsZSkge1xuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgYW4gSW50bC5Mb2NhbGUgaXMgZXhwZW5zaXZlLCBzbyBjYWNoZSB0aGUgcmVzdWx0LlxuICAgICAgICBsZXQgcmVnaW9uID0gJDFmMGY3ZWJmMWFlNmM1MzAkdmFyJGNhY2hlZFJlZ2lvbnMuZ2V0KGxvY2FsZSk7XG4gICAgICAgIGlmICghcmVnaW9uKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZWdpb24gPSBuZXcgSW50bC5Mb2NhbGUobG9jYWxlKS5tYXhpbWl6ZSgpLnJlZ2lvbjtcbiAgICAgICAgICAgIGlmIChyZWdpb24pICQxZjBmN2ViZjFhZTZjNTMwJHZhciRjYWNoZWRSZWdpb25zLnNldChsb2NhbGUsIHJlZ2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lvbjtcbiAgICB9XG4gICAgLy8gSWYgbm90LCBqdXN0IHRyeSBzcGxpdHRpbmcgdGhlIHN0cmluZy5cbiAgICAvLyBJZiB0aGUgc2Vjb25kIHBhcnQgb2YgdGhlIGxvY2FsZSBzdHJpbmcgaXMgJ3UnLFxuICAgIC8vIHRoZW4gdGhpcyBpcyBhIHVuaWNvZGUgZXh0ZW5zaW9uLCBzbyBpZ25vcmUgaXQuXG4gICAgLy8gT3RoZXJ3aXNlLCBpdCBzaG91bGQgYmUgdGhlIHJlZ2lvbi5cbiAgICBsZXQgcGFydCA9IGxvY2FsZS5zcGxpdChcIi1cIilbMV07XG4gICAgcmV0dXJuIHBhcnQgPT09IFwidVwiID8gdW5kZWZpbmVkIDogcGFydDtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJHZhciRnZXRXZWVrU3RhcnQobG9jYWxlKSB7XG4gICAgLy8gVE9ETzogdXNlIEludGwuTG9jYWxlIGZvciB0aGlzIG9uY2UgYnJvd3NlcnMgc3VwcG9ydCB0aGUgd2Vla0luZm8gcHJvcGVydHlcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pbnRsLWxvY2FsZS1pbmZvXG4gICAgbGV0IHJlZ2lvbiA9ICQxZjBmN2ViZjFhZTZjNTMwJHZhciRnZXRSZWdpb24obG9jYWxlKTtcbiAgICByZXR1cm4gcmVnaW9uID8gKDAsICQ0ZDg4ZWZmMjQyYjM4YTllJGV4cG9ydCQ3YTVhY2JkNzdkNDE0YmQ5KVtyZWdpb25dIHx8IDAgOiAwO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGNjYzFiMjQ3OWU3ZGQ2NTQoZGF0ZSwgbG9jYWxlKSB7XG4gICAgbGV0IGRheXMgPSBkYXRlLmNhbGVuZGFyLmdldERheXNJbk1vbnRoKGRhdGUpO1xuICAgIHJldHVybiBNYXRoLmNlaWwoKCQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQyMDYxMDU2ZDA2ZDdjZGY3KCQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhNWEzYjQ1NGFkYTIyNjhlKGRhdGUpLCBsb2NhbGUpICsgZGF5cykgLyA3KTtcbn1cbmZ1bmN0aW9uICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ1YzMzM2ExMTZlOTQ5Y2RkKGEsIGIpIHtcbiAgICBpZiAoYSAmJiBiKSByZXR1cm4gYS5jb21wYXJlKGIpIDw9IDAgPyBhIDogYjtcbiAgICByZXR1cm4gYSB8fCBiO1xufVxuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGE3NWYyYmZmNTc4MTEwNTUoYSwgYikge1xuICAgIGlmIChhICYmIGIpIHJldHVybiBhLmNvbXBhcmUoYikgPj0gMCA/IGEgOiBiO1xuICAgIHJldHVybiBhIHx8IGI7XG59XG5jb25zdCAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkV0VFS0VORF9EQVRBID0ge1xuICAgIEFGOiBbXG4gICAgICAgIDQsXG4gICAgICAgIDVcbiAgICBdLFxuICAgIEFFOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIEJIOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIERaOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIEVHOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIElMOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIElROiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIElSOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDVcbiAgICBdLFxuICAgIEpPOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIEtXOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIExZOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIE9NOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIFFBOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIFNBOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIFNEOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIFNZOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdLFxuICAgIFlFOiBbXG4gICAgICAgIDUsXG4gICAgICAgIDZcbiAgICBdXG59O1xuZnVuY3Rpb24gJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDYxOGQ2MGVhMjk5ZGE0MihkYXRlLCBsb2NhbGUpIHtcbiAgICBsZXQganVsaWFuID0gZGF0ZS5jYWxlbmRhci50b0p1bGlhbkRheShkYXRlKTtcbiAgICAvLyBJZiBqdWxpYW4gaXMgbmVnYXRpdmUsIHRoZW4ganVsaWFuICUgNyB3aWxsIGJlIG5lZ2F0aXZlLCBzbyB3ZSBhZGp1c3RcbiAgICAvLyBhY2NvcmRpbmdseS4gIEp1bGlhbiBkYXkgMCBpcyBNb25kYXkuXG4gICAgbGV0IGRheU9mV2VlayA9IE1hdGguY2VpbChqdWxpYW4gKyAxKSAlIDc7XG4gICAgaWYgKGRheU9mV2VlayA8IDApIGRheU9mV2VlayArPSA3O1xuICAgIGxldCByZWdpb24gPSAkMWYwZjdlYmYxYWU2YzUzMCR2YXIkZ2V0UmVnaW9uKGxvY2FsZSk7XG4gICAgLy8gVXNlIEludGwuTG9jYWxlIGZvciB0aGlzIG9uY2Ugd2Vla0luZm8gaXMgc3VwcG9ydGVkLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWludGwtbG9jYWxlLWluZm9cbiAgICBsZXQgW3N0YXJ0LCBlbmRdID0gJDFmMGY3ZWJmMWFlNmM1MzAkdmFyJFdFRUtFTkRfREFUQVtyZWdpb25dIHx8IFtcbiAgICAgICAgNixcbiAgICAgICAgMFxuICAgIF07XG4gICAgcmV0dXJuIGRheU9mV2VlayA9PT0gc3RhcnQgfHwgZGF5T2ZXZWVrID09PSBlbmQ7XG59XG5mdW5jdGlvbiAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkZWU5ZDg3MjU4ZTFkMTllZChkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gISQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCQ2MThkNjBlYTI5OWRhNDIoZGF0ZSwgbG9jYWxlKTtcbn1cblxuXG5mdW5jdGlvbiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYmQ0ZmIyYmM4YmIwNmZiKGRhdGUpIHtcbiAgICBkYXRlID0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIoZGF0ZSwgbmV3ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkODBlZTYyNDVlYzRmMjllYykoKSk7XG4gICAgbGV0IHllYXIgPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGMzNmUwZWNiMmQ0ZmE2OWQpKGRhdGUuZXJhLCBkYXRlLnllYXIpO1xuICAgIHJldHVybiAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkZXBvY2hGcm9tUGFydHMoeWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXksIGRhdGUuaG91ciwgZGF0ZS5taW51dGUsIGRhdGUuc2Vjb25kLCBkYXRlLm1pbGxpc2Vjb25kKTtcbn1cbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciRlcG9jaEZyb21QYXJ0cyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpIHtcbiAgICAvLyBOb3RlOiBEYXRlLlVUQygpIGludGVycHJldHMgb25lIGFuZCB0d28tZGlnaXQgeWVhcnMgYXMgYmVpbmcgaW4gdGhlXG4gICAgLy8gMjB0aCBjZW50dXJ5LCBzbyBkb24ndCB1c2UgaXRcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXRVVENIb3Vycyhob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoeWVhciwgbW9udGggLSAxLCBkYXkpO1xuICAgIHJldHVybiBkYXRlLmdldFRpbWUoKTtcbn1cbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1OWM5OWYzNTE1ZDM0OTNmKG1zLCB0aW1lWm9uZSkge1xuICAgIC8vIEZhc3QgcGF0aCBmb3IgVVRDLlxuICAgIGlmICh0aW1lWm9uZSA9PT0gXCJVVENcIikgcmV0dXJuIDA7XG4gICAgLy8gRmFzdCBwYXRoOiBmb3IgbG9jYWwgdGltZXpvbmUgYWZ0ZXIgMTk3MCwgdXNlIG5hdGl2ZSBEYXRlLlxuICAgIGlmIChtcyA+IDAgJiYgdGltZVpvbmUgPT09ICgwLCAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYWE4YjQxNzM1YWZjYWJkMikoKSkgcmV0dXJuIG5ldyBEYXRlKG1zKS5nZXRUaW1lem9uZU9mZnNldCgpICogLTYwMDAwO1xuICAgIGxldCB7IHllYXI6IHllYXIsIG1vbnRoOiBtb250aCwgZGF5OiBkYXksIGhvdXI6IGhvdXIsIG1pbnV0ZTogbWludXRlLCBzZWNvbmQ6IHNlY29uZCB9ID0gJDRhZTAyNjBhNjk3MjlmMWQkdmFyJGdldFRpbWVab25lUGFydHMobXMsIHRpbWVab25lKTtcbiAgICBsZXQgdXRjID0gJDRhZTAyNjBhNjk3MjlmMWQkdmFyJGVwb2NoRnJvbVBhcnRzKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCAwKTtcbiAgICByZXR1cm4gdXRjIC0gTWF0aC5mbG9vcihtcyAvIDEwMDApICogMTAwMDtcbn1cbmNvbnN0ICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciRmb3JtYXR0ZXJzQnlUaW1lWm9uZSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciRnZXRUaW1lWm9uZVBhcnRzKG1zLCB0aW1lWm9uZSkge1xuICAgIGxldCBmb3JtYXR0ZXIgPSAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkZm9ybWF0dGVyc0J5VGltZVpvbmUuZ2V0KHRpbWVab25lKTtcbiAgICBpZiAoIWZvcm1hdHRlcikge1xuICAgICAgICBmb3JtYXR0ZXIgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChcImVuLVVTXCIsIHtcbiAgICAgICAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcbiAgICAgICAgICAgIGhvdXIxMjogZmFsc2UsXG4gICAgICAgICAgICBlcmE6IFwic2hvcnRcIixcbiAgICAgICAgICAgIHllYXI6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgbW9udGg6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIGhvdXI6IFwibnVtZXJpY1wiLFxuICAgICAgICAgICAgbWludXRlOiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgIHNlY29uZDogXCJudW1lcmljXCJcbiAgICAgICAgfSk7XG4gICAgICAgICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciRmb3JtYXR0ZXJzQnlUaW1lWm9uZS5zZXQodGltZVpvbmUsIGZvcm1hdHRlcik7XG4gICAgfVxuICAgIGxldCBwYXJ0cyA9IGZvcm1hdHRlci5mb3JtYXRUb1BhcnRzKG5ldyBEYXRlKG1zKSk7XG4gICAgbGV0IG5hbWVkUGFydHMgPSB7fTtcbiAgICBmb3IgKGxldCBwYXJ0IG9mIHBhcnRzKWlmIChwYXJ0LnR5cGUgIT09IFwibGl0ZXJhbFwiKSBuYW1lZFBhcnRzW3BhcnQudHlwZV0gPSBwYXJ0LnZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIEZpcmVmb3ggcmV0dXJucyBCIGluc3RlYWQgb2YgQkMuLi4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTc1MjI1M1xuICAgICAgICB5ZWFyOiBuYW1lZFBhcnRzLmVyYSA9PT0gXCJCQ1wiIHx8IG5hbWVkUGFydHMuZXJhID09PSBcIkJcIiA/IC1uYW1lZFBhcnRzLnllYXIgKyAxIDogK25hbWVkUGFydHMueWVhcixcbiAgICAgICAgbW9udGg6ICtuYW1lZFBhcnRzLm1vbnRoLFxuICAgICAgICBkYXk6ICtuYW1lZFBhcnRzLmRheSxcbiAgICAgICAgaG91cjogbmFtZWRQYXJ0cy5ob3VyID09PSBcIjI0XCIgPyAwIDogK25hbWVkUGFydHMuaG91cixcbiAgICAgICAgbWludXRlOiArbmFtZWRQYXJ0cy5taW51dGUsXG4gICAgICAgIHNlY29uZDogK25hbWVkUGFydHMuc2Vjb25kXG4gICAgfTtcbn1cbmNvbnN0ICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciREQVlNSUxMSVMgPSA4NjQwMDAwMDtcbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQxMzZmMzhlZmU3Y2FmNTQ5KGRhdGUsIHRpbWVab25lKSB7XG4gICAgbGV0IG1zID0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGJkNGZiMmJjOGJiMDZmYihkYXRlKTtcbiAgICBsZXQgZWFybGllciA9IG1zIC0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDU5Yzk5ZjM1MTVkMzQ5M2YobXMgLSAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkREFZTUlMTElTLCB0aW1lWm9uZSk7XG4gICAgbGV0IGxhdGVyID0gbXMgLSAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTljOTlmMzUxNWQzNDkzZihtcyArICQ0YWUwMjYwYTY5NzI5ZjFkJHZhciREQVlNSUxMSVMsIHRpbWVab25lKTtcbiAgICByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkdmFyJGdldFZhbGlkV2FsbFRpbWVzKGRhdGUsIHRpbWVab25lLCBlYXJsaWVyLCBsYXRlcik7XG59XG5mdW5jdGlvbiAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkZ2V0VmFsaWRXYWxsVGltZXMoZGF0ZSwgdGltZVpvbmUsIGVhcmxpZXIsIGxhdGVyKSB7XG4gICAgbGV0IGZvdW5kID0gZWFybGllciA9PT0gbGF0ZXIgPyBbXG4gICAgICAgIGVhcmxpZXJcbiAgICBdIDogW1xuICAgICAgICBlYXJsaWVyLFxuICAgICAgICBsYXRlclxuICAgIF07XG4gICAgcmV0dXJuIGZvdW5kLmZpbHRlcigoYWJzb2x1dGUpPT4kNGFlMDI2MGE2OTcyOWYxZCR2YXIkaXNWYWxpZFdhbGxUaW1lKGRhdGUsIHRpbWVab25lLCBhYnNvbHV0ZSkpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkdmFyJGlzVmFsaWRXYWxsVGltZShkYXRlLCB0aW1lWm9uZSwgYWJzb2x1dGUpIHtcbiAgICBsZXQgcGFydHMgPSAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkZ2V0VGltZVpvbmVQYXJ0cyhhYnNvbHV0ZSwgdGltZVpvbmUpO1xuICAgIHJldHVybiBkYXRlLnllYXIgPT09IHBhcnRzLnllYXIgJiYgZGF0ZS5tb250aCA9PT0gcGFydHMubW9udGggJiYgZGF0ZS5kYXkgPT09IHBhcnRzLmRheSAmJiBkYXRlLmhvdXIgPT09IHBhcnRzLmhvdXIgJiYgZGF0ZS5taW51dGUgPT09IHBhcnRzLm1pbnV0ZSAmJiBkYXRlLnNlY29uZCA9PT0gcGFydHMuc2Vjb25kO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMoZGF0ZSwgdGltZVpvbmUsIGRpc2FtYmlndWF0aW9uID0gXCJjb21wYXRpYmxlXCIpIHtcbiAgICBsZXQgZGF0ZVRpbWUgPSAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjIxZTBiMTI0ZTIyNDQ4NChkYXRlKTtcbiAgICAvLyBGYXN0IHBhdGg6IGlmIHRoZSB0aW1lIHpvbmUgaXMgVVRDLCB1c2UgbmF0aXZlIERhdGUuXG4gICAgaWYgKHRpbWVab25lID09PSBcIlVUQ1wiKSByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGJkNGZiMmJjOGJiMDZmYihkYXRlVGltZSk7XG4gICAgLy8gRmFzdCBwYXRoOiBpZiB0aGUgdGltZSB6b25lIGlzIHRoZSBsb2NhbCB0aW1lem9uZSBhbmQgZGlzYW1iaWd1YXRpb24gaXMgY29tcGF0aWJsZSwgdXNlIG5hdGl2ZSBEYXRlLlxuICAgIGlmICh0aW1lWm9uZSA9PT0gKDAsICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhYThiNDE3MzVhZmNhYmQyKSgpICYmIGRpc2FtYmlndWF0aW9uID09PSBcImNvbXBhdGlibGVcIikge1xuICAgICAgICBkYXRlVGltZSA9ICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiNGEwMzZhZjNmYzBiMDMyKGRhdGVUaW1lLCBuZXcgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSgpKTtcbiAgICAgICAgLy8gRG9uJ3QgdXNlIERhdGUgY29uc3RydWN0b3IgaGVyZSBiZWNhdXNlIHR3by1kaWdpdCB5ZWFycyBhcmUgaW50ZXJwcmV0ZWQgaW4gdGhlIDIwdGggY2VudHVyeS5cbiAgICAgICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgeWVhciA9ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkYzM2ZTBlY2IyZDRmYTY5ZCkoZGF0ZVRpbWUuZXJhLCBkYXRlVGltZS55ZWFyKTtcbiAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBkYXRlVGltZS5tb250aCAtIDEsIGRhdGVUaW1lLmRheSk7XG4gICAgICAgIGRhdGUuc2V0SG91cnMoZGF0ZVRpbWUuaG91ciwgZGF0ZVRpbWUubWludXRlLCBkYXRlVGltZS5zZWNvbmQsIGRhdGVUaW1lLm1pbGxpc2Vjb25kKTtcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xuICAgIH1cbiAgICBsZXQgbXMgPSAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYmQ0ZmIyYmM4YmIwNmZiKGRhdGVUaW1lKTtcbiAgICBsZXQgb2Zmc2V0QmVmb3JlID0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDU5Yzk5ZjM1MTVkMzQ5M2YobXMgLSAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkREFZTUlMTElTLCB0aW1lWm9uZSk7XG4gICAgbGV0IG9mZnNldEFmdGVyID0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDU5Yzk5ZjM1MTVkMzQ5M2YobXMgKyAkNGFlMDI2MGE2OTcyOWYxZCR2YXIkREFZTUlMTElTLCB0aW1lWm9uZSk7XG4gICAgbGV0IHZhbGlkID0gJDRhZTAyNjBhNjk3MjlmMWQkdmFyJGdldFZhbGlkV2FsbFRpbWVzKGRhdGVUaW1lLCB0aW1lWm9uZSwgbXMgLSBvZmZzZXRCZWZvcmUsIG1zIC0gb2Zmc2V0QWZ0ZXIpO1xuICAgIGlmICh2YWxpZC5sZW5ndGggPT09IDEpIHJldHVybiB2YWxpZFswXTtcbiAgICBpZiAodmFsaWQubGVuZ3RoID4gMSkgc3dpdGNoKGRpc2FtYmlndWF0aW9uKXtcbiAgICAgICAgLy8gJ2NvbXBhdGlibGUnIG1lYW5zICdlYXJsaWVyJyBmb3IgXCJmYWxsIGJhY2tcIiB0cmFuc2l0aW9uc1xuICAgICAgICBjYXNlIFwiY29tcGF0aWJsZVwiOlxuICAgICAgICBjYXNlIFwiZWFybGllclwiOlxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkWzBdO1xuICAgICAgICBjYXNlIFwibGF0ZXJcIjpcbiAgICAgICAgICAgIHJldHVybiB2YWxpZFt2YWxpZC5sZW5ndGggLSAxXTtcbiAgICAgICAgY2FzZSBcInJlamVjdFwiOlxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJNdWx0aXBsZSBwb3NzaWJsZSBhYnNvbHV0ZSB0aW1lcyBmb3VuZFwiKTtcbiAgICB9XG4gICAgc3dpdGNoKGRpc2FtYmlndWF0aW9uKXtcbiAgICAgICAgY2FzZSBcImVhcmxpZXJcIjpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihtcyAtIG9mZnNldEJlZm9yZSwgbXMgLSBvZmZzZXRBZnRlcik7XG4gICAgICAgIC8vICdjb21wYXRpYmxlJyBtZWFucyAnbGF0ZXInIGZvciBcInNwcmluZyBmb3J3YXJkXCIgdHJhbnNpdGlvbnNcbiAgICAgICAgY2FzZSBcImNvbXBhdGlibGVcIjpcbiAgICAgICAgY2FzZSBcImxhdGVyXCI6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgobXMgLSBvZmZzZXRCZWZvcmUsIG1zIC0gb2Zmc2V0QWZ0ZXIpO1xuICAgICAgICBjYXNlIFwicmVqZWN0XCI6XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk5vIHN1Y2ggYWJzb2x1dGUgdGltZSBmb3VuZFwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkZTY3YTA5NWM2MjBiODZmZShkYXRlVGltZSwgdGltZVpvbmUsIGRpc2FtYmlndWF0aW9uID0gXCJjb21wYXRpYmxlXCIpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMoZGF0ZVRpbWUsIHRpbWVab25lLCBkaXNhbWJpZ3VhdGlvbikpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMobXMsIHRpbWVab25lKSB7XG4gICAgbGV0IG9mZnNldCA9ICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1OWM5OWYzNTE1ZDM0OTNmKG1zLCB0aW1lWm9uZSk7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShtcyArIG9mZnNldCk7XG4gICAgbGV0IHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgbGV0IG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgMTtcbiAgICBsZXQgZGF5ID0gZGF0ZS5nZXRVVENEYXRlKCk7XG4gICAgbGV0IGhvdXIgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgbGV0IG1pbnV0ZSA9IGRhdGUuZ2V0VVRDTWludXRlcygpO1xuICAgIGxldCBzZWNvbmQgPSBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbiAgICBsZXQgbWlsbGlzZWNvbmQgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRkM2I3Mjg4ZTc5OTRlZGVhKSh5ZWFyLCBtb250aCwgZGF5LCB0aW1lWm9uZSwgb2Zmc2V0LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGU1N2ZmMTAwZDkxYmQ0YjkoZGF0ZSwgdGltZVpvbmUpIHtcbiAgICByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMoZGF0ZS5nZXRUaW1lKCksIHRpbWVab25lKTtcbn1cbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRkN2Y5MmJjZDM1OTZiMDg2KGRhdGUpIHtcbiAgICByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGU1N2ZmMTAwZDkxYmQ0YjkoZGF0ZSwgKDAsICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRhYThiNDE3MzVhZmNhYmQyKSgpKTtcbn1cbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ5MzUyMmQxYTQzOWYzNjE3KGRhdGVUaW1lKSB7XG4gICAgcmV0dXJuIG5ldyAoMCwgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYpKGRhdGVUaW1lLmNhbGVuZGFyLCBkYXRlVGltZS5lcmEsIGRhdGVUaW1lLnllYXIsIGRhdGVUaW1lLm1vbnRoLCBkYXRlVGltZS5kYXkpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDZmNGQ3ODE0OWYzZjUzYWMoZGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGVyYTogZGF0ZS5lcmEsXG4gICAgICAgIHllYXI6IGRhdGUueWVhcixcbiAgICAgICAgbW9udGg6IGRhdGUubW9udGgsXG4gICAgICAgIGRheTogZGF0ZS5kYXlcbiAgICB9O1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDRkMDM5M2U3MzI4NTdiZTUoZGF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGhvdXI6IGRhdGUuaG91cixcbiAgICAgICAgbWludXRlOiBkYXRlLm1pbnV0ZSxcbiAgICAgICAgc2Vjb25kOiBkYXRlLnNlY29uZCxcbiAgICAgICAgbWlsbGlzZWNvbmQ6IGRhdGUubWlsbGlzZWNvbmRcbiAgICB9O1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGIyMWUwYjEyNGUyMjQ0ODQoZGF0ZSwgdGltZSkge1xuICAgIGxldCBob3VyID0gMCwgbWludXRlID0gMCwgc2Vjb25kID0gMCwgbWlsbGlzZWNvbmQgPSAwO1xuICAgIGlmIChcInRpbWVab25lXCIgaW4gZGF0ZSkgKHsgaG91cjogaG91ciwgbWludXRlOiBtaW51dGUsIHNlY29uZDogc2Vjb25kLCBtaWxsaXNlY29uZDogbWlsbGlzZWNvbmQgfSA9IGRhdGUpO1xuICAgIGVsc2UgaWYgKFwiaG91clwiIGluIGRhdGUgJiYgIXRpbWUpIHJldHVybiBkYXRlO1xuICAgIGlmICh0aW1lKSAoeyBob3VyOiBob3VyLCBtaW51dGU6IG1pbnV0ZSwgc2Vjb25kOiBzZWNvbmQsIG1pbGxpc2Vjb25kOiBtaWxsaXNlY29uZCB9ID0gdGltZSk7XG4gICAgcmV0dXJuIG5ldyAoMCwgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JGNhODcxZThkYmI4MDk2NmYpKGRhdGUuY2FsZW5kYXIsIGRhdGUuZXJhLCBkYXRlLnllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGQzM2Y3OWUzZmZjM2RjODMoZGF0ZVRpbWUpIHtcbiAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkNjgwZWExOTZlZmZjZTVmKShkYXRlVGltZS5ob3VyLCBkYXRlVGltZS5taW51dGUsIGRhdGVUaW1lLnNlY29uZCwgZGF0ZVRpbWUubWlsbGlzZWNvbmQpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIoZGF0ZSwgY2FsZW5kYXIpIHtcbiAgICBpZiAoZGF0ZS5jYWxlbmRhci5pZGVudGlmaWVyID09PSBjYWxlbmRhci5pZGVudGlmaWVyKSByZXR1cm4gZGF0ZTtcbiAgICBsZXQgY2FsZW5kYXJEYXRlID0gY2FsZW5kYXIuZnJvbUp1bGlhbkRheShkYXRlLmNhbGVuZGFyLnRvSnVsaWFuRGF5KGRhdGUpKTtcbiAgICBsZXQgY29weSA9IGRhdGUuY29weSgpO1xuICAgIGNvcHkuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICBjb3B5LmVyYSA9IGNhbGVuZGFyRGF0ZS5lcmE7XG4gICAgY29weS55ZWFyID0gY2FsZW5kYXJEYXRlLnllYXI7XG4gICAgY29weS5tb250aCA9IGNhbGVuZGFyRGF0ZS5tb250aDtcbiAgICBjb3B5LmRheSA9IGNhbGVuZGFyRGF0ZS5kYXk7XG4gICAgKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRjNGUyZWNhYzQ5MzUxZWYyKShjb3B5KTtcbiAgICByZXR1cm4gY29weTtcbn1cbmZ1bmN0aW9uICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ4NGM5NWE4M2M3OTllMDc0KGRhdGUsIHRpbWVab25lLCBkaXNhbWJpZ3VhdGlvbikge1xuICAgIGlmIChkYXRlIGluc3RhbmNlb2YgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRkM2I3Mjg4ZTc5OTRlZGVhKSkge1xuICAgICAgICBpZiAoZGF0ZS50aW1lWm9uZSA9PT0gdGltZVpvbmUpIHJldHVybiBkYXRlO1xuICAgICAgICByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUzOGIwMDAzM2NjMTFjNzUoZGF0ZSwgdGltZVpvbmUpO1xuICAgIH1cbiAgICBsZXQgbXMgPSAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTEwN2M4MmY5NDUxOGY1YyhkYXRlLCB0aW1lWm9uZSwgZGlzYW1iaWd1YXRpb24pO1xuICAgIHJldHVybiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMWI5NjY5MmExYmEwNDJhYyhtcywgdGltZVpvbmUpO1xufVxuZnVuY3Rpb24gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDgzYWFjMDdiNGMzN2IyNShkYXRlKSB7XG4gICAgbGV0IG1zID0gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGJkNGZiMmJjOGJiMDZmYihkYXRlKSAtIGRhdGUub2Zmc2V0O1xuICAgIHJldHVybiBuZXcgRGF0ZShtcyk7XG59XG5mdW5jdGlvbiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTM4YjAwMDMzY2MxMWM3NShkYXRlLCB0aW1lWm9uZSkge1xuICAgIGxldCBtcyA9ICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiZDRmYjJiYzhiYjA2ZmIoZGF0ZSkgLSBkYXRlLm9mZnNldDtcbiAgICByZXR1cm4gJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIoJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMobXMsIHRpbWVab25lKSwgZGF0ZS5jYWxlbmRhcik7XG59XG5mdW5jdGlvbiAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkZDliNjdiYzkzYzA5NzQ5MShkYXRlKSB7XG4gICAgcmV0dXJuICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1MzhiMDAwMzNjYzExYzc1KGRhdGUsICgwLCAkMWYwZjdlYmYxYWU2YzUzMCRleHBvcnQkYWE4YjQxNzM1YWZjYWJkMikoKSk7XG59XG5cblxuXG5jb25zdCAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkT05FX0hPVVIgPSAzNjAwMDAwO1xuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGUxNmQ4NTIwYWY0NGEwOTYoZGF0ZSwgZHVyYXRpb24pIHtcbiAgICBsZXQgbXV0YWJsZURhdGUgPSBkYXRlLmNvcHkoKTtcbiAgICBsZXQgZGF5cyA9IFwiaG91clwiIGluIG11dGFibGVEYXRlID8gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGFkZFRpbWVGaWVsZHMobXV0YWJsZURhdGUsIGR1cmF0aW9uKSA6IDA7XG4gICAgJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGFkZFllYXJzKG11dGFibGVEYXRlLCBkdXJhdGlvbi55ZWFycyB8fCAwKTtcbiAgICBpZiAobXV0YWJsZURhdGUuY2FsZW5kYXIuYmFsYW5jZVllYXJNb250aCkgbXV0YWJsZURhdGUuY2FsZW5kYXIuYmFsYW5jZVllYXJNb250aChtdXRhYmxlRGF0ZSwgZGF0ZSk7XG4gICAgbXV0YWJsZURhdGUubW9udGggKz0gZHVyYXRpb24ubW9udGhzIHx8IDA7XG4gICAgJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGJhbGFuY2VZZWFyTW9udGgobXV0YWJsZURhdGUpO1xuICAgICQ1YzA1NzFhYTViNmZiNWRhJHZhciRjb25zdHJhaW5Nb250aERheShtdXRhYmxlRGF0ZSk7XG4gICAgbXV0YWJsZURhdGUuZGF5ICs9IChkdXJhdGlvbi53ZWVrcyB8fCAwKSAqIDc7XG4gICAgbXV0YWJsZURhdGUuZGF5ICs9IGR1cmF0aW9uLmRheXMgfHwgMDtcbiAgICBtdXRhYmxlRGF0ZS5kYXkgKz0gZGF5cztcbiAgICAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkYmFsYW5jZURheShtdXRhYmxlRGF0ZSk7XG4gICAgaWYgKG11dGFibGVEYXRlLmNhbGVuZGFyLmJhbGFuY2VEYXRlKSBtdXRhYmxlRGF0ZS5jYWxlbmRhci5iYWxhbmNlRGF0ZShtdXRhYmxlRGF0ZSk7XG4gICAgLy8gQ29uc3RyYWluIGluIGNhc2UgYWRkaW5nIGVuZGVkIHVwIHdpdGggYSBkYXRlIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIGZvciB0aGUgY2FsZW5kYXIgc3lzdGVtLlxuICAgIC8vIFRoZSBiZWhhdmlvciBoZXJlIGlzIHNsaWdodGx5IGRpZmZlcmVudCB0aGFuIHdoZW4gY29uc3RyYWluaW5nIGluIHRoZSBgc2V0YCBmdW5jdGlvbiBpbiB0aGF0XG4gICAgLy8gd2UgYWRqdXN0IHNtYWxsZXIgZmllbGRzIHRvIHRoZWlyIG1pbmltdW0vbWF4aW11bSB2YWx1ZXMgcmF0aGVyIHRoYW4gY29uc3RyYWluaW5nIGVhY2ggZmllbGRcbiAgICAvLyBpbmRpdmlkdWFsbHkuIFRoaXMgbWF0Y2hlcyB0aGUgZ2VuZXJhbCBiZWhhdmlvciBvZiBgYWRkYCB2cyBgc2V0YCByZWdhcmRpbmcgaG93IGZpZWxkcyBhcmUgYmFsYW5jZWQuXG4gICAgaWYgKG11dGFibGVEYXRlLnllYXIgPCAxKSB7XG4gICAgICAgIG11dGFibGVEYXRlLnllYXIgPSAxO1xuICAgICAgICBtdXRhYmxlRGF0ZS5tb250aCA9IDE7XG4gICAgICAgIG11dGFibGVEYXRlLmRheSA9IDE7XG4gICAgfVxuICAgIGxldCBtYXhZZWFyID0gbXV0YWJsZURhdGUuY2FsZW5kYXIuZ2V0WWVhcnNJbkVyYShtdXRhYmxlRGF0ZSk7XG4gICAgaWYgKG11dGFibGVEYXRlLnllYXIgPiBtYXhZZWFyKSB7XG4gICAgICAgIHZhciBfbXV0YWJsZURhdGVfY2FsZW5kYXJfaXNJbnZlcnNlRXJhLCBfbXV0YWJsZURhdGVfY2FsZW5kYXI7XG4gICAgICAgIGxldCBpc0ludmVyc2VFcmEgPSAoX211dGFibGVEYXRlX2NhbGVuZGFyX2lzSW52ZXJzZUVyYSA9IChfbXV0YWJsZURhdGVfY2FsZW5kYXIgPSBtdXRhYmxlRGF0ZS5jYWxlbmRhcikuaXNJbnZlcnNlRXJhKSA9PT0gbnVsbCB8fCBfbXV0YWJsZURhdGVfY2FsZW5kYXJfaXNJbnZlcnNlRXJhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbXV0YWJsZURhdGVfY2FsZW5kYXJfaXNJbnZlcnNlRXJhLmNhbGwoX211dGFibGVEYXRlX2NhbGVuZGFyLCBtdXRhYmxlRGF0ZSk7XG4gICAgICAgIG11dGFibGVEYXRlLnllYXIgPSBtYXhZZWFyO1xuICAgICAgICBtdXRhYmxlRGF0ZS5tb250aCA9IGlzSW52ZXJzZUVyYSA/IDEgOiBtdXRhYmxlRGF0ZS5jYWxlbmRhci5nZXRNb250aHNJblllYXIobXV0YWJsZURhdGUpO1xuICAgICAgICBtdXRhYmxlRGF0ZS5kYXkgPSBpc0ludmVyc2VFcmEgPyAxIDogbXV0YWJsZURhdGUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgobXV0YWJsZURhdGUpO1xuICAgIH1cbiAgICBpZiAobXV0YWJsZURhdGUubW9udGggPCAxKSB7XG4gICAgICAgIG11dGFibGVEYXRlLm1vbnRoID0gMTtcbiAgICAgICAgbXV0YWJsZURhdGUuZGF5ID0gMTtcbiAgICB9XG4gICAgbGV0IG1heE1vbnRoID0gbXV0YWJsZURhdGUuY2FsZW5kYXIuZ2V0TW9udGhzSW5ZZWFyKG11dGFibGVEYXRlKTtcbiAgICBpZiAobXV0YWJsZURhdGUubW9udGggPiBtYXhNb250aCkge1xuICAgICAgICBtdXRhYmxlRGF0ZS5tb250aCA9IG1heE1vbnRoO1xuICAgICAgICBtdXRhYmxlRGF0ZS5kYXkgPSBtdXRhYmxlRGF0ZS5jYWxlbmRhci5nZXREYXlzSW5Nb250aChtdXRhYmxlRGF0ZSk7XG4gICAgfVxuICAgIG11dGFibGVEYXRlLmRheSA9IE1hdGgubWF4KDEsIE1hdGgubWluKG11dGFibGVEYXRlLmNhbGVuZGFyLmdldERheXNJbk1vbnRoKG11dGFibGVEYXRlKSwgbXV0YWJsZURhdGUuZGF5KSk7XG4gICAgcmV0dXJuIG11dGFibGVEYXRlO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGFkZFllYXJzKGRhdGUsIHllYXJzKSB7XG4gICAgdmFyIF9kYXRlX2NhbGVuZGFyX2lzSW52ZXJzZUVyYSwgX2RhdGVfY2FsZW5kYXI7XG4gICAgaWYgKChfZGF0ZV9jYWxlbmRhcl9pc0ludmVyc2VFcmEgPSAoX2RhdGVfY2FsZW5kYXIgPSBkYXRlLmNhbGVuZGFyKS5pc0ludmVyc2VFcmEpID09PSBudWxsIHx8IF9kYXRlX2NhbGVuZGFyX2lzSW52ZXJzZUVyYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RhdGVfY2FsZW5kYXJfaXNJbnZlcnNlRXJhLmNhbGwoX2RhdGVfY2FsZW5kYXIsIGRhdGUpKSB5ZWFycyA9IC15ZWFycztcbiAgICBkYXRlLnllYXIgKz0geWVhcnM7XG59XG5mdW5jdGlvbiAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkYmFsYW5jZVllYXJNb250aChkYXRlKSB7XG4gICAgd2hpbGUoZGF0ZS5tb250aCA8IDEpe1xuICAgICAgICAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkYWRkWWVhcnMoZGF0ZSwgLTEpO1xuICAgICAgICBkYXRlLm1vbnRoICs9IGRhdGUuY2FsZW5kYXIuZ2V0TW9udGhzSW5ZZWFyKGRhdGUpO1xuICAgIH1cbiAgICBsZXQgbW9udGhzSW5ZZWFyID0gMDtcbiAgICB3aGlsZShkYXRlLm1vbnRoID4gKG1vbnRoc0luWWVhciA9IGRhdGUuY2FsZW5kYXIuZ2V0TW9udGhzSW5ZZWFyKGRhdGUpKSl7XG4gICAgICAgIGRhdGUubW9udGggLT0gbW9udGhzSW5ZZWFyO1xuICAgICAgICAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkYWRkWWVhcnMoZGF0ZSwgMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGJhbGFuY2VEYXkoZGF0ZSkge1xuICAgIHdoaWxlKGRhdGUuZGF5IDwgMSl7XG4gICAgICAgIGRhdGUubW9udGgtLTtcbiAgICAgICAgJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGJhbGFuY2VZZWFyTW9udGgoZGF0ZSk7XG4gICAgICAgIGRhdGUuZGF5ICs9IGRhdGUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgoZGF0ZSk7XG4gICAgfVxuICAgIHdoaWxlKGRhdGUuZGF5ID4gZGF0ZS5jYWxlbmRhci5nZXREYXlzSW5Nb250aChkYXRlKSl7XG4gICAgICAgIGRhdGUuZGF5IC09IGRhdGUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgoZGF0ZSk7XG4gICAgICAgIGRhdGUubW9udGgrKztcbiAgICAgICAgJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGJhbGFuY2VZZWFyTW9udGgoZGF0ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGNvbnN0cmFpbk1vbnRoRGF5KGRhdGUpIHtcbiAgICBkYXRlLm1vbnRoID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oZGF0ZS5jYWxlbmRhci5nZXRNb250aHNJblllYXIoZGF0ZSksIGRhdGUubW9udGgpKTtcbiAgICBkYXRlLmRheSA9IE1hdGgubWF4KDEsIE1hdGgubWluKGRhdGUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgoZGF0ZSksIGRhdGUuZGF5KSk7XG59XG5mdW5jdGlvbiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkYzRlMmVjYWM0OTM1MWVmMihkYXRlKSB7XG4gICAgaWYgKGRhdGUuY2FsZW5kYXIuY29uc3RyYWluRGF0ZSkgZGF0ZS5jYWxlbmRhci5jb25zdHJhaW5EYXRlKGRhdGUpO1xuICAgIGRhdGUueWVhciA9IE1hdGgubWF4KDEsIE1hdGgubWluKGRhdGUuY2FsZW5kYXIuZ2V0WWVhcnNJbkVyYShkYXRlKSwgZGF0ZS55ZWFyKSk7XG4gICAgJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGNvbnN0cmFpbk1vbnRoRGF5KGRhdGUpO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDNlMjU0NGU4OGEyNWJmZjgoZHVyYXRpb24pIHtcbiAgICBsZXQgaW52ZXJzZUR1cmF0aW9uID0ge307XG4gICAgZm9yKGxldCBrZXkgaW4gZHVyYXRpb24paWYgKHR5cGVvZiBkdXJhdGlvbltrZXldID09PSBcIm51bWJlclwiKSBpbnZlcnNlRHVyYXRpb25ba2V5XSA9IC1kdXJhdGlvbltrZXldO1xuICAgIHJldHVybiBpbnZlcnNlRHVyYXRpb247XG59XG5mdW5jdGlvbiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkNGUyZDJlYWQ2NWU1ZjdlMyhkYXRlLCBkdXJhdGlvbikge1xuICAgIHJldHVybiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZTE2ZDg1MjBhZjQ0YTA5NihkYXRlLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkM2UyNTQ0ZTg4YTI1YmZmOChkdXJhdGlvbikpO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGFkYWE0Y2Y3ZWYxYjY1YmUoZGF0ZSwgZmllbGRzKSB7XG4gICAgbGV0IG11dGFibGVEYXRlID0gZGF0ZS5jb3B5KCk7XG4gICAgaWYgKGZpZWxkcy5lcmEgIT0gbnVsbCkgbXV0YWJsZURhdGUuZXJhID0gZmllbGRzLmVyYTtcbiAgICBpZiAoZmllbGRzLnllYXIgIT0gbnVsbCkgbXV0YWJsZURhdGUueWVhciA9IGZpZWxkcy55ZWFyO1xuICAgIGlmIChmaWVsZHMubW9udGggIT0gbnVsbCkgbXV0YWJsZURhdGUubW9udGggPSBmaWVsZHMubW9udGg7XG4gICAgaWYgKGZpZWxkcy5kYXkgIT0gbnVsbCkgbXV0YWJsZURhdGUuZGF5ID0gZmllbGRzLmRheTtcbiAgICAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkYzRlMmVjYWM0OTM1MWVmMihtdXRhYmxlRGF0ZSk7XG4gICAgcmV0dXJuIG11dGFibGVEYXRlO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGU1ZDVlMWMxODIyYjZlNTYodmFsdWUsIGZpZWxkcykge1xuICAgIGxldCBtdXRhYmxlVmFsdWUgPSB2YWx1ZS5jb3B5KCk7XG4gICAgaWYgKGZpZWxkcy5ob3VyICE9IG51bGwpIG11dGFibGVWYWx1ZS5ob3VyID0gZmllbGRzLmhvdXI7XG4gICAgaWYgKGZpZWxkcy5taW51dGUgIT0gbnVsbCkgbXV0YWJsZVZhbHVlLm1pbnV0ZSA9IGZpZWxkcy5taW51dGU7XG4gICAgaWYgKGZpZWxkcy5zZWNvbmQgIT0gbnVsbCkgbXV0YWJsZVZhbHVlLnNlY29uZCA9IGZpZWxkcy5zZWNvbmQ7XG4gICAgaWYgKGZpZWxkcy5taWxsaXNlY29uZCAhPSBudWxsKSBtdXRhYmxlVmFsdWUubWlsbGlzZWNvbmQgPSBmaWVsZHMubWlsbGlzZWNvbmQ7XG4gICAgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDc1NTVkZTFlMDcwNTEwY2IobXV0YWJsZVZhbHVlKTtcbiAgICByZXR1cm4gbXV0YWJsZVZhbHVlO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGJhbGFuY2VUaW1lKHRpbWUpIHtcbiAgICB0aW1lLnNlY29uZCArPSBNYXRoLmZsb29yKHRpbWUubWlsbGlzZWNvbmQgLyAxMDAwKTtcbiAgICB0aW1lLm1pbGxpc2Vjb25kID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJG5vbk5lZ2F0aXZlTW9kKHRpbWUubWlsbGlzZWNvbmQsIDEwMDApO1xuICAgIHRpbWUubWludXRlICs9IE1hdGguZmxvb3IodGltZS5zZWNvbmQgLyA2MCk7XG4gICAgdGltZS5zZWNvbmQgPSAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkbm9uTmVnYXRpdmVNb2QodGltZS5zZWNvbmQsIDYwKTtcbiAgICB0aW1lLmhvdXIgKz0gTWF0aC5mbG9vcih0aW1lLm1pbnV0ZSAvIDYwKTtcbiAgICB0aW1lLm1pbnV0ZSA9ICQ1YzA1NzFhYTViNmZiNWRhJHZhciRub25OZWdhdGl2ZU1vZCh0aW1lLm1pbnV0ZSwgNjApO1xuICAgIGxldCBkYXlzID0gTWF0aC5mbG9vcih0aW1lLmhvdXIgLyAyNCk7XG4gICAgdGltZS5ob3VyID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJG5vbk5lZ2F0aXZlTW9kKHRpbWUuaG91ciwgMjQpO1xuICAgIHJldHVybiBkYXlzO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDc1NTVkZTFlMDcwNTEwY2IodGltZSkge1xuICAgIHRpbWUubWlsbGlzZWNvbmQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0aW1lLm1pbGxpc2Vjb25kLCAxMDAwKSk7XG4gICAgdGltZS5zZWNvbmQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbih0aW1lLnNlY29uZCwgNTkpKTtcbiAgICB0aW1lLm1pbnV0ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRpbWUubWludXRlLCA1OSkpO1xuICAgIHRpbWUuaG91ciA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRpbWUuaG91ciwgMjMpKTtcbn1cbmZ1bmN0aW9uICQ1YzA1NzFhYTViNmZiNWRhJHZhciRub25OZWdhdGl2ZU1vZChhLCBiKSB7XG4gICAgbGV0IHJlc3VsdCA9IGEgJSBiO1xuICAgIGlmIChyZXN1bHQgPCAwKSByZXN1bHQgKz0gYjtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGFkZFRpbWVGaWVsZHModGltZSwgZHVyYXRpb24pIHtcbiAgICB0aW1lLmhvdXIgKz0gZHVyYXRpb24uaG91cnMgfHwgMDtcbiAgICB0aW1lLm1pbnV0ZSArPSBkdXJhdGlvbi5taW51dGVzIHx8IDA7XG4gICAgdGltZS5zZWNvbmQgKz0gZHVyYXRpb24uc2Vjb25kcyB8fCAwO1xuICAgIHRpbWUubWlsbGlzZWNvbmQgKz0gZHVyYXRpb24ubWlsbGlzZWNvbmRzIHx8IDA7XG4gICAgcmV0dXJuICQ1YzA1NzFhYTViNmZiNWRhJHZhciRiYWxhbmNlVGltZSh0aW1lKTtcbn1cbmZ1bmN0aW9uICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCQ3ZWQ4N2I2YmMyNTA2NDcwKHRpbWUsIGR1cmF0aW9uKSB7XG4gICAgbGV0IHJlcyA9IHRpbWUuY29weSgpO1xuICAgICQ1YzA1NzFhYTViNmZiNWRhJHZhciRhZGRUaW1lRmllbGRzKHJlcywgZHVyYXRpb24pO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZmUzNGQzYTM4MWNkNzUwMSh0aW1lLCBkdXJhdGlvbikge1xuICAgIHJldHVybiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkN2VkODdiNmJjMjUwNjQ3MCh0aW1lLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkM2UyNTQ0ZTg4YTI1YmZmOChkdXJhdGlvbikpO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGQ1MmNlZDZiYWRmYjlhNGModmFsdWUsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpIHtcbiAgICBsZXQgbXV0YWJsZSA9IHZhbHVlLmNvcHkoKTtcbiAgICBzd2l0Y2goZmllbGQpe1xuICAgICAgICBjYXNlIFwiZXJhXCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IGVyYXMgPSB2YWx1ZS5jYWxlbmRhci5nZXRFcmFzKCk7XG4gICAgICAgICAgICAgICAgbGV0IGVyYUluZGV4ID0gZXJhcy5pbmRleE9mKHZhbHVlLmVyYSk7XG4gICAgICAgICAgICAgICAgaWYgKGVyYUluZGV4IDwgMCkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBlcmE6IFwiICsgdmFsdWUuZXJhKTtcbiAgICAgICAgICAgICAgICBlcmFJbmRleCA9ICQ1YzA1NzFhYTViNmZiNWRhJHZhciRjeWNsZVZhbHVlKGVyYUluZGV4LCBhbW91bnQsIDAsIGVyYXMubGVuZ3RoIC0gMSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvdW5kKTtcbiAgICAgICAgICAgICAgICBtdXRhYmxlLmVyYSA9IGVyYXNbZXJhSW5kZXhdO1xuICAgICAgICAgICAgICAgIC8vIENvbnN0cmFpbiB0aGUgeWVhciBhbmQgb3RoZXIgZmllbGRzIHdpdGhpbiB0aGUgZXJhLCBzbyB0aGUgZXJhIGRvZXNuJ3QgY2hhbmdlIHdoZW4gd2UgYmFsYW5jZSBiZWxvdy5cbiAgICAgICAgICAgICAgICAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkYzRlMmVjYWM0OTM1MWVmMihtdXRhYmxlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBcInllYXJcIjpcbiAgICAgICAgICAgIHZhciBfbXV0YWJsZV9jYWxlbmRhcl9pc0ludmVyc2VFcmEsIF9tdXRhYmxlX2NhbGVuZGFyO1xuICAgICAgICAgICAgaWYgKChfbXV0YWJsZV9jYWxlbmRhcl9pc0ludmVyc2VFcmEgPSAoX211dGFibGVfY2FsZW5kYXIgPSBtdXRhYmxlLmNhbGVuZGFyKS5pc0ludmVyc2VFcmEpID09PSBudWxsIHx8IF9tdXRhYmxlX2NhbGVuZGFyX2lzSW52ZXJzZUVyYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX211dGFibGVfY2FsZW5kYXJfaXNJbnZlcnNlRXJhLmNhbGwoX211dGFibGVfY2FsZW5kYXIsIG11dGFibGUpKSBhbW91bnQgPSAtYW1vdW50O1xuICAgICAgICAgICAgLy8gVGhlIHllYXIgZmllbGQgc2hvdWxkIG5vdCBjeWNsZSB3aXRoaW4gdGhlIGVyYSBhcyB0aGF0IGNhbiBjYXVzZSB3ZWlyZCBiZWhhdmlvciBhZmZlY3Rpbmcgb3RoZXIgZmllbGRzLlxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhbHNvIGFsbG93IHZhbHVlcyA8IDEgc28gdGhhdCBkZWNyZW1lbnRpbmcgZ29lcyB0byB0aGUgcHJldmlvdXMgZXJhLiBJZiB3ZSBnZXQgLUluZmluaXR5IGJhY2tcbiAgICAgICAgICAgIC8vIHdlIGtub3cgd2Ugd3JhcHBlZCBhcm91bmQgYWZ0ZXIgcmVhY2hpbmcgOTk5OSAodGhlIG1heGltdW0pLCBzbyBzZXQgdGhlIHllYXIgYmFjayB0byAxLlxuICAgICAgICAgICAgbXV0YWJsZS55ZWFyID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGN5Y2xlVmFsdWUodmFsdWUueWVhciwgYW1vdW50LCAtSW5maW5pdHksIDk5OTksIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb3VuZCk7XG4gICAgICAgICAgICBpZiAobXV0YWJsZS55ZWFyID09PSAtSW5maW5pdHkpIG11dGFibGUueWVhciA9IDE7XG4gICAgICAgICAgICBpZiAobXV0YWJsZS5jYWxlbmRhci5iYWxhbmNlWWVhck1vbnRoKSBtdXRhYmxlLmNhbGVuZGFyLmJhbGFuY2VZZWFyTW9udGgobXV0YWJsZSwgdmFsdWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtb250aFwiOlxuICAgICAgICAgICAgbXV0YWJsZS5tb250aCA9ICQ1YzA1NzFhYTViNmZiNWRhJHZhciRjeWNsZVZhbHVlKHZhbHVlLm1vbnRoLCBhbW91bnQsIDEsIHZhbHVlLmNhbGVuZGFyLmdldE1vbnRoc0luWWVhcih2YWx1ZSksIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb3VuZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImRheVwiOlxuICAgICAgICAgICAgbXV0YWJsZS5kYXkgPSAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkY3ljbGVWYWx1ZSh2YWx1ZS5kYXksIGFtb3VudCwgMSwgdmFsdWUuY2FsZW5kYXIuZ2V0RGF5c0luTW9udGgodmFsdWUpLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm91bmQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBmaWVsZCBcIiArIGZpZWxkKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlLmNhbGVuZGFyLmJhbGFuY2VEYXRlKSB2YWx1ZS5jYWxlbmRhci5iYWxhbmNlRGF0ZShtdXRhYmxlKTtcbiAgICAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkYzRlMmVjYWM0OTM1MWVmMihtdXRhYmxlKTtcbiAgICByZXR1cm4gbXV0YWJsZTtcbn1cbmZ1bmN0aW9uICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRkZDAyYjNlMDAwN2RmZTI4KHZhbHVlLCBmaWVsZCwgYW1vdW50LCBvcHRpb25zKSB7XG4gICAgbGV0IG11dGFibGUgPSB2YWx1ZS5jb3B5KCk7XG4gICAgc3dpdGNoKGZpZWxkKXtcbiAgICAgICAgY2FzZSBcImhvdXJcIjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsZXQgaG91cnMgPSB2YWx1ZS5ob3VyO1xuICAgICAgICAgICAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBtYXggPSAyMztcbiAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ob3VyQ3ljbGUpID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNQTSA9IGhvdXJzID49IDEyO1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBpc1BNID8gMTIgOiAwO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBpc1BNID8gMjMgOiAxMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbXV0YWJsZS5ob3VyID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGN5Y2xlVmFsdWUoaG91cnMsIGFtb3VudCwgbWluLCBtYXgsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yb3VuZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJtaW51dGVcIjpcbiAgICAgICAgICAgIG11dGFibGUubWludXRlID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGN5Y2xlVmFsdWUodmFsdWUubWludXRlLCBhbW91bnQsIDAsIDU5LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm91bmQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcbiAgICAgICAgICAgIG11dGFibGUuc2Vjb25kID0gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGN5Y2xlVmFsdWUodmFsdWUuc2Vjb25kLCBhbW91bnQsIDAsIDU5LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucm91bmQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJtaWxsaXNlY29uZFwiOlxuICAgICAgICAgICAgbXV0YWJsZS5taWxsaXNlY29uZCA9ICQ1YzA1NzFhYTViNmZiNWRhJHZhciRjeWNsZVZhbHVlKHZhbHVlLm1pbGxpc2Vjb25kLCBhbW91bnQsIDAsIDk5OSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvdW5kKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZmllbGQgXCIgKyBmaWVsZCk7XG4gICAgfVxuICAgIHJldHVybiBtdXRhYmxlO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJGN5Y2xlVmFsdWUodmFsdWUsIGFtb3VudCwgbWluLCBtYXgsIHJvdW5kID0gZmFsc2UpIHtcbiAgICBpZiAocm91bmQpIHtcbiAgICAgICAgdmFsdWUgKz0gTWF0aC5zaWduKGFtb3VudCk7XG4gICAgICAgIGlmICh2YWx1ZSA8IG1pbikgdmFsdWUgPSBtYXg7XG4gICAgICAgIGxldCBkaXYgPSBNYXRoLmFicyhhbW91bnQpO1xuICAgICAgICBpZiAoYW1vdW50ID4gMCkgdmFsdWUgPSBNYXRoLmNlaWwodmFsdWUgLyBkaXYpICogZGl2O1xuICAgICAgICBlbHNlIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSAvIGRpdikgKiBkaXY7XG4gICAgICAgIGlmICh2YWx1ZSA+IG1heCkgdmFsdWUgPSBtaW47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgKz0gYW1vdW50O1xuICAgICAgICBpZiAodmFsdWUgPCBtaW4pIHZhbHVlID0gbWF4IC0gKG1pbiAtIHZhbHVlIC0gMSk7XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID4gbWF4KSB2YWx1ZSA9IG1pbiArICh2YWx1ZSAtIG1heCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkOTZiMWQyODM0OTI3NDYzNyhkYXRlVGltZSwgZHVyYXRpb24pIHtcbiAgICBsZXQgbXM7XG4gICAgaWYgKGR1cmF0aW9uLnllYXJzICE9IG51bGwgJiYgZHVyYXRpb24ueWVhcnMgIT09IDAgfHwgZHVyYXRpb24ubW9udGhzICE9IG51bGwgJiYgZHVyYXRpb24ubW9udGhzICE9PSAwIHx8IGR1cmF0aW9uLndlZWtzICE9IG51bGwgJiYgZHVyYXRpb24ud2Vla3MgIT09IDAgfHwgZHVyYXRpb24uZGF5cyAhPSBudWxsICYmIGR1cmF0aW9uLmRheXMgIT09IDApIHtcbiAgICAgICAgbGV0IHJlcyA9ICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRlMTZkODUyMGFmNDRhMDk2KCgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjIxZTBiMTI0ZTIyNDQ4NCkoZGF0ZVRpbWUpLCB7XG4gICAgICAgICAgICB5ZWFyczogZHVyYXRpb24ueWVhcnMsXG4gICAgICAgICAgICBtb250aHM6IGR1cmF0aW9uLm1vbnRocyxcbiAgICAgICAgICAgIHdlZWtzOiBkdXJhdGlvbi53ZWVrcyxcbiAgICAgICAgICAgIGRheXM6IGR1cmF0aW9uLmRheXNcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIENoYW5naW5nIHRoZSBkYXRlIG1heSBjaGFuZ2UgdGhlIHRpbWV6b25lIG9mZnNldCwgc28gd2UgbmVlZCB0byByZWNvbXB1dGVcbiAgICAgICAgLy8gdXNpbmcgdGhlICdjb21wYXRpYmxlJyBkaXNhbWJpZ3VhdGlvbi5cbiAgICAgICAgbXMgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMpKHJlcywgZGF0ZVRpbWUudGltZVpvbmUpO1xuICAgIH0gZWxzZSAvLyBPdGhlcndpc2UsIHByZXNlcnZlIHRoZSBvZmZzZXQgb2YgdGhlIG9yaWdpbmFsIGRhdGUuXG4gICAgbXMgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGJkNGZiMmJjOGJiMDZmYikoZGF0ZVRpbWUpIC0gZGF0ZVRpbWUub2Zmc2V0O1xuICAgIC8vIFBlcmZvcm0gdGltZSBtYW5pcHVsYXRpb24gaW4gbWlsbGlzZWNvbmRzIHJhdGhlciB0aGFuIG9uIHRoZSBvcmlnaW5hbCB0aW1lIGZpZWxkcyB0byBhY2NvdW50IGZvciBEU1QuXG4gICAgLy8gRm9yIGV4YW1wbGUsIGFkZGluZyBvbmUgaG91ciBkdXJpbmcgYSBEU1QgdHJhbnNpdGlvbiBtYXkgcmVzdWx0IGluIHRoZSBob3VyIGZpZWxkIHN0YXlpbmcgdGhlIHNhbWUgb3JcbiAgICAvLyBza2lwcGluZyBhbiBob3VyLiBUaGlzIHJlc3VsdHMgaW4gdGhlIG9mZnNldCBmaWVsZCBjaGFuZ2luZyB2YWx1ZSBpbnN0ZWFkIG9mIHRoZSBzcGVjaWZpZWQgZmllbGQuXG4gICAgbXMgKz0gZHVyYXRpb24ubWlsbGlzZWNvbmRzIHx8IDA7XG4gICAgbXMgKz0gKGR1cmF0aW9uLnNlY29uZHMgfHwgMCkgKiAxMDAwO1xuICAgIG1zICs9IChkdXJhdGlvbi5taW51dGVzIHx8IDApICogNjAwMDA7XG4gICAgbXMgKz0gKGR1cmF0aW9uLmhvdXJzIHx8IDApICogMzYwMDAwMDtcbiAgICBsZXQgcmVzID0gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQxYjk2NjkyYTFiYTA0MmFjKShtcywgZGF0ZVRpbWUudGltZVpvbmUpO1xuICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpKHJlcywgZGF0ZVRpbWUuY2FsZW5kYXIpO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDY4MTRjYWFjMzRjYTAzYzcoZGF0ZVRpbWUsIGR1cmF0aW9uKSB7XG4gICAgcmV0dXJuICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCQ5NmIxZDI4MzQ5Mjc0NjM3KGRhdGVUaW1lLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkM2UyNTQ0ZTg4YTI1YmZmOChkdXJhdGlvbikpO1xufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDlhMjk3ZDExMWZjODZiNzkoZGF0ZVRpbWUsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpIHtcbiAgICAvLyBGb3IgZGF0ZSBmaWVsZHMsIHdlIHdhbnQgdGhlIHRpbWUgdG8gcmVtYWluIGNvbnNpc3RlbnQgYW5kIHRoZSBVVEMgb2Zmc2V0IHRvIHBvdGVudGlhbGx5IGNoYW5nZSB0byBhY2NvdW50IGZvciBEU1QgY2hhbmdlcy5cbiAgICAvLyBGb3IgdGltZSBmaWVsZHMsIHdlIHdhbnQgdGhlIHRpbWUgdG8gY2hhbmdlIGJ5IHRoZSBhbW91bnQgZ2l2ZW4uIFRoaXMgbWF5IHJlc3VsdCBpbiB0aGUgaG91ciBmaWVsZCBzdGF5aW5nIHRoZSBzYW1lLCBidXQgdGhlIFVUQ1xuICAgIC8vIG9mZnNldCBjaGFuZ2luZyBpbiB0aGUgY2FzZSBvZiBhIGJhY2t3YXJkIERTVCB0cmFuc2l0aW9uLCBvciBza2lwcGluZyBhbiBob3VyIGluIHRoZSBjYXNlIG9mIGEgZm9yd2FyZCBEU1QgdHJhbnNpdGlvbi5cbiAgICBzd2l0Y2goZmllbGQpe1xuICAgICAgICBjYXNlIFwiaG91clwiOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBtaW4gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBtYXggPSAyMztcbiAgICAgICAgICAgICAgICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ob3VyQ3ljbGUpID09PSAxMikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaXNQTSA9IGRhdGVUaW1lLmhvdXIgPj0gMTI7XG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGlzUE0gPyAxMiA6IDA7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGlzUE0gPyAyMyA6IDExO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBob3VyIG1heSBiZSBhZmZlY3RlZCBieSBkYXlsaWdodCBzYXZpbmcgdGltZS5cbiAgICAgICAgICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaXQgbWlnaHQganVtcCBmb3J3YXJkIGF0IG1pZG5pZ2h0LCBhbmQgc2tpcCAxYW0uXG4gICAgICAgICAgICAgICAgLy8gT3IgaXQgbWlnaHQgZW5kIGF0IG1pZG5pZ2h0IGFuZCByZXBlYXQgdGhlIDExcG0gaG91ci4gVG8gaGFuZGxlIHRoaXMsIHdlIGdldFxuICAgICAgICAgICAgICAgIC8vIHRoZSBwb3NzaWJsZSBhYnNvbHV0ZSB0aW1lcyBmb3IgdGhlIG1pbiBhbmQgbWF4LCBhbmQgZmluZCB0aGUgbWF4aW11bSByYW5nZVxuICAgICAgICAgICAgICAgIC8vIHRoYXQgaXMgd2l0aGluIHRoZSBjdXJyZW50IGRheS5cbiAgICAgICAgICAgICAgICBsZXQgcGxhaW5EYXRlVGltZSA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjIxZTBiMTI0ZTIyNDQ4NCkoZGF0ZVRpbWUpO1xuICAgICAgICAgICAgICAgIGxldCBtaW5EYXRlID0gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiNGEwMzZhZjNmYzBiMDMyKSgkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZTVkNWUxYzE4MjJiNmU1NihwbGFpbkRhdGVUaW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdXI6IG1pblxuICAgICAgICAgICAgICAgIH0pLCBuZXcgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSgpKTtcbiAgICAgICAgICAgICAgICBsZXQgbWluQWJzb2x1dGUgPSBbXG4gICAgICAgICAgICAgICAgICAgICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTEwN2M4MmY5NDUxOGY1YykobWluRGF0ZSwgZGF0ZVRpbWUudGltZVpvbmUsIFwiZWFybGllclwiKSxcbiAgICAgICAgICAgICAgICAgICAgKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1MTA3YzgyZjk0NTE4ZjVjKShtaW5EYXRlLCBkYXRlVGltZS50aW1lWm9uZSwgXCJsYXRlclwiKVxuICAgICAgICAgICAgICAgIF0uZmlsdGVyKChtcyk9PigwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMWI5NjY5MmExYmEwNDJhYykobXMsIGRhdGVUaW1lLnRpbWVab25lKS5kYXkgPT09IG1pbkRhdGUuZGF5KVswXTtcbiAgICAgICAgICAgICAgICBsZXQgbWF4RGF0ZSA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjRhMDM2YWYzZmMwYjAzMikoJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGU1ZDVlMWMxODIyYjZlNTYocGxhaW5EYXRlVGltZSwge1xuICAgICAgICAgICAgICAgICAgICBob3VyOiBtYXhcbiAgICAgICAgICAgICAgICB9KSwgbmV3ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkODBlZTYyNDVlYzRmMjllYykoKSk7XG4gICAgICAgICAgICAgICAgbGV0IG1heEFic29sdXRlID0gW1xuICAgICAgICAgICAgICAgICAgICAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMpKG1heERhdGUsIGRhdGVUaW1lLnRpbWVab25lLCBcImVhcmxpZXJcIiksXG4gICAgICAgICAgICAgICAgICAgICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTEwN2M4MmY5NDUxOGY1YykobWF4RGF0ZSwgZGF0ZVRpbWUudGltZVpvbmUsIFwibGF0ZXJcIilcbiAgICAgICAgICAgICAgICBdLmZpbHRlcigobXMpPT4oMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMpKG1zLCBkYXRlVGltZS50aW1lWm9uZSkuZGF5ID09PSBtYXhEYXRlLmRheSkucG9wKCk7XG4gICAgICAgICAgICAgICAgLy8gU2luY2UgaG91cnMgbWF5IHJlcGVhdCwgd2UgbmVlZCB0byBvcGVyYXRlIG9uIHRoZSBhYnNvbHV0ZSB0aW1lIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGRvbmUgaW4gaG91cnMgZnJvbSB0aGUgVW5peCBlcG9jaCBzbyB0aGF0IGN5Y2xlVmFsdWUgd29ya3MgY29ycmVjdGx5LFxuICAgICAgICAgICAgICAgIC8vIGFuZCB0aGVuIGNvbnZlcnRlZCBiYWNrIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgICAgICAgICAgICBsZXQgbXMgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGJkNGZiMmJjOGJiMDZmYikoZGF0ZVRpbWUpIC0gZGF0ZVRpbWUub2Zmc2V0O1xuICAgICAgICAgICAgICAgIGxldCBob3VycyA9IE1hdGguZmxvb3IobXMgLyAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkT05FX0hPVVIpO1xuICAgICAgICAgICAgICAgIGxldCByZW1haW5kZXIgPSBtcyAlICQ1YzA1NzFhYTViNmZiNWRhJHZhciRPTkVfSE9VUjtcbiAgICAgICAgICAgICAgICBtcyA9ICQ1YzA1NzFhYTViNmZiNWRhJHZhciRjeWNsZVZhbHVlKGhvdXJzLCBhbW91bnQsIE1hdGguZmxvb3IobWluQWJzb2x1dGUgLyAkNWMwNTcxYWE1YjZmYjVkYSR2YXIkT05FX0hPVVIpLCBNYXRoLmZsb29yKG1heEFic29sdXRlIC8gJDVjMDU3MWFhNWI2ZmI1ZGEkdmFyJE9ORV9IT1VSKSwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnJvdW5kKSAqICQ1YzA1NzFhYTViNmZiNWRhJHZhciRPTkVfSE9VUiArIHJlbWFpbmRlcjtcbiAgICAgICAgICAgICAgICAvLyBOb3cgY29tcHV0ZSB0aGUgbmV3IHRpbWV6b25lIG9mZnNldCwgYW5kIGNvbnZlcnQgdGhlIGFic29sdXRlIHRpbWUgYmFjayB0byBsb2NhbCB0aW1lLlxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpKCgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMWI5NjY5MmExYmEwNDJhYykobXMsIGRhdGVUaW1lLnRpbWVab25lKSwgZGF0ZVRpbWUuY2FsZW5kYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICBjYXNlIFwibWludXRlXCI6XG4gICAgICAgIGNhc2UgXCJzZWNvbmRcIjpcbiAgICAgICAgY2FzZSBcIm1pbGxpc2Vjb25kXCI6XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXR1cm4gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGRkMDJiM2UwMDA3ZGZlMjgoZGF0ZVRpbWUsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiZXJhXCI6XG4gICAgICAgIGNhc2UgXCJ5ZWFyXCI6XG4gICAgICAgIGNhc2UgXCJtb250aFwiOlxuICAgICAgICBjYXNlIFwiZGF5XCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbGV0IHJlcyA9ICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRkNTJjZWQ2YmFkZmI5YTRjKCgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjIxZTBiMTI0ZTIyNDQ4NCkoZGF0ZVRpbWUpLCBmaWVsZCwgYW1vdW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBsZXQgbXMgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUxMDdjODJmOTQ1MThmNWMpKHJlcywgZGF0ZVRpbWUudGltZVpvbmUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGI0YTAzNmFmM2ZjMGIwMzIpKCgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMWI5NjY5MmExYmEwNDJhYykobXMsIGRhdGVUaW1lLnRpbWVab25lKSwgZGF0ZVRpbWUuY2FsZW5kYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZmllbGQgXCIgKyBmaWVsZCk7XG4gICAgfVxufVxuZnVuY3Rpb24gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDMxYjU0MzBlYjE4YmU0ZjgoZGF0ZVRpbWUsIGZpZWxkcywgZGlzYW1iaWd1YXRpb24pIHtcbiAgICAvLyBTZXQgdGhlIGRhdGUvdGltZSBmaWVsZHMsIGFuZCByZWNvbXB1dGUgdGhlIFVUQyBvZmZzZXQgdG8gYWNjb3VudCBmb3IgRFNUIGNoYW5nZXMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIHZhbGlkYXRlIGJ5IGNvbnZlcnRpbmcgYmFjayB0byBhIGxvY2FsIHRpbWUgaW4gY2FzZSBob3VycyBhcmUgc2tpcHBlZCBkdXJpbmcgZm9yd2FyZCBEU1QgdHJhbnNpdGlvbnMuXG4gICAgbGV0IHBsYWluRGF0ZVRpbWUgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGIyMWUwYjEyNGUyMjQ0ODQpKGRhdGVUaW1lKTtcbiAgICBsZXQgcmVzID0gJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGU1ZDVlMWMxODIyYjZlNTYoJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGFkYWE0Y2Y3ZWYxYjY1YmUocGxhaW5EYXRlVGltZSwgZmllbGRzKSwgZmllbGRzKTtcbiAgICAvLyBJZiB0aGUgcmVzdWx0aW5nIHBsYWluIGRhdGUgdGltZSB2YWx1ZXMgYXJlIGVxdWFsLCByZXR1cm4gdGhlIG9yaWdpbmFsIHRpbWUuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjaGFuZ2UgdGhlIG9mZnNldCB3aGVuIHNldHRpbmcgdGhlIHRpbWUgdG8gdGhlIHNhbWUgdmFsdWUuXG4gICAgaWYgKHJlcy5jb21wYXJlKHBsYWluRGF0ZVRpbWUpID09PSAwKSByZXR1cm4gZGF0ZVRpbWU7XG4gICAgbGV0IG1zID0gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ1MTA3YzgyZjk0NTE4ZjVjKShyZXMsIGRhdGVUaW1lLnRpbWVab25lLCBkaXNhbWJpZ3VhdGlvbik7XG4gICAgcmV0dXJuICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYjRhMDM2YWYzZmMwYjAzMikoKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQxYjk2NjkyYTFiYTA0MmFjKShtcywgZGF0ZVRpbWUudGltZVpvbmUpLCBkYXRlVGltZS5jYWxlbmRhcik7XG59XG5cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gXG5cblxuXG5jb25zdCAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkVElNRV9SRSA9IC9eKFxcZHsyfSkoPzo6KFxcZHsyfSkpPyg/OjooXFxkezJ9KSk/KFxcLlxcZCspPyQvO1xuY29uc3QgJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJERBVEVfUkUgPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pJC87XG5jb25zdCAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkREFURV9USU1FX1JFID0gL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KSg/OlQoXFxkezJ9KSk/KD86OihcXGR7Mn0pKT8oPzo6KFxcZHsyfSkpPyhcXC5cXGQrKT8kLztcbmNvbnN0ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRaT05FRF9EQVRFX1RJTUVfUkUgPSAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pKD86VChcXGR7Mn0pKT8oPzo6KFxcZHsyfSkpPyg/OjooXFxkezJ9KSk/KFxcLlxcZCspPyg/OihbKy1dXFxkezJ9KSg/Ojo/KFxcZHsyfSkpPyk/XFxbKC4qPylcXF0kLztcbmNvbnN0ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRBQlNPTFVURV9SRSA9IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkoPzpUKFxcZHsyfSkpPyg/OjooXFxkezJ9KSk/KD86OihcXGR7Mn0pKT8oXFwuXFxkKyk/KD86KD86KFsrLV1cXGR7Mn0pKD86Oj8oXFxkezJ9KSk/KXxaKSQvO1xuY29uc3QgJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJERBVEVfVElNRV9EVVJBVElPTl9SRSA9IC9eKCg/PG5lZ2F0aXZlPi0pfFxcKyk/UCgoPzx5ZWFycz5cXGQqKVkpPygoPzxtb250aHM+XFxkKilNKT8oKD88d2Vla3M+XFxkKilXKT8oKD88ZGF5cz5cXGQqKUQpPygoPzx0aW1lPlQpKCg/PGhvdXJzPlxcZCpbLixdP1xcZHsxLDl9KUgpPygoPzxtaW51dGVzPlxcZCpbLixdP1xcZHsxLDl9KU0pPygoPzxzZWNvbmRzPlxcZCpbLixdP1xcZHsxLDl9KVMpPyk/JC87XG5jb25zdCAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcmVxdWlyZWREdXJhdGlvblRpbWVHcm91cHMgPSBbXG4gICAgXCJob3Vyc1wiLFxuICAgIFwibWludXRlc1wiLFxuICAgIFwic2Vjb25kc1wiXG5dO1xuY29uc3QgJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHJlcXVpcmVkRHVyYXRpb25Hcm91cHMgPSBbXG4gICAgXCJ5ZWFyc1wiLFxuICAgIFwibW9udGhzXCIsXG4gICAgXCJ3ZWVrc1wiLFxuICAgIFwiZGF5c1wiLFxuICAgIC4uLiQ0YzMyZTJkOThlNWE1MTM0JHZhciRyZXF1aXJlZER1cmF0aW9uVGltZUdyb3Vwc1xuXTtcbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRjOTY5OGVjN2YwNWEwN2UxKHZhbHVlKSB7XG4gICAgbGV0IG0gPSB2YWx1ZS5tYXRjaCgkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkVElNRV9SRSk7XG4gICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElTTyA4NjAxIHRpbWUgc3RyaW5nOiBcIiArIHZhbHVlKTtcbiAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkNjgwZWExOTZlZmZjZTVmKSgkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVsxXSwgMCwgMjMpLCBtWzJdID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bMl0sIDAsIDU5KSA6IDAsIG1bM10gPyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVszXSwgMCwgNTkpIDogMCwgbVs0XSA/ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzRdLCAwLCBJbmZpbml0eSkgKiAxMDAwIDogMCk7XG59XG5mdW5jdGlvbiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkNmI4NjIxNjBkMjk1YzhlKHZhbHVlKSB7XG4gICAgbGV0IG0gPSB2YWx1ZS5tYXRjaCgkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkREFURV9SRSk7XG4gICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElTTyA4NjAxIGRhdGUgc3RyaW5nOiBcIiArIHZhbHVlKTtcbiAgICBsZXQgZGF0ZSA9IG5ldyAoMCwgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYpKCQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzFdLCAwLCA5OTk5KSwgJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bMl0sIDEsIDEyKSwgMSk7XG4gICAgZGF0ZS5kYXkgPSAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVszXSwgMCwgZGF0ZS5jYWxlbmRhci5nZXREYXlzSW5Nb250aChkYXRlKSk7XG4gICAgcmV0dXJuIGRhdGU7XG59XG5mdW5jdGlvbiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkNTg4OTM3YmNkNjBhZGU1NSh2YWx1ZSkge1xuICAgIGxldCBtID0gdmFsdWUubWF0Y2goJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJERBVEVfVElNRV9SRSk7XG4gICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElTTyA4NjAxIGRhdGUgdGltZSBzdHJpbmc6IFwiICsgdmFsdWUpO1xuICAgIGxldCBkYXRlID0gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkY2E4NzFlOGRiYjgwOTY2ZikoJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bMV0sIDEsIDk5OTkpLCAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVsyXSwgMSwgMTIpLCAxLCBtWzRdID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bNF0sIDAsIDIzKSA6IDAsIG1bNV0gPyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVs1XSwgMCwgNTkpIDogMCwgbVs2XSA/ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzZdLCAwLCA1OSkgOiAwLCBtWzddID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bN10sIDAsIEluZmluaXR5KSAqIDEwMDAgOiAwKTtcbiAgICBkYXRlLmRheSA9ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzNdLCAwLCBkYXRlLmNhbGVuZGFyLmdldERheXNJbk1vbnRoKGRhdGUpKTtcbiAgICByZXR1cm4gZGF0ZTtcbn1cbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRmZDc4OTNmMDZlOTJhNmE0KHZhbHVlLCBkaXNhbWJpZ3VhdGlvbikge1xuICAgIGxldCBtID0gdmFsdWUubWF0Y2goJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJFpPTkVEX0RBVEVfVElNRV9SRSk7XG4gICAgaWYgKCFtKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIElTTyA4NjAxIGRhdGUgdGltZSBzdHJpbmc6IFwiICsgdmFsdWUpO1xuICAgIGxldCBkYXRlID0gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkZDNiNzI4OGU3OTk0ZWRlYSkoJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bMV0sIDEsIDk5OTkpLCAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVsyXSwgMSwgMTIpLCAxLCBtWzEwXSwgMCwgbVs0XSA/ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzRdLCAwLCAyMykgOiAwLCBtWzVdID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bNV0sIDAsIDU5KSA6IDAsIG1bNl0gPyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVs2XSwgMCwgNTkpIDogMCwgbVs3XSA/ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzddLCAwLCBJbmZpbml0eSkgKiAxMDAwIDogMCk7XG4gICAgZGF0ZS5kYXkgPSAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVszXSwgMCwgZGF0ZS5jYWxlbmRhci5nZXREYXlzSW5Nb250aChkYXRlKSk7XG4gICAgbGV0IHBsYWluRGF0ZVRpbWUgPSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGIyMWUwYjEyNGUyMjQ0ODQpKGRhdGUpO1xuICAgIGxldCBtcztcbiAgICBpZiAobVs4XSkge1xuICAgICAgICB2YXIgX21fO1xuICAgICAgICBkYXRlLm9mZnNldCA9ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzhdLCAtMjMsIDIzKSAqIDM2MDAwMDAgKyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIoKF9tXyA9IG1bOV0pICE9PSBudWxsICYmIF9tXyAhPT0gdm9pZCAwID8gX21fIDogXCIwXCIsIDAsIDU5KSAqIDYwMDAwO1xuICAgICAgICBtcyA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkYmQ0ZmIyYmM4YmIwNmZiKShkYXRlKSAtIGRhdGUub2Zmc2V0O1xuICAgICAgICAvLyBWYWxpZGF0ZSBvZmZzZXQgYWdhaW5zdCBwYXJzZWQgZGF0ZS5cbiAgICAgICAgbGV0IGFic29sdXRlcyA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkMTM2ZjM4ZWZlN2NhZjU0OSkocGxhaW5EYXRlVGltZSwgZGF0ZS50aW1lWm9uZSk7XG4gICAgICAgIGlmICghYWJzb2x1dGVzLmluY2x1ZGVzKG1zKSkgdGhyb3cgbmV3IEVycm9yKGBPZmZzZXQgJHskNGMzMmUyZDk4ZTVhNTEzNCR2YXIkb2Zmc2V0VG9TdHJpbmcoZGF0ZS5vZmZzZXQpfSBpcyBpbnZhbGlkIGZvciAkeyQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ0MjIzZGUxNDcwOGFkYzYzKGRhdGUpfSBpbiAke2RhdGUudGltZVpvbmV9YCk7XG4gICAgfSBlbHNlIC8vIENvbnZlcnQgdG8gYWJzb2x1dGUgYW5kIGJhY2sgdG8gZml4IGludmFsaWQgdGltZXMgZHVlIHRvIERTVC5cbiAgICBtcyA9ICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkNTEwN2M4MmY5NDUxOGY1YykoKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiMjFlMGIxMjRlMjI0NDg0KShwbGFpbkRhdGVUaW1lKSwgZGF0ZS50aW1lWm9uZSwgZGlzYW1iaWd1YXRpb24pO1xuICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDFiOTY2OTJhMWJhMDQyYWMpKG1zLCBkYXRlLnRpbWVab25lKTtcbn1cbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ1YWRmZGFiMDUxNjhjMjE5KHZhbHVlLCB0aW1lWm9uZSkge1xuICAgIGxldCBtID0gdmFsdWUubWF0Y2goJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJEFCU09MVVRFX1JFKTtcbiAgICBpZiAoIW0pIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSVNPIDg2MDEgZGF0ZSB0aW1lIHN0cmluZzogXCIgKyB2YWx1ZSk7XG4gICAgbGV0IGRhdGUgPSBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRkM2I3Mjg4ZTc5OTRlZGVhKSgkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVsxXSwgMSwgOTk5OSksICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzJdLCAxLCAxMiksIDEsIHRpbWVab25lLCAwLCBtWzRdID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bNF0sIDAsIDIzKSA6IDAsIG1bNV0gPyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIobVs1XSwgMCwgNTkpIDogMCwgbVs2XSA/ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzZdLCAwLCA1OSkgOiAwLCBtWzddID8gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKG1bN10sIDAsIEluZmluaXR5KSAqIDEwMDAgOiAwKTtcbiAgICBkYXRlLmRheSA9ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzNdLCAwLCBkYXRlLmNhbGVuZGFyLmdldERheXNJbk1vbnRoKGRhdGUpKTtcbiAgICB2YXIgX21fO1xuICAgIGlmIChtWzhdKSBkYXRlLm9mZnNldCA9ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihtWzhdLCAtMjMsIDIzKSAqIDM2MDAwMDAgKyAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcGFyc2VOdW1iZXIoKF9tXyA9IG1bOV0pICE9PSBudWxsICYmIF9tXyAhPT0gdm9pZCAwID8gX21fIDogXCIwXCIsIDAsIDU5KSAqIDYwMDAwO1xuICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDUzOGIwMDAzM2NjMTFjNzUpKGRhdGUsIHRpbWVab25lKTtcbn1cbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ4ZTM4NDQzMjM2MmVkMGYwKHZhbHVlKSB7XG4gICAgcmV0dXJuICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ1YWRmZGFiMDUxNjhjMjE5KHZhbHVlLCAoMCwgJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGFhOGI0MTczNWFmY2FiZDIpKCkpO1xufVxuZnVuY3Rpb24gJDRjMzJlMmQ5OGU1YTUxMzQkdmFyJHBhcnNlTnVtYmVyKHZhbHVlLCBtaW4sIG1heCkge1xuICAgIGxldCB2YWwgPSBOdW1iZXIodmFsdWUpO1xuICAgIGlmICh2YWwgPCBtaW4gfHwgdmFsID4gbWF4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgVmFsdWUgb3V0IG9mIHJhbmdlOiAke21pbn0gPD0gJHt2YWx9IDw9ICR7bWF4fWApO1xuICAgIHJldHVybiB2YWw7XG59XG5mdW5jdGlvbiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkZjU5ZGVlODIyNDhmNWFkNCh0aW1lKSB7XG4gICAgcmV0dXJuIGAke1N0cmluZyh0aW1lLmhvdXIpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHtTdHJpbmcodGltZS5taW51dGUpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHtTdHJpbmcodGltZS5zZWNvbmQpLnBhZFN0YXJ0KDIsIFwiMFwiKX0ke3RpbWUubWlsbGlzZWNvbmQgPyBTdHJpbmcodGltZS5taWxsaXNlY29uZCAvIDEwMDApLnNsaWNlKDEpIDogXCJcIn1gO1xufVxuZnVuY3Rpb24gJDRjMzJlMmQ5OGU1YTUxMzQkZXhwb3J0JDYwZGZkNzRhYTk2NzkxYmQoZGF0ZSkge1xuICAgIGxldCBncmVnb3JpYW5EYXRlID0gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCRiNGEwMzZhZjNmYzBiMDMyKShkYXRlLCBuZXcgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSgpKTtcbiAgICByZXR1cm4gYCR7U3RyaW5nKGdyZWdvcmlhbkRhdGUueWVhcikucGFkU3RhcnQoNCwgXCIwXCIpfS0ke1N0cmluZyhncmVnb3JpYW5EYXRlLm1vbnRoKS5wYWRTdGFydCgyLCBcIjBcIil9LSR7U3RyaW5nKGdyZWdvcmlhbkRhdGUuZGF5KS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbn1cbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ0MjIzZGUxNDcwOGFkYzYzKGRhdGUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIGAkeyQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ2MGRmZDc0YWE5Njc5MWJkKGRhdGUpfVQkeyQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRmNTlkZWU4MjI0OGY1YWQ0KGRhdGUpfWA7XG59XG5mdW5jdGlvbiAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkb2Zmc2V0VG9TdHJpbmcob2Zmc2V0KSB7XG4gICAgbGV0IHNpZ24gPSBNYXRoLnNpZ24ob2Zmc2V0KSA8IDAgPyBcIi1cIiA6IFwiK1wiO1xuICAgIG9mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gICAgbGV0IG9mZnNldEhvdXJzID0gTWF0aC5mbG9vcihvZmZzZXQgLyAzNjAwMDAwKTtcbiAgICBsZXQgb2Zmc2V0TWludXRlcyA9IG9mZnNldCAlIDM2MDAwMDAgLyA2MDAwMDtcbiAgICByZXR1cm4gYCR7c2lnbn0ke1N0cmluZyhvZmZzZXRIb3VycykucGFkU3RhcnQoMiwgXCIwXCIpfToke1N0cmluZyhvZmZzZXRNaW51dGVzKS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbn1cbmZ1bmN0aW9uICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRiZjc5ZjFlYmY0YjE4NzkyKGRhdGUpIHtcbiAgICByZXR1cm4gYCR7JDRjMzJlMmQ5OGU1YTUxMzQkZXhwb3J0JDQyMjNkZTE0NzA4YWRjNjMoZGF0ZSl9JHskNGMzMmUyZDk4ZTVhNTEzNCR2YXIkb2Zmc2V0VG9TdHJpbmcoZGF0ZS5vZmZzZXQpfVske2RhdGUudGltZVpvbmV9XWA7XG59XG5mdW5jdGlvbiAkNGMzMmUyZDk4ZTVhNTEzNCRleHBvcnQkZWNhZTgyOWJiMzc0N2VhNih2YWx1ZSkge1xuICAgIHZhciBfbWF0Y2hfZ3JvdXBzLCBfbWF0Y2hfZ3JvdXBzMSwgX21hdGNoX2dyb3VwczIsIF9tYXRjaF9ncm91cHMzLCBfbWF0Y2hfZ3JvdXBzNCwgX21hdGNoX2dyb3VwczUsIF9tYXRjaF9ncm91cHM2LCBfbWF0Y2hfZ3JvdXBzNywgX21hdGNoX2dyb3Vwczg7XG4gICAgY29uc3QgbWF0Y2ggPSB2YWx1ZS5tYXRjaCgkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkREFURV9USU1FX0RVUkFUSU9OX1JFKTtcbiAgICBpZiAoIW1hdGNoKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSVNPIDg2MDEgRHVyYXRpb24gc3RyaW5nOiAke3ZhbHVlfWApO1xuICAgIGNvbnN0IHBhcnNlRHVyYXRpb25Hcm91cCA9IChncm91cCwgaXNOZWdhdGl2ZSwgbWluLCBtYXgpPT57XG4gICAgICAgIGlmICghZ3JvdXApIHJldHVybiAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2lnbiA9IGlzTmVnYXRpdmUgPyAtMSA6IDE7XG4gICAgICAgICAgICByZXR1cm4gc2lnbiAqICQ0YzMyZTJkOThlNWE1MTM0JHZhciRwYXJzZU51bWJlcihncm91cC5yZXBsYWNlKFwiLFwiLCBcIi5cIiksIG1pbiwgbWF4KTtcbiAgICAgICAgfSBjYXRjaCAge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIElTTyA4NjAxIER1cmF0aW9uIHN0cmluZzogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaXNOZWdhdGl2ZSA9ICEhKChfbWF0Y2hfZ3JvdXBzID0gbWF0Y2guZ3JvdXBzKSA9PT0gbnVsbCB8fCBfbWF0Y2hfZ3JvdXBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWF0Y2hfZ3JvdXBzLm5lZ2F0aXZlKTtcbiAgICBjb25zdCBoYXNSZXF1aXJlZEdyb3VwcyA9ICQ0YzMyZTJkOThlNWE1MTM0JHZhciRyZXF1aXJlZER1cmF0aW9uR3JvdXBzLnNvbWUoKGdyb3VwKT0+e1xuICAgICAgICB2YXIgX21hdGNoX2dyb3VwcztcbiAgICAgICAgcmV0dXJuIChfbWF0Y2hfZ3JvdXBzID0gbWF0Y2guZ3JvdXBzKSA9PT0gbnVsbCB8fCBfbWF0Y2hfZ3JvdXBzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWF0Y2hfZ3JvdXBzW2dyb3VwXTtcbiAgICB9KTtcbiAgICBpZiAoIWhhc1JlcXVpcmVkR3JvdXBzKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSVNPIDg2MDEgRHVyYXRpb24gc3RyaW5nOiAke3ZhbHVlfWApO1xuICAgIGNvbnN0IGR1cmF0aW9uU3RyaW5nSW5jbHVkZXNUaW1lID0gKF9tYXRjaF9ncm91cHMxID0gbWF0Y2guZ3JvdXBzKSA9PT0gbnVsbCB8fCBfbWF0Y2hfZ3JvdXBzMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21hdGNoX2dyb3VwczEudGltZTtcbiAgICBpZiAoZHVyYXRpb25TdHJpbmdJbmNsdWRlc1RpbWUpIHtcbiAgICAgICAgY29uc3QgaGFzUmVxdWlyZWREdXJhdGlvblRpbWVHcm91cHMgPSAkNGMzMmUyZDk4ZTVhNTEzNCR2YXIkcmVxdWlyZWREdXJhdGlvblRpbWVHcm91cHMuc29tZSgoZ3JvdXApPT57XG4gICAgICAgICAgICB2YXIgX21hdGNoX2dyb3VwcztcbiAgICAgICAgICAgIHJldHVybiAoX21hdGNoX2dyb3VwcyA9IG1hdGNoLmdyb3VwcykgPT09IG51bGwgfHwgX21hdGNoX2dyb3VwcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21hdGNoX2dyb3Vwc1tncm91cF07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWhhc1JlcXVpcmVkRHVyYXRpb25UaW1lR3JvdXBzKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSVNPIDg2MDEgRHVyYXRpb24gc3RyaW5nOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBjb25zdCBkdXJhdGlvbiA9IHtcbiAgICAgICAgeWVhcnM6IHBhcnNlRHVyYXRpb25Hcm91cCgoX21hdGNoX2dyb3VwczIgPSBtYXRjaC5ncm91cHMpID09PSBudWxsIHx8IF9tYXRjaF9ncm91cHMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWF0Y2hfZ3JvdXBzMi55ZWFycywgaXNOZWdhdGl2ZSwgMCwgOTk5OSksXG4gICAgICAgIG1vbnRoczogcGFyc2VEdXJhdGlvbkdyb3VwKChfbWF0Y2hfZ3JvdXBzMyA9IG1hdGNoLmdyb3VwcykgPT09IG51bGwgfHwgX21hdGNoX2dyb3VwczMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tYXRjaF9ncm91cHMzLm1vbnRocywgaXNOZWdhdGl2ZSwgMCwgMTIpLFxuICAgICAgICB3ZWVrczogcGFyc2VEdXJhdGlvbkdyb3VwKChfbWF0Y2hfZ3JvdXBzNCA9IG1hdGNoLmdyb3VwcykgPT09IG51bGwgfHwgX21hdGNoX2dyb3VwczQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tYXRjaF9ncm91cHM0LndlZWtzLCBpc05lZ2F0aXZlLCAwLCBJbmZpbml0eSksXG4gICAgICAgIGRheXM6IHBhcnNlRHVyYXRpb25Hcm91cCgoX21hdGNoX2dyb3VwczUgPSBtYXRjaC5ncm91cHMpID09PSBudWxsIHx8IF9tYXRjaF9ncm91cHM1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbWF0Y2hfZ3JvdXBzNS5kYXlzLCBpc05lZ2F0aXZlLCAwLCAzMSksXG4gICAgICAgIGhvdXJzOiBwYXJzZUR1cmF0aW9uR3JvdXAoKF9tYXRjaF9ncm91cHM2ID0gbWF0Y2guZ3JvdXBzKSA9PT0gbnVsbCB8fCBfbWF0Y2hfZ3JvdXBzNiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21hdGNoX2dyb3VwczYuaG91cnMsIGlzTmVnYXRpdmUsIDAsIDIzKSxcbiAgICAgICAgbWludXRlczogcGFyc2VEdXJhdGlvbkdyb3VwKChfbWF0Y2hfZ3JvdXBzNyA9IG1hdGNoLmdyb3VwcykgPT09IG51bGwgfHwgX21hdGNoX2dyb3VwczcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tYXRjaF9ncm91cHM3Lm1pbnV0ZXMsIGlzTmVnYXRpdmUsIDAsIDU5KSxcbiAgICAgICAgc2Vjb25kczogcGFyc2VEdXJhdGlvbkdyb3VwKChfbWF0Y2hfZ3JvdXBzOCA9IG1hdGNoLmdyb3VwcykgPT09IG51bGwgfHwgX21hdGNoX2dyb3VwczggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tYXRjaF9ncm91cHM4LnNlY29uZHMsIGlzTmVnYXRpdmUsIDAsIDU5KVxuICAgIH07XG4gICAgaWYgKGR1cmF0aW9uLmhvdXJzICE9PSB1bmRlZmluZWQgJiYgZHVyYXRpb24uaG91cnMgJSAxICE9PSAwICYmIChkdXJhdGlvbi5taW51dGVzIHx8IGR1cmF0aW9uLnNlY29uZHMpKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSVNPIDg2MDEgRHVyYXRpb24gc3RyaW5nOiAke3ZhbHVlfSAtIG9ubHkgdGhlIHNtYWxsZXN0IHVuaXQgY2FuIGJlIGZyYWN0aW9uYWxgKTtcbiAgICBpZiAoZHVyYXRpb24ubWludXRlcyAhPT0gdW5kZWZpbmVkICYmIGR1cmF0aW9uLm1pbnV0ZXMgJSAxICE9PSAwICYmIGR1cmF0aW9uLnNlY29uZHMpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBJU08gODYwMSBEdXJhdGlvbiBzdHJpbmc6ICR7dmFsdWV9IC0gb25seSB0aGUgc21hbGxlc3QgdW5pdCBjYW4gYmUgZnJhY3Rpb25hbGApO1xuICAgIHJldHVybiBkdXJhdGlvbjtcbn1cblxuXG5cblxuZnVuY3Rpb24gJDYyNWFkMWUxZjRjNDNiYzEkdmFyJHNoaWZ0QXJncyhhcmdzKSB7XG4gICAgbGV0IGNhbGVuZGFyID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwib2JqZWN0XCIgPyBhcmdzLnNoaWZ0KCkgOiBuZXcgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSgpO1xuICAgIGxldCBlcmE7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiKSBlcmEgPSBhcmdzLnNoaWZ0KCk7XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBlcmFzID0gY2FsZW5kYXIuZ2V0RXJhcygpO1xuICAgICAgICBlcmEgPSBlcmFzW2VyYXMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIGxldCB5ZWFyID0gYXJncy5zaGlmdCgpO1xuICAgIGxldCBtb250aCA9IGFyZ3Muc2hpZnQoKTtcbiAgICBsZXQgZGF5ID0gYXJncy5zaGlmdCgpO1xuICAgIHJldHVybiBbXG4gICAgICAgIGNhbGVuZGFyLFxuICAgICAgICBlcmEsXG4gICAgICAgIHllYXIsXG4gICAgICAgIG1vbnRoLFxuICAgICAgICBkYXlcbiAgICBdO1xufVxudmFyIC8vIFRoaXMgcHJldmVudHMgVHlwZVNjcmlwdCBmcm9tIGFsbG93aW5nIG90aGVyIHR5cGVzIHdpdGggdGhlIHNhbWUgZmllbGRzIHRvIG1hdGNoLlxuLy8gaS5lLiBhIFpvbmVkRGF0ZVRpbWUgc2hvdWxkIG5vdCBiZSBiZSBwYXNzYWJsZSB0byBhIHBhcmFtZXRlciB0aGF0IGV4cGVjdHMgQ2FsZW5kYXJEYXRlLlxuLy8gSWYgdGhhdCBiZWhhdmlvciBpcyBkZXNpcmVkLCB1c2UgdGhlIEFueUNhbGVuZGFyRGF0ZSBpbnRlcmZhY2UgaW5zdGVhZC5cbi8vIEB0cy1pZ25vcmVcbiQ2MjVhZDFlMWY0YzQzYmMxJHZhciRfdHlwZSA9IC8qI19fUFVSRV9fKi8gbmV3IFdlYWtNYXAoKTtcbmNsYXNzICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmIHtcbiAgICAvKiogUmV0dXJucyBhIGNvcHkgb2YgdGhpcyBkYXRlLiAqLyBjb3B5KCkge1xuICAgICAgICBpZiAodGhpcy5lcmEpIHJldHVybiBuZXcgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYodGhpcy5jYWxlbmRhciwgdGhpcy5lcmEsIHRoaXMueWVhciwgdGhpcy5tb250aCwgdGhpcy5kYXkpO1xuICAgICAgICBlbHNlIHJldHVybiBuZXcgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYodGhpcy5jYWxlbmRhciwgdGhpcy55ZWFyLCB0aGlzLm1vbnRoLCB0aGlzLmRheSk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgbmV3IGBDYWxlbmRhckRhdGVgIHdpdGggdGhlIGdpdmVuIGR1cmF0aW9uIGFkZGVkIHRvIGl0LiAqLyBhZGQoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZTE2ZDg1MjBhZjQ0YTA5NikodGhpcywgZHVyYXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBgQ2FsZW5kYXJEYXRlYCB3aXRoIHRoZSBnaXZlbiBkdXJhdGlvbiBzdWJ0cmFjdGVkIGZyb20gaXQuICovIHN1YnRyYWN0KGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDRlMmQyZWFkNjVlNWY3ZTMpKHRoaXMsIGR1cmF0aW9uKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBuZXcgYENhbGVuZGFyRGF0ZWAgd2l0aCB0aGUgZ2l2ZW4gZmllbGRzIHNldCB0byB0aGUgcHJvdmlkZWQgdmFsdWVzLiBPdGhlciBmaWVsZHMgd2lsbCBiZSBjb25zdHJhaW5lZCBhY2NvcmRpbmdseS4gKi8gc2V0KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRhZGFhNGNmN2VmMWI2NWJlKSh0aGlzLCBmaWVsZHMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBgQ2FsZW5kYXJEYXRlYCB3aXRoIHRoZSBnaXZlbiBmaWVsZCBhZGp1c3RlZCBieSBhIHNwZWNpZmllZCBhbW91bnQuXG4gICAqIFdoZW4gdGhlIHJlc3VsdGluZyB2YWx1ZSByZWFjaGVzIHRoZSBsaW1pdHMgb2YgdGhlIGZpZWxkLCBpdCB3cmFwcyBhcm91bmQuXG4gICAqLyBjeWNsZShmaWVsZCwgYW1vdW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGQ1MmNlZDZiYWRmYjlhNGMpKHRoaXMsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgdGhlIGRhdGUgdG8gYSBuYXRpdmUgSmF2YVNjcmlwdCBEYXRlIG9iamVjdCwgd2l0aCB0aGUgdGltZSBzZXQgdG8gbWlkbmlnaHQgaW4gdGhlIGdpdmVuIHRpbWUgem9uZS4gKi8gdG9EYXRlKHRpbWVab25lKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGU2N2EwOTVjNjIwYjg2ZmUpKHRoaXMsIHRpbWVab25lKTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnRzIHRoZSBkYXRlIHRvIGFuIElTTyA4NjAxIGZvcm1hdHRlZCBzdHJpbmcuICovIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKDAsICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ2MGRmZDc0YWE5Njc5MWJkKSh0aGlzKTtcbiAgICB9XG4gICAgLyoqIENvbXBhcmVzIHRoaXMgZGF0ZSB3aXRoIGFub3RoZXIuIEEgbmVnYXRpdmUgcmVzdWx0IGluZGljYXRlcyB0aGF0IHRoaXMgZGF0ZSBpcyBiZWZvcmUgdGhlIGdpdmVuIG9uZSwgYW5kIGEgcG9zaXRpdmUgZGF0ZSBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhZnRlci4gKi8gY29tcGFyZShiKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDY4NzgxZGRmMzFjMDA5MGYpKHRoaXMsIGIpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgKDAsICRrZ0kzQyRzd2NoZWxwZXJzY2pzX2NsYXNzX3ByaXZhdGVfZmllbGRfaW5pdGNqcy5fKSh0aGlzLCAkNjI1YWQxZTFmNGM0M2JjMSR2YXIkX3R5cGUsIHtcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IFtjYWxlbmRhciwgZXJhLCB5ZWFyLCBtb250aCwgZGF5XSA9ICQ2MjVhZDFlMWY0YzQzYmMxJHZhciRzaGlmdEFyZ3MoYXJncyk7XG4gICAgICAgIHRoaXMuY2FsZW5kYXIgPSBjYWxlbmRhcjtcbiAgICAgICAgdGhpcy5lcmEgPSBlcmE7XG4gICAgICAgIHRoaXMueWVhciA9IHllYXI7XG4gICAgICAgIHRoaXMubW9udGggPSBtb250aDtcbiAgICAgICAgdGhpcy5kYXkgPSBkYXk7XG4gICAgICAgICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkYzRlMmVjYWM0OTM1MWVmMikodGhpcyk7XG4gICAgfVxufVxudmFyIC8vIFRoaXMgcHJldmVudHMgVHlwZVNjcmlwdCBmcm9tIGFsbG93aW5nIG90aGVyIHR5cGVzIHdpdGggdGhlIHNhbWUgZmllbGRzIHRvIG1hdGNoLlxuLy8gQHRzLWlnbm9yZVxuJDYyNWFkMWUxZjRjNDNiYzEkdmFyJF90eXBlMSA9IC8qI19fUFVSRV9fKi8gbmV3IFdlYWtNYXAoKTtcbmNsYXNzICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ2ODBlYTE5NmVmZmNlNWYge1xuICAgIC8qKiBSZXR1cm5zIGEgY29weSBvZiB0aGlzIHRpbWUuICovIGNvcHkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDY4MGVhMTk2ZWZmY2U1Zih0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCwgdGhpcy5taWxsaXNlY29uZCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgbmV3IGBUaW1lYCB3aXRoIHRoZSBnaXZlbiBkdXJhdGlvbiBhZGRlZCB0byBpdC4gKi8gYWRkKGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDdlZDg3YjZiYzI1MDY0NzApKHRoaXMsIGR1cmF0aW9uKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBuZXcgYFRpbWVgIHdpdGggdGhlIGdpdmVuIGR1cmF0aW9uIHN1YnRyYWN0ZWQgZnJvbSBpdC4gKi8gc3VidHJhY3QoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZmUzNGQzYTM4MWNkNzUwMSkodGhpcywgZHVyYXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBgVGltZWAgd2l0aCB0aGUgZ2l2ZW4gZmllbGRzIHNldCB0byB0aGUgcHJvdmlkZWQgdmFsdWVzLiBPdGhlciBmaWVsZHMgd2lsbCBiZSBjb25zdHJhaW5lZCBhY2NvcmRpbmdseS4gKi8gc2V0KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRlNWQ1ZTFjMTgyMmI2ZTU2KSh0aGlzLCBmaWVsZHMpO1xuICAgIH1cbiAgICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBgVGltZWAgd2l0aCB0aGUgZ2l2ZW4gZmllbGQgYWRqdXN0ZWQgYnkgYSBzcGVjaWZpZWQgYW1vdW50LlxuICAgKiBXaGVuIHRoZSByZXN1bHRpbmcgdmFsdWUgcmVhY2hlcyB0aGUgbGltaXRzIG9mIHRoZSBmaWVsZCwgaXQgd3JhcHMgYXJvdW5kLlxuICAgKi8gY3ljbGUoZmllbGQsIGFtb3VudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRkZDAyYjNlMDAwN2RmZTI4KSh0aGlzLCBmaWVsZCwgYW1vdW50LCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnRzIHRoZSB0aW1lIHRvIGFuIElTTyA4NjAxIGZvcm1hdHRlZCBzdHJpbmcuICovIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKDAsICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCRmNTlkZWU4MjI0OGY1YWQ0KSh0aGlzKTtcbiAgICB9XG4gICAgLyoqIENvbXBhcmVzIHRoaXMgdGltZSB3aXRoIGFub3RoZXIuIEEgbmVnYXRpdmUgcmVzdWx0IGluZGljYXRlcyB0aGF0IHRoaXMgdGltZSBpcyBiZWZvcmUgdGhlIGdpdmVuIG9uZSwgYW5kIGEgcG9zaXRpdmUgdGltZSBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhZnRlci4gKi8gY29tcGFyZShiKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JGMxOWE4MGE5NzIxYjgwZjYpKHRoaXMsIGIpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcihob3VyID0gMCwgbWludXRlID0gMCwgc2Vjb25kID0gMCwgbWlsbGlzZWNvbmQgPSAwKXtcbiAgICAgICAgKDAsICRrZ0kzQyRzd2NoZWxwZXJzY2pzX2NsYXNzX3ByaXZhdGVfZmllbGRfaW5pdGNqcy5fKSh0aGlzLCAkNjI1YWQxZTFmNGM0M2JjMSR2YXIkX3R5cGUxLCB7XG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaG91ciA9IGhvdXI7XG4gICAgICAgIHRoaXMubWludXRlID0gbWludXRlO1xuICAgICAgICB0aGlzLnNlY29uZCA9IHNlY29uZDtcbiAgICAgICAgdGhpcy5taWxsaXNlY29uZCA9IG1pbGxpc2Vjb25kO1xuICAgICAgICAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDc1NTVkZTFlMDcwNTEwY2IpKHRoaXMpO1xuICAgIH1cbn1cbnZhciAvLyBUaGlzIHByZXZlbnRzIFR5cGVTY3JpcHQgZnJvbSBhbGxvd2luZyBvdGhlciB0eXBlcyB3aXRoIHRoZSBzYW1lIGZpZWxkcyB0byBtYXRjaC5cbi8vIEB0cy1pZ25vcmVcbiQ2MjVhZDFlMWY0YzQzYmMxJHZhciRfdHlwZTIgPSAvKiNfX1BVUkVfXyovIG5ldyBXZWFrTWFwKCk7XG5jbGFzcyAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkY2E4NzFlOGRiYjgwOTY2ZiB7XG4gICAgLyoqIFJldHVybnMgYSBjb3B5IG9mIHRoaXMgZGF0ZS4gKi8gY29weSgpIHtcbiAgICAgICAgaWYgKHRoaXMuZXJhKSByZXR1cm4gbmV3ICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRjYTg3MWU4ZGJiODA5NjZmKHRoaXMuY2FsZW5kYXIsIHRoaXMuZXJhLCB0aGlzLnllYXIsIHRoaXMubW9udGgsIHRoaXMuZGF5LCB0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCwgdGhpcy5taWxsaXNlY29uZCk7XG4gICAgICAgIGVsc2UgcmV0dXJuIG5ldyAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkY2E4NzFlOGRiYjgwOTY2Zih0aGlzLmNhbGVuZGFyLCB0aGlzLnllYXIsIHRoaXMubW9udGgsIHRoaXMuZGF5LCB0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCwgdGhpcy5taWxsaXNlY29uZCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgbmV3IGBDYWxlbmRhckRhdGVUaW1lYCB3aXRoIHRoZSBnaXZlbiBkdXJhdGlvbiBhZGRlZCB0byBpdC4gKi8gYWRkKGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGUxNmQ4NTIwYWY0NGEwOTYpKHRoaXMsIGR1cmF0aW9uKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBuZXcgYENhbGVuZGFyRGF0ZVRpbWVgIHdpdGggdGhlIGdpdmVuIGR1cmF0aW9uIHN1YnRyYWN0ZWQgZnJvbSBpdC4gKi8gc3VidHJhY3QoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkNGUyZDJlYWQ2NWU1ZjdlMykodGhpcywgZHVyYXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBgQ2FsZW5kYXJEYXRlVGltZWAgd2l0aCB0aGUgZ2l2ZW4gZmllbGRzIHNldCB0byB0aGUgcHJvdmlkZWQgdmFsdWVzLiBPdGhlciBmaWVsZHMgd2lsbCBiZSBjb25zdHJhaW5lZCBhY2NvcmRpbmdseS4gKi8gc2V0KGZpZWxkcykge1xuICAgICAgICByZXR1cm4gKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRhZGFhNGNmN2VmMWI2NWJlKSgoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGU1ZDVlMWMxODIyYjZlNTYpKHRoaXMsIGZpZWxkcyksIGZpZWxkcyk7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGBDYWxlbmRhckRhdGVUaW1lYCB3aXRoIHRoZSBnaXZlbiBmaWVsZCBhZGp1c3RlZCBieSBhIHNwZWNpZmllZCBhbW91bnQuXG4gICAqIFdoZW4gdGhlIHJlc3VsdGluZyB2YWx1ZSByZWFjaGVzIHRoZSBsaW1pdHMgb2YgdGhlIGZpZWxkLCBpdCB3cmFwcyBhcm91bmQuXG4gICAqLyBjeWNsZShmaWVsZCwgYW1vdW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN3aXRjaChmaWVsZCl7XG4gICAgICAgICAgICBjYXNlIFwiZXJhXCI6XG4gICAgICAgICAgICBjYXNlIFwieWVhclwiOlxuICAgICAgICAgICAgY2FzZSBcIm1vbnRoXCI6XG4gICAgICAgICAgICBjYXNlIFwiZGF5XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkZDUyY2VkNmJhZGZiOWE0YykodGhpcywgZmllbGQsIGFtb3VudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGRkMDJiM2UwMDA3ZGZlMjgpKHRoaXMsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBDb252ZXJ0cyB0aGUgZGF0ZSB0byBhIG5hdGl2ZSBKYXZhU2NyaXB0IERhdGUgb2JqZWN0IGluIHRoZSBnaXZlbiB0aW1lIHpvbmUuICovIHRvRGF0ZSh0aW1lWm9uZSwgZGlzYW1iaWd1YXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNGFlMDI2MGE2OTcyOWYxZCRleHBvcnQkZTY3YTA5NWM2MjBiODZmZSkodGhpcywgdGltZVpvbmUsIGRpc2FtYmlndWF0aW9uKTtcbiAgICB9XG4gICAgLyoqIENvbnZlcnRzIHRoZSBkYXRlIHRvIGFuIElTTyA4NjAxIGZvcm1hdHRlZCBzdHJpbmcuICovIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gKDAsICQ0YzMyZTJkOThlNWE1MTM0JGV4cG9ydCQ0MjIzZGUxNDcwOGFkYzYzKSh0aGlzKTtcbiAgICB9XG4gICAgLyoqIENvbXBhcmVzIHRoaXMgZGF0ZSB3aXRoIGFub3RoZXIuIEEgbmVnYXRpdmUgcmVzdWx0IGluZGljYXRlcyB0aGF0IHRoaXMgZGF0ZSBpcyBiZWZvcmUgdGhlIGdpdmVuIG9uZSwgYW5kIGEgcG9zaXRpdmUgZGF0ZSBpbmRpY2F0ZXMgdGhhdCBpdCBpcyBhZnRlci4gKi8gY29tcGFyZShiKSB7XG4gICAgICAgIGxldCByZXMgPSAoMCwgJDFmMGY3ZWJmMWFlNmM1MzAkZXhwb3J0JDY4NzgxZGRmMzFjMDA5MGYpKHRoaXMsIGIpO1xuICAgICAgICBpZiAocmVzID09PSAwKSByZXR1cm4gKDAsICQxZjBmN2ViZjFhZTZjNTMwJGV4cG9ydCRjMTlhODBhOTcyMWI4MGY2KSh0aGlzLCAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JGIyMWUwYjEyNGUyMjQ0ODQpKGIpKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgICgwLCAka2dJM0Mkc3djaGVscGVyc2Nqc19jbGFzc19wcml2YXRlX2ZpZWxkX2luaXRjanMuXykodGhpcywgJDYyNWFkMWUxZjRjNDNiYzEkdmFyJF90eXBlMiwge1xuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgW2NhbGVuZGFyLCBlcmEsIHllYXIsIG1vbnRoLCBkYXldID0gJDYyNWFkMWUxZjRjNDNiYzEkdmFyJHNoaWZ0QXJncyhhcmdzKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IGNhbGVuZGFyO1xuICAgICAgICB0aGlzLmVyYSA9IGVyYTtcbiAgICAgICAgdGhpcy55ZWFyID0geWVhcjtcbiAgICAgICAgdGhpcy5tb250aCA9IG1vbnRoO1xuICAgICAgICB0aGlzLmRheSA9IGRheTtcbiAgICAgICAgdGhpcy5ob3VyID0gYXJncy5zaGlmdCgpIHx8IDA7XG4gICAgICAgIHRoaXMubWludXRlID0gYXJncy5zaGlmdCgpIHx8IDA7XG4gICAgICAgIHRoaXMuc2Vjb25kID0gYXJncy5zaGlmdCgpIHx8IDA7XG4gICAgICAgIHRoaXMubWlsbGlzZWNvbmQgPSBhcmdzLnNoaWZ0KCkgfHwgMDtcbiAgICAgICAgKDAsICQ1YzA1NzFhYTViNmZiNWRhJGV4cG9ydCRjNGUyZWNhYzQ5MzUxZWYyKSh0aGlzKTtcbiAgICB9XG59XG52YXIgLy8gVGhpcyBwcmV2ZW50cyBUeXBlU2NyaXB0IGZyb20gYWxsb3dpbmcgb3RoZXIgdHlwZXMgd2l0aCB0aGUgc2FtZSBmaWVsZHMgdG8gbWF0Y2guXG4vLyBAdHMtaWdub3JlXG4kNjI1YWQxZTFmNGM0M2JjMSR2YXIkX3R5cGUzID0gLyojX19QVVJFX18qLyBuZXcgV2Vha01hcCgpO1xuY2xhc3MgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JGQzYjcyODhlNzk5NGVkZWEge1xuICAgIC8qKiBSZXR1cm5zIGEgY29weSBvZiB0aGlzIGRhdGUuICovIGNvcHkoKSB7XG4gICAgICAgIGlmICh0aGlzLmVyYSkgcmV0dXJuIG5ldyAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkZDNiNzI4OGU3OTk0ZWRlYSh0aGlzLmNhbGVuZGFyLCB0aGlzLmVyYSwgdGhpcy55ZWFyLCB0aGlzLm1vbnRoLCB0aGlzLmRheSwgdGhpcy50aW1lWm9uZSwgdGhpcy5vZmZzZXQsIHRoaXMuaG91ciwgdGhpcy5taW51dGUsIHRoaXMuc2Vjb25kLCB0aGlzLm1pbGxpc2Vjb25kKTtcbiAgICAgICAgZWxzZSByZXR1cm4gbmV3ICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCRkM2I3Mjg4ZTc5OTRlZGVhKHRoaXMuY2FsZW5kYXIsIHRoaXMueWVhciwgdGhpcy5tb250aCwgdGhpcy5kYXksIHRoaXMudGltZVpvbmUsIHRoaXMub2Zmc2V0LCB0aGlzLmhvdXIsIHRoaXMubWludXRlLCB0aGlzLnNlY29uZCwgdGhpcy5taWxsaXNlY29uZCk7XG4gICAgfVxuICAgIC8qKiBSZXR1cm5zIGEgbmV3IGBab25lZERhdGVUaW1lYCB3aXRoIHRoZSBnaXZlbiBkdXJhdGlvbiBhZGRlZCB0byBpdC4gKi8gYWRkKGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDk2YjFkMjgzNDkyNzQ2MzcpKHRoaXMsIGR1cmF0aW9uKTtcbiAgICB9XG4gICAgLyoqIFJldHVybnMgYSBuZXcgYFpvbmVkRGF0ZVRpbWVgIHdpdGggdGhlIGdpdmVuIGR1cmF0aW9uIHN1YnRyYWN0ZWQgZnJvbSBpdC4gKi8gc3VidHJhY3QoZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkNjgxNGNhYWMzNGNhMDNjNykodGhpcywgZHVyYXRpb24pO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyBhIG5ldyBgWm9uZWREYXRlVGltZWAgd2l0aCB0aGUgZ2l2ZW4gZmllbGRzIHNldCB0byB0aGUgcHJvdmlkZWQgdmFsdWVzLiBPdGhlciBmaWVsZHMgd2lsbCBiZSBjb25zdHJhaW5lZCBhY2NvcmRpbmdseS4gKi8gc2V0KGZpZWxkcywgZGlzYW1iaWd1YXRpb24pIHtcbiAgICAgICAgcmV0dXJuICgwLCAkNWMwNTcxYWE1YjZmYjVkYSRleHBvcnQkMzFiNTQzMGViMThiZTRmOCkodGhpcywgZmllbGRzLCBkaXNhbWJpZ3VhdGlvbik7XG4gICAgfVxuICAgIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGBab25lZERhdGVUaW1lYCB3aXRoIHRoZSBnaXZlbiBmaWVsZCBhZGp1c3RlZCBieSBhIHNwZWNpZmllZCBhbW91bnQuXG4gICAqIFdoZW4gdGhlIHJlc3VsdGluZyB2YWx1ZSByZWFjaGVzIHRoZSBsaW1pdHMgb2YgdGhlIGZpZWxkLCBpdCB3cmFwcyBhcm91bmQuXG4gICAqLyBjeWNsZShmaWVsZCwgYW1vdW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JDlhMjk3ZDExMWZjODZiNzkpKHRoaXMsIGZpZWxkLCBhbW91bnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgdGhlIGRhdGUgdG8gYSBuYXRpdmUgSmF2YVNjcmlwdCBEYXRlIG9iamVjdC4gKi8gdG9EYXRlKCkge1xuICAgICAgICByZXR1cm4gKDAsICQ0YWUwMjYwYTY5NzI5ZjFkJGV4cG9ydCQ4M2FhYzA3YjRjMzdiMjUpKHRoaXMpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgdGhlIGRhdGUgdG8gYW4gSVNPIDg2MDEgZm9ybWF0dGVkIHN0cmluZywgaW5jbHVkaW5nIHRoZSBVVEMgb2Zmc2V0IGFuZCB0aW1lIHpvbmUgaWRlbnRpZmllci4gKi8gdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAoMCwgJDRjMzJlMmQ5OGU1YTUxMzQkZXhwb3J0JGJmNzlmMWViZjRiMTg3OTIpKHRoaXMpO1xuICAgIH1cbiAgICAvKiogQ29udmVydHMgdGhlIGRhdGUgdG8gYW4gSVNPIDg2MDEgZm9ybWF0dGVkIHN0cmluZyBpbiBVVEMuICovIHRvQWJzb2x1dGVTdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuICAgIC8qKiBDb21wYXJlcyB0aGlzIGRhdGUgd2l0aCBhbm90aGVyLiBBIG5lZ2F0aXZlIHJlc3VsdCBpbmRpY2F0ZXMgdGhhdCB0aGlzIGRhdGUgaXMgYmVmb3JlIHRoZSBnaXZlbiBvbmUsIGFuZCBhIHBvc2l0aXZlIGRhdGUgaW5kaWNhdGVzIHRoYXQgaXQgaXMgYWZ0ZXIuICovIGNvbXBhcmUoYikge1xuICAgICAgICAvLyBUT0RPOiBJcyB0aGlzIGEgYmFkIGlkZWE/P1xuICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS5nZXRUaW1lKCkgLSAoMCwgJDRhZTAyNjBhNjk3MjlmMWQkZXhwb3J0JDg0Yzk1YTgzYzc5OWUwNzQpKGIsIHRoaXMudGltZVpvbmUpLnRvRGF0ZSgpLmdldFRpbWUoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgICgwLCAka2dJM0Mkc3djaGVscGVyc2Nqc19jbGFzc19wcml2YXRlX2ZpZWxkX2luaXRjanMuXykodGhpcywgJDYyNWFkMWUxZjRjNDNiYzEkdmFyJF90eXBlMywge1xuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgW2NhbGVuZGFyLCBlcmEsIHllYXIsIG1vbnRoLCBkYXldID0gJDYyNWFkMWUxZjRjNDNiYzEkdmFyJHNoaWZ0QXJncyhhcmdzKTtcbiAgICAgICAgbGV0IHRpbWVab25lID0gYXJncy5zaGlmdCgpO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gYXJncy5zaGlmdCgpO1xuICAgICAgICB0aGlzLmNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgICAgIHRoaXMuZXJhID0gZXJhO1xuICAgICAgICB0aGlzLnllYXIgPSB5ZWFyO1xuICAgICAgICB0aGlzLm1vbnRoID0gbW9udGg7XG4gICAgICAgIHRoaXMuZGF5ID0gZGF5O1xuICAgICAgICB0aGlzLnRpbWVab25lID0gdGltZVpvbmU7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmhvdXIgPSBhcmdzLnNoaWZ0KCkgfHwgMDtcbiAgICAgICAgdGhpcy5taW51dGUgPSBhcmdzLnNoaWZ0KCkgfHwgMDtcbiAgICAgICAgdGhpcy5zZWNvbmQgPSBhcmdzLnNoaWZ0KCkgfHwgMDtcbiAgICAgICAgdGhpcy5taWxsaXNlY29uZCA9IGFyZ3Muc2hpZnQoKSB8fCAwO1xuICAgICAgICAoMCwgJDVjMDU3MWFhNWI2ZmI1ZGEkZXhwb3J0JGM0ZTJlY2FjNDkzNTFlZjIpKHRoaXMpO1xuICAgIH1cbn1cblxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvLyBQb3J0aW9ucyBvZiB0aGUgY29kZSBpbiB0aGlzIGZpbGUgYXJlIGJhc2VkIG9uIGNvZGUgZnJvbSB0aGUgVEMzOSBUZW1wb3JhbCBwcm9wb3NhbC5cbi8vIE9yaWdpbmFsIGxpY2Vuc2luZyBjYW4gYmUgZm91bmQgaW4gdGhlIE5PVElDRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXG5cbmNvbnN0ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfU1RBUlRfREFURVMgPSBbXG4gICAgW1xuICAgICAgICAxODY4LFxuICAgICAgICA5LFxuICAgICAgICA4XG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE5MTIsXG4gICAgICAgIDcsXG4gICAgICAgIDMwXG4gICAgXSxcbiAgICBbXG4gICAgICAgIDE5MjYsXG4gICAgICAgIDEyLFxuICAgICAgICAyNVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxOTg5LFxuICAgICAgICAxLFxuICAgICAgICA4XG4gICAgXSxcbiAgICBbXG4gICAgICAgIDIwMTksXG4gICAgICAgIDUsXG4gICAgICAgIDFcbiAgICBdXG5dO1xuY29uc3QgJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9FTkRfREFURVMgPSBbXG4gICAgW1xuICAgICAgICAxOTEyLFxuICAgICAgICA3LFxuICAgICAgICAyOVxuICAgIF0sXG4gICAgW1xuICAgICAgICAxOTI2LFxuICAgICAgICAxMixcbiAgICAgICAgMjRcbiAgICBdLFxuICAgIFtcbiAgICAgICAgMTk4OSxcbiAgICAgICAgMSxcbiAgICAgICAgN1xuICAgIF0sXG4gICAgW1xuICAgICAgICAyMDE5LFxuICAgICAgICA0LFxuICAgICAgICAzMFxuICAgIF1cbl07XG5jb25zdCAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX0FEREVORFMgPSBbXG4gICAgMTg2NyxcbiAgICAxOTExLFxuICAgIDE5MjUsXG4gICAgMTk4OCxcbiAgICAyMDE4XG5dO1xuY29uc3QgJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9OQU1FUyA9IFtcbiAgICBcIm1laWppXCIsXG4gICAgXCJ0YWlzaG9cIixcbiAgICBcInNob3dhXCIsXG4gICAgXCJoZWlzZWlcIixcbiAgICBcInJlaXdhXCJcbl07XG5mdW5jdGlvbiAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkZmluZEVyYUZyb21HcmVnb3JpYW5EYXRlKGRhdGUpIHtcbiAgICBjb25zdCBpZHggPSAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX1NUQVJUX0RBVEVTLmZpbmRJbmRleCgoW3llYXIsIG1vbnRoLCBkYXldKT0+e1xuICAgICAgICBpZiAoZGF0ZS55ZWFyIDwgeWVhcikgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChkYXRlLnllYXIgPT09IHllYXIgJiYgZGF0ZS5tb250aCA8IG1vbnRoKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKGRhdGUueWVhciA9PT0geWVhciAmJiBkYXRlLm1vbnRoID09PSBtb250aCAmJiBkYXRlLmRheSA8IGRheSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfU1RBUlRfREFURVMubGVuZ3RoIC0gMTtcbiAgICBpZiAoaWR4ID09PSAwKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaWR4IC0gMTtcbn1cbmZ1bmN0aW9uICRiMGFjMDYwMmVmNjQ2YjJjJHZhciR0b0dyZWdvcmlhbihkYXRlKSB7XG4gICAgbGV0IGVyYUFkZGVuZCA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfQURERU5EU1skYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX05BTUVTLmluZGV4T2YoZGF0ZS5lcmEpXTtcbiAgICBpZiAoIWVyYUFkZGVuZCkgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBlcmE6IFwiICsgZGF0ZS5lcmEpO1xuICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKShkYXRlLnllYXIgKyBlcmFBZGRlbmQsIGRhdGUubW9udGgsIGRhdGUuZGF5KTtcbn1cbmNsYXNzICRiMGFjMDYwMmVmNjQ2YjJjJGV4cG9ydCRiNzQ2YWIyYjYwY2RmZmJmIGV4dGVuZHMgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICBsZXQgZGF0ZSA9IHN1cGVyLmZyb21KdWxpYW5EYXkoamQpO1xuICAgICAgICBsZXQgZXJhID0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJGZpbmRFcmFGcm9tR3JlZ29yaWFuRGF0ZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYpKHRoaXMsICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfTkFNRVNbZXJhXSwgZGF0ZS55ZWFyIC0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9BRERFTkRTW2VyYV0sIGRhdGUubW9udGgsIGRhdGUuZGF5KTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9KdWxpYW5EYXkoJGIwYWMwNjAyZWY2NDZiMmMkdmFyJHRvR3JlZ29yaWFuKGRhdGUpKTtcbiAgICB9XG4gICAgYmFsYW5jZURhdGUoZGF0ZSkge1xuICAgICAgICBsZXQgZ3JlZ29yaWFuRGF0ZSA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciR0b0dyZWdvcmlhbihkYXRlKTtcbiAgICAgICAgbGV0IGVyYSA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRmaW5kRXJhRnJvbUdyZWdvcmlhbkRhdGUoZ3JlZ29yaWFuRGF0ZSk7XG4gICAgICAgIGlmICgkYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX05BTUVTW2VyYV0gIT09IGRhdGUuZXJhKSB7XG4gICAgICAgICAgICBkYXRlLmVyYSA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfTkFNRVNbZXJhXTtcbiAgICAgICAgICAgIGRhdGUueWVhciA9IGdyZWdvcmlhbkRhdGUueWVhciAtICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfQURERU5EU1tlcmFdO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbnN0cmFpbiBpbiBjYXNlIHdlIHdlbnQgYmVmb3JlIHRoZSBmaXJzdCBzdXBwb3J0ZWQgZXJhLlxuICAgICAgICB0aGlzLmNvbnN0cmFpbkRhdGUoZGF0ZSk7XG4gICAgfVxuICAgIGNvbnN0cmFpbkRhdGUoZGF0ZSkge1xuICAgICAgICBsZXQgaWR4ID0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9OQU1FUy5pbmRleE9mKGRhdGUuZXJhKTtcbiAgICAgICAgbGV0IGVuZCA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfRU5EX0RBVEVTW2lkeF07XG4gICAgICAgIGlmIChlbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IFtlbmRZZWFyLCBlbmRNb250aCwgZW5kRGF5XSA9IGVuZDtcbiAgICAgICAgICAgIC8vIENvbnN0cmFpbiB0aGUgeWVhciB0byB0aGUgbWF4aW11bSBwb3NzaWJsZSB2YWx1ZSBpbiB0aGUgZXJhLlxuICAgICAgICAgICAgLy8gVGhlbiBjb25zdHJhaW4gdGhlIG1vbnRoIGFuZCBkYXkgZmllbGRzIHdpdGhpbiB0aGF0LlxuICAgICAgICAgICAgbGV0IG1heFllYXIgPSBlbmRZZWFyIC0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9BRERFTkRTW2lkeF07XG4gICAgICAgICAgICBkYXRlLnllYXIgPSBNYXRoLm1heCgxLCBNYXRoLm1pbihtYXhZZWFyLCBkYXRlLnllYXIpKTtcbiAgICAgICAgICAgIGlmIChkYXRlLnllYXIgPT09IG1heFllYXIpIHtcbiAgICAgICAgICAgICAgICBkYXRlLm1vbnRoID0gTWF0aC5taW4oZW5kTW9udGgsIGRhdGUubW9udGgpO1xuICAgICAgICAgICAgICAgIGlmIChkYXRlLm1vbnRoID09PSBlbmRNb250aCkgZGF0ZS5kYXkgPSBNYXRoLm1pbihlbmREYXksIGRhdGUuZGF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0ZS55ZWFyID09PSAxICYmIGlkeCA+PSAwKSB7XG4gICAgICAgICAgICBsZXQgWywgc3RhcnRNb250aCwgc3RhcnREYXldID0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9TVEFSVF9EQVRFU1tpZHhdO1xuICAgICAgICAgICAgZGF0ZS5tb250aCA9IE1hdGgubWF4KHN0YXJ0TW9udGgsIGRhdGUubW9udGgpO1xuICAgICAgICAgICAgaWYgKGRhdGUubW9udGggPT09IHN0YXJ0TW9udGgpIGRhdGUuZGF5ID0gTWF0aC5tYXgoc3RhcnREYXksIGRhdGUuZGF5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRFcmFzKCkge1xuICAgICAgICByZXR1cm4gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9OQU1FUztcbiAgICB9XG4gICAgZ2V0WWVhcnNJbkVyYShkYXRlKSB7XG4gICAgICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIHllYXJzIGluIHRoZSBlcmEsIHRha2luZyBpbnRvIGFjY291bnQgdGhlIGRhdGUncyBtb250aCBhbmQgZGF5IGZpZWxkcy5cbiAgICAgICAgbGV0IGVyYSA9ICRiMGFjMDYwMmVmNjQ2YjJjJHZhciRFUkFfTkFNRVMuaW5kZXhPZihkYXRlLmVyYSk7XG4gICAgICAgIGxldCBjdXIgPSAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX1NUQVJUX0RBVEVTW2VyYV07XG4gICAgICAgIGxldCBuZXh0ID0gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9TVEFSVF9EQVRFU1tlcmEgKyAxXTtcbiAgICAgICAgaWYgKG5leHQgPT0gbnVsbCkgLy8gOTk5OSBncmVnb3JpYW4gaXMgdGhlIG1heGltdW0geWVhciBhbGxvd2VkLlxuICAgICAgICByZXR1cm4gOTk5OSAtIGN1clswXSArIDE7XG4gICAgICAgIGxldCB5ZWFycyA9IG5leHRbMF0gLSBjdXJbMF07XG4gICAgICAgIGlmIChkYXRlLm1vbnRoIDwgbmV4dFsxXSB8fCBkYXRlLm1vbnRoID09PSBuZXh0WzFdICYmIGRhdGUuZGF5IDwgbmV4dFsyXSkgeWVhcnMrKztcbiAgICAgICAgcmV0dXJuIHllYXJzO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXREYXlzSW5Nb250aCgkYjBhYzA2MDJlZjY0NmIyYyR2YXIkdG9HcmVnb3JpYW4oZGF0ZSkpO1xuICAgIH1cbiAgICBnZXRNaW5pbXVtTW9udGhJblllYXIoZGF0ZSkge1xuICAgICAgICBsZXQgc3RhcnQgPSAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkZ2V0TWluaW11bXMoZGF0ZSk7XG4gICAgICAgIHJldHVybiBzdGFydCA/IHN0YXJ0WzFdIDogMTtcbiAgICB9XG4gICAgZ2V0TWluaW11bURheUluTW9udGgoZGF0ZSkge1xuICAgICAgICBsZXQgc3RhcnQgPSAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkZ2V0TWluaW11bXMoZGF0ZSk7XG4gICAgICAgIHJldHVybiBzdGFydCAmJiBkYXRlLm1vbnRoID09PSBzdGFydFsxXSA/IHN0YXJ0WzJdIDogMTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBcImphcGFuZXNlXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJGdldE1pbmltdW1zKGRhdGUpIHtcbiAgICBpZiAoZGF0ZS55ZWFyID09PSAxKSB7XG4gICAgICAgIGxldCBpZHggPSAkYjBhYzA2MDJlZjY0NmIyYyR2YXIkRVJBX05BTUVTLmluZGV4T2YoZGF0ZS5lcmEpO1xuICAgICAgICByZXR1cm4gJGIwYWMwNjAyZWY2NDZiMmMkdmFyJEVSQV9TVEFSVF9EQVRFU1tpZHhdO1xuICAgIH1cbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gUG9ydGlvbnMgb2YgdGhlIGNvZGUgaW4gdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gSUNVLlxuLy8gT3JpZ2luYWwgbGljZW5zaW5nIGNhbiBiZSBmb3VuZCBpbiB0aGUgTk9USUNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cblxuY29uc3QgJDU2MWM0ZWYwNTgyNzhiNzQkdmFyJEJVRERISVNUX0VSQV9TVEFSVCA9IC01NDM7XG5jbGFzcyAkNTYxYzRlZjA1ODI3OGI3NCRleHBvcnQkNDJkMjBhNzgzMDFkZWU0NCBleHRlbmRzICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkODBlZTYyNDVlYzRmMjllYykge1xuICAgIGZyb21KdWxpYW5EYXkoamQpIHtcbiAgICAgICAgbGV0IGdyZWdvcmlhbkRhdGUgPSBzdXBlci5mcm9tSnVsaWFuRGF5KGpkKTtcbiAgICAgICAgbGV0IHllYXIgPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGMzNmUwZWNiMmQ0ZmE2OWQpKGdyZWdvcmlhbkRhdGUuZXJhLCBncmVnb3JpYW5EYXRlLnllYXIpO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgeWVhciAtICQ1NjFjNGVmMDU4Mjc4Yjc0JHZhciRCVURESElTVF9FUkFfU1RBUlQsIGdyZWdvcmlhbkRhdGUubW9udGgsIGdyZWdvcmlhbkRhdGUuZGF5KTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9KdWxpYW5EYXkoJDU2MWM0ZWYwNTgyNzhiNzQkdmFyJHRvR3JlZ29yaWFuKGRhdGUpKTtcbiAgICB9XG4gICAgZ2V0RXJhcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiQkVcIlxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXREYXlzSW5Nb250aCgkNTYxYzRlZjA1ODI3OGI3NCR2YXIkdG9HcmVnb3JpYW4oZGF0ZSkpO1xuICAgIH1cbiAgICBiYWxhbmNlRGF0ZSgpIHt9XG4gICAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBcImJ1ZGRoaXN0XCI7XG4gICAgfVxufVxuZnVuY3Rpb24gJDU2MWM0ZWYwNTgyNzhiNzQkdmFyJHRvR3JlZ29yaWFuKGRhdGUpIHtcbiAgICBsZXQgW2VyYSwgeWVhcl0gPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDQ0NzViN2U2MTdlYjEyM2MpKGRhdGUueWVhciArICQ1NjFjNGVmMDU4Mjc4Yjc0JHZhciRCVURESElTVF9FUkFfU1RBUlQpO1xuICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKShlcmEsIHllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF5KTtcbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gUG9ydGlvbnMgb2YgdGhlIGNvZGUgaW4gdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gSUNVLlxuLy8gT3JpZ2luYWwgbGljZW5zaW5nIGNhbiBiZSBmb3VuZCBpbiB0aGUgTk9USUNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cblxuY29uc3QgJDljYzVkMzU3N2VjNDAyNDMkdmFyJFRBSVdBTl9FUkFfU1RBUlQgPSAxOTExO1xuZnVuY3Rpb24gJDljYzVkMzU3N2VjNDAyNDMkdmFyJGdyZWdvcmlhblllYXIoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmVyYSA9PT0gXCJtaW5ndW9cIiA/IGRhdGUueWVhciArICQ5Y2M1ZDM1NzdlYzQwMjQzJHZhciRUQUlXQU5fRVJBX1NUQVJUIDogMSAtIGRhdGUueWVhciArICQ5Y2M1ZDM1NzdlYzQwMjQzJHZhciRUQUlXQU5fRVJBX1NUQVJUO1xufVxuZnVuY3Rpb24gJDljYzVkMzU3N2VjNDAyNDMkdmFyJGdyZWdvcmlhblRvVGFpd2FuKHllYXIpIHtcbiAgICBsZXQgeSA9IHllYXIgLSAkOWNjNWQzNTc3ZWM0MDI0MyR2YXIkVEFJV0FOX0VSQV9TVEFSVDtcbiAgICBpZiAoeSA+IDApIHJldHVybiBbXG4gICAgICAgIFwibWluZ3VvXCIsXG4gICAgICAgIHlcbiAgICBdO1xuICAgIGVsc2UgcmV0dXJuIFtcbiAgICAgICAgXCJiZWZvcmVfbWluZ3VvXCIsXG4gICAgICAgIDEgLSB5XG4gICAgXTtcbn1cbmNsYXNzICQ5Y2M1ZDM1NzdlYzQwMjQzJGV4cG9ydCQ2NWUwMTA4MGFmY2IwNzk5IGV4dGVuZHMgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICBsZXQgZGF0ZSA9IHN1cGVyLmZyb21KdWxpYW5EYXkoamQpO1xuICAgICAgICBsZXQgZXh0ZW5kZWRZZWFyID0gKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCRjMzZlMGVjYjJkNGZhNjlkKShkYXRlLmVyYSwgZGF0ZS55ZWFyKTtcbiAgICAgICAgbGV0IFtlcmEsIHllYXJdID0gJDljYzVkMzU3N2VjNDAyNDMkdmFyJGdyZWdvcmlhblRvVGFpd2FuKGV4dGVuZGVkWWVhcik7XG4gICAgICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKSh0aGlzLCBlcmEsIHllYXIsIGRhdGUubW9udGgsIGRhdGUuZGF5KTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIudG9KdWxpYW5EYXkoJDljYzVkMzU3N2VjNDAyNDMkdmFyJHRvR3JlZ29yaWFuKGRhdGUpKTtcbiAgICB9XG4gICAgZ2V0RXJhcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiYmVmb3JlX21pbmd1b1wiLFxuICAgICAgICAgICAgXCJtaW5ndW9cIlxuICAgICAgICBdO1xuICAgIH1cbiAgICBiYWxhbmNlRGF0ZShkYXRlKSB7XG4gICAgICAgIGxldCBbZXJhLCB5ZWFyXSA9ICQ5Y2M1ZDM1NzdlYzQwMjQzJHZhciRncmVnb3JpYW5Ub1RhaXdhbigkOWNjNWQzNTc3ZWM0MDI0MyR2YXIkZ3JlZ29yaWFuWWVhcihkYXRlKSk7XG4gICAgICAgIGRhdGUuZXJhID0gZXJhO1xuICAgICAgICBkYXRlLnllYXIgPSB5ZWFyO1xuICAgIH1cbiAgICBpc0ludmVyc2VFcmEoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5lcmEgPT09IFwiYmVmb3JlX21pbmd1b1wiO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXREYXlzSW5Nb250aCgkOWNjNWQzNTc3ZWM0MDI0MyR2YXIkdG9HcmVnb3JpYW4oZGF0ZSkpO1xuICAgIH1cbiAgICBnZXRZZWFyc0luRXJhKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZXJhID09PSBcImJlZm9yZV9taW5ndW9cIiA/IDk5OTkgOiA5OTk5IC0gJDljYzVkMzU3N2VjNDAyNDMkdmFyJFRBSVdBTl9FUkFfU1RBUlQ7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gXCJyb2NcIiAvLyBSZXB1YmxpYyBvZiBDaGluYVxuICAgICAgICA7XG4gICAgfVxufVxuZnVuY3Rpb24gJDljYzVkMzU3N2VjNDAyNDMkdmFyJHRvR3JlZ29yaWFuKGRhdGUpIHtcbiAgICBsZXQgW2VyYSwgeWVhcl0gPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDQ0NzViN2U2MTdlYjEyM2MpKCQ5Y2M1ZDM1NzdlYzQwMjQzJHZhciRncmVnb3JpYW5ZZWFyKGRhdGUpKTtcbiAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikoZXJhLCB5ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRheSk7XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIC8vIFBvcnRpb25zIG9mIHRoZSBjb2RlIGluIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIElDVS5cbi8vIE9yaWdpbmFsIGxpY2Vuc2luZyBjYW4gYmUgZm91bmQgaW4gdGhlIE5PVElDRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXG5cbmNvbnN0ICQzYzA2MDE4MWZjNzI0OWFlJHZhciRQRVJTSUFOX0VQT0NIID0gMTk0ODMyMTsgLy8gNjIyLzAzLzE5IEp1bGlhbiBDLkUuXG5mdW5jdGlvbiAkM2MwNjAxODFmYzcyNDlhZSR2YXIkaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgbGV0IHkwID0geWVhciA+IDAgPyB5ZWFyIC0gNDc0IDogeWVhciAtIDQ3MztcbiAgICBsZXQgeTEgPSAoMCwgJGE1MDkwZDY0MzA1MDIyMzgkZXhwb3J0JDg0MmEyY2YzN2FmOTc3ZTEpKHkwLCAyODIwKSArIDQ3NDtcbiAgICByZXR1cm4gKDAsICRhNTA5MGQ2NDMwNTAyMjM4JGV4cG9ydCQ4NDJhMmNmMzdhZjk3N2UxKSgoeTEgKyAzOCkgKiAzMSwgMTI4KSA8IDMxO1xufVxuZnVuY3Rpb24gJDNjMDYwMTgxZmM3MjQ5YWUkdmFyJHBlcnNpYW5Ub0p1bGlhbkRheSh5ZWFyLCBtb250aCwgZGF5KSB7XG4gICAgbGV0IHkwID0geWVhciA+IDAgPyB5ZWFyIC0gNDc0IDogeWVhciAtIDQ3MztcbiAgICBsZXQgeTEgPSAoMCwgJGE1MDkwZDY0MzA1MDIyMzgkZXhwb3J0JDg0MmEyY2YzN2FmOTc3ZTEpKHkwLCAyODIwKSArIDQ3NDtcbiAgICBsZXQgb2Zmc2V0ID0gbW9udGggPD0gNyA/IDMxICogKG1vbnRoIC0gMSkgOiAzMCAqIChtb250aCAtIDEpICsgNjtcbiAgICByZXR1cm4gJDNjMDYwMTgxZmM3MjQ5YWUkdmFyJFBFUlNJQU5fRVBPQ0ggLSAxICsgMTAyOTk4MyAqIE1hdGguZmxvb3IoeTAgLyAyODIwKSArIDM2NSAqICh5MSAtIDEpICsgTWF0aC5mbG9vcigoMzEgKiB5MSAtIDUpIC8gMTI4KSArIG9mZnNldCArIGRheTtcbn1cbmNsYXNzICQzYzA2MDE4MWZjNzI0OWFlJGV4cG9ydCQzN2ZjY2RiZmQxNGM1OTM5IHtcbiAgICBmcm9tSnVsaWFuRGF5KGpkKSB7XG4gICAgICAgIGxldCBkMCA9IGpkIC0gJDNjMDYwMTgxZmM3MjQ5YWUkdmFyJHBlcnNpYW5Ub0p1bGlhbkRheSg0NzUsIDEsIDEpO1xuICAgICAgICBsZXQgbjI4MjAgPSBNYXRoLmZsb29yKGQwIC8gMTAyOTk4Myk7XG4gICAgICAgIGxldCBkMSA9ICgwLCAkYTUwOTBkNjQzMDUwMjIzOCRleHBvcnQkODQyYTJjZjM3YWY5NzdlMSkoZDAsIDEwMjk5ODMpO1xuICAgICAgICBsZXQgeTI4MjAgPSBkMSA9PT0gMTAyOTk4MiA/IDI4MjAgOiBNYXRoLmZsb29yKCgxMjggKiBkMSArIDQ2ODc4KSAvIDQ2NzUxKTtcbiAgICAgICAgbGV0IHllYXIgPSA0NzQgKyAyODIwICogbjI4MjAgKyB5MjgyMDtcbiAgICAgICAgaWYgKHllYXIgPD0gMCkgeWVhci0tO1xuICAgICAgICBsZXQgeURheSA9IGpkIC0gJDNjMDYwMTgxZmM3MjQ5YWUkdmFyJHBlcnNpYW5Ub0p1bGlhbkRheSh5ZWFyLCAxLCAxKSArIDE7XG4gICAgICAgIGxldCBtb250aCA9IHlEYXkgPD0gMTg2ID8gTWF0aC5jZWlsKHlEYXkgLyAzMSkgOiBNYXRoLmNlaWwoKHlEYXkgLSA2KSAvIDMxKTtcbiAgICAgICAgbGV0IGRheSA9IGpkIC0gJDNjMDYwMTgxZmM3MjQ5YWUkdmFyJHBlcnNpYW5Ub0p1bGlhbkRheSh5ZWFyLCBtb250aCwgMSkgKyAxO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgeWVhciwgbW9udGgsIGRheSk7XG4gICAgfVxuICAgIHRvSnVsaWFuRGF5KGRhdGUpIHtcbiAgICAgICAgcmV0dXJuICQzYzA2MDE4MWZjNzI0OWFlJHZhciRwZXJzaWFuVG9KdWxpYW5EYXkoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRheSk7XG4gICAgfVxuICAgIGdldE1vbnRoc0luWWVhcigpIHtcbiAgICAgICAgcmV0dXJuIDEyO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIGlmIChkYXRlLm1vbnRoIDw9IDYpIHJldHVybiAzMTtcbiAgICAgICAgaWYgKGRhdGUubW9udGggPD0gMTEpIHJldHVybiAzMDtcbiAgICAgICAgcmV0dXJuICQzYzA2MDE4MWZjNzI0OWFlJHZhciRpc0xlYXBZZWFyKGRhdGUueWVhcikgPyAzMCA6IDI5O1xuICAgIH1cbiAgICBnZXRFcmFzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJBUFwiXG4gICAgICAgIF07XG4gICAgfVxuICAgIGdldFllYXJzSW5FcmEoKSB7XG4gICAgICAgIC8vIDkzNzgtMTAtMTAgcGVyc2lhbiBpcyA5OTk5LTEyLTMxIGdyZWdvcmlhbi5cbiAgICAgICAgLy8gUm91bmQgZG93biB0byA5Mzc3IHRvIHNldCB0aGUgbWF4aW11bSBmdWxsIHllYXIuXG4gICAgICAgIHJldHVybiA5Mzc3O1xuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBcInBlcnNpYW5cIjtcbiAgICB9XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIC8vIFBvcnRpb25zIG9mIHRoZSBjb2RlIGluIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIElDVS5cbi8vIE9yaWdpbmFsIGxpY2Vuc2luZyBjYW4gYmUgZm91bmQgaW4gdGhlIE5PVElDRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXG5cbi8vIFN0YXJ0cyBpbiA3OCBBRCxcbmNvbnN0ICQ1ZjFkZmE1YzY3NjA5ZmU2JHZhciRJTkRJQU5fRVJBX1NUQVJUID0gNzg7XG4vLyBUaGUgSW5kaWFuIHllYXIgc3RhcnRzIDgwIGRheXMgbGF0ZXIgdGhhbiB0aGUgR3JlZ29yaWFuIHllYXIuXG5jb25zdCAkNWYxZGZhNWM2NzYwOWZlNiR2YXIkSU5ESUFOX1lFQVJfU1RBUlQgPSA4MDtcbmNsYXNzICQ1ZjFkZmE1YzY3NjA5ZmU2JGV4cG9ydCQzOWYzMWM2MzlmYTE1NzI2IGV4dGVuZHMgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ4MGVlNjI0NWVjNGYyOWVjKSB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICAvLyBHcmVnb3JpYW4gZGF0ZSBmb3IgSnVsaWFuIGRheVxuICAgICAgICBsZXQgZGF0ZSA9IHN1cGVyLmZyb21KdWxpYW5EYXkoamQpO1xuICAgICAgICAvLyBZZWFyIGluIFNha2EgZXJhXG4gICAgICAgIGxldCBpbmRpYW5ZZWFyID0gZGF0ZS55ZWFyIC0gJDVmMWRmYTVjNjc2MDlmZTYkdmFyJElORElBTl9FUkFfU1RBUlQ7XG4gICAgICAgIC8vIERheSBudW1iZXIgaW4gR3JlZ29yaWFuIHllYXIgKHN0YXJ0aW5nIGZyb20gMClcbiAgICAgICAgbGV0IHlEYXkgPSBqZCAtICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkZjI5N2ViODM5MDA2ZDMzOSkoZGF0ZS5lcmEsIGRhdGUueWVhciwgMSwgMSk7XG4gICAgICAgIGxldCBsZWFwTW9udGg7XG4gICAgICAgIGlmICh5RGF5IDwgJDVmMWRmYTVjNjc2MDlmZTYkdmFyJElORElBTl9ZRUFSX1NUQVJUKSB7XG4gICAgICAgICAgICAvLyAgRGF5IGlzIGF0IHRoZSBlbmQgb2YgdGhlIHByZWNlZGluZyBTYWthIHllYXJcbiAgICAgICAgICAgIGluZGlhblllYXItLTtcbiAgICAgICAgICAgIC8vIERheXMgaW4gbGVhcE1vbnRoIHRoaXMgeWVhciwgcHJldmlvdXMgR3JlZ29yaWFuIHllYXJcbiAgICAgICAgICAgIGxlYXBNb250aCA9ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkNTUzZDdmYThlMzgwNWZjMCkoZGF0ZS55ZWFyIC0gMSkgPyAzMSA6IDMwO1xuICAgICAgICAgICAgeURheSArPSBsZWFwTW9udGggKyAxNTUgKyA5MCArIDEwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGF5cyBpbiBsZWFwTW9udGggdGhpcyB5ZWFyXG4gICAgICAgICAgICBsZWFwTW9udGggPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDU1M2Q3ZmE4ZTM4MDVmYzApKGRhdGUueWVhcikgPyAzMSA6IDMwO1xuICAgICAgICAgICAgeURheSAtPSAkNWYxZGZhNWM2NzYwOWZlNiR2YXIkSU5ESUFOX1lFQVJfU1RBUlQ7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGluZGlhbk1vbnRoO1xuICAgICAgICBsZXQgaW5kaWFuRGF5O1xuICAgICAgICBpZiAoeURheSA8IGxlYXBNb250aCkge1xuICAgICAgICAgICAgaW5kaWFuTW9udGggPSAxO1xuICAgICAgICAgICAgaW5kaWFuRGF5ID0geURheSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbURheSA9IHlEYXkgLSBsZWFwTW9udGg7XG4gICAgICAgICAgICBpZiAobURheSA8IDE1NSkge1xuICAgICAgICAgICAgICAgIGluZGlhbk1vbnRoID0gTWF0aC5mbG9vcihtRGF5IC8gMzEpICsgMjtcbiAgICAgICAgICAgICAgICBpbmRpYW5EYXkgPSBtRGF5ICUgMzEgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtRGF5IC09IDE1NTtcbiAgICAgICAgICAgICAgICBpbmRpYW5Nb250aCA9IE1hdGguZmxvb3IobURheSAvIDMwKSArIDc7XG4gICAgICAgICAgICAgICAgaW5kaWFuRGF5ID0gbURheSAlIDMwICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgaW5kaWFuWWVhciwgaW5kaWFuTW9udGgsIGluZGlhbkRheSk7XG4gICAgfVxuICAgIHRvSnVsaWFuRGF5KGRhdGUpIHtcbiAgICAgICAgbGV0IGV4dGVuZGVkWWVhciA9IGRhdGUueWVhciArICQ1ZjFkZmE1YzY3NjA5ZmU2JHZhciRJTkRJQU5fRVJBX1NUQVJUO1xuICAgICAgICBsZXQgW2VyYSwgeWVhcl0gPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JDQ0NzViN2U2MTdlYjEyM2MpKGV4dGVuZGVkWWVhcik7XG4gICAgICAgIGxldCBsZWFwTW9udGg7XG4gICAgICAgIGxldCBqZDtcbiAgICAgICAgaWYgKCgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkNTUzZDdmYThlMzgwNWZjMCkoeWVhcikpIHtcbiAgICAgICAgICAgIGxlYXBNb250aCA9IDMxO1xuICAgICAgICAgICAgamQgPSAoMCwgJGFmMTRjOTgxMmZkY2ViMzMkZXhwb3J0JGYyOTdlYjgzOTAwNmQzMzkpKGVyYSwgeWVhciwgMywgMjEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVhcE1vbnRoID0gMzA7XG4gICAgICAgICAgICBqZCA9ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkZjI5N2ViODM5MDA2ZDMzOSkoZXJhLCB5ZWFyLCAzLCAyMik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGUubW9udGggPT09IDEpIHJldHVybiBqZCArIGRhdGUuZGF5IC0gMTtcbiAgICAgICAgamQgKz0gbGVhcE1vbnRoICsgTWF0aC5taW4oZGF0ZS5tb250aCAtIDIsIDUpICogMzE7XG4gICAgICAgIGlmIChkYXRlLm1vbnRoID49IDgpIGpkICs9IChkYXRlLm1vbnRoIC0gNykgKiAzMDtcbiAgICAgICAgamQgKz0gZGF0ZS5kYXkgLSAxO1xuICAgICAgICByZXR1cm4gamQ7XG4gICAgfVxuICAgIGdldERheXNJbk1vbnRoKGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUubW9udGggPT09IDEgJiYgKDAsICRhZjE0Yzk4MTJmZGNlYjMzJGV4cG9ydCQ1NTNkN2ZhOGUzODA1ZmMwKShkYXRlLnllYXIgKyAkNWYxZGZhNWM2NzYwOWZlNiR2YXIkSU5ESUFOX0VSQV9TVEFSVCkpIHJldHVybiAzMTtcbiAgICAgICAgaWYgKGRhdGUubW9udGggPj0gMiAmJiBkYXRlLm1vbnRoIDw9IDYpIHJldHVybiAzMTtcbiAgICAgICAgcmV0dXJuIDMwO1xuICAgIH1cbiAgICBnZXRZZWFyc0luRXJhKCkge1xuICAgICAgICAvLyA5OTk5LTEyLTMxIGdyZWdvcmlhbiBpcyA5OTIwLTEwLTEwIGluZGlhbi5cbiAgICAgICAgLy8gUm91bmQgZG93biB0byA5OTE5IGZvciB0aGUgbGFzdCBmdWxsIHllYXIuXG4gICAgICAgIHJldHVybiA5OTE5O1xuICAgIH1cbiAgICBnZXRFcmFzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJzYWthXCJcbiAgICAgICAgXTtcbiAgICB9XG4gICAgYmFsYW5jZURhdGUoKSB7fVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gXCJpbmRpYW5cIjtcbiAgICB9XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIC8vIFBvcnRpb25zIG9mIHRoZSBjb2RlIGluIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIElDVS5cbi8vIE9yaWdpbmFsIGxpY2Vuc2luZyBjYW4gYmUgZm91bmQgaW4gdGhlIE5PVElDRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXG5jb25zdCAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQ0lWSUxfRVBPQyA9IDE5NDg0NDA7IC8vIENFIDYyMiBKdWx5IDE2IEZyaWRheSAoSnVsaWFuIGNhbGVuZGFyKSAvIENFIDYyMiBKdWx5IDE5IChHcmVnb3JpYW4gY2FsZW5kYXIpXG5jb25zdCAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQVNUUk9OT01JQ0FMX0VQT0MgPSAxOTQ4NDM5OyAvLyBDRSA2MjIgSnVseSAxNSBUaHVyc2RheSAoSnVsaWFuIGNhbGVuZGFyKVxuY29uc3QgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlQgPSAxMzAwO1xuY29uc3QgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfRU5EID0gMTYwMDtcbmNvbnN0ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9TVEFSVF9EQVlTID0gNDYwMzIyO1xuZnVuY3Rpb24gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJGlzbGFtaWNUb0p1bGlhbkRheShlcG9jaCwgeWVhciwgbW9udGgsIGRheSkge1xuICAgIHJldHVybiBkYXkgKyBNYXRoLmNlaWwoMjkuNSAqIChtb250aCAtIDEpKSArICh5ZWFyIC0gMSkgKiAzNTQgKyBNYXRoLmZsb29yKCgzICsgMTEgKiB5ZWFyKSAvIDMwKSArIGVwb2NoIC0gMTtcbn1cbmZ1bmN0aW9uICRlY2IyYzRjYzhjOWFhZTI1JHZhciRqdWxpYW5EYXlUb0lzbGFtaWMoY2FsZW5kYXIsIGVwb2NoLCBqZCkge1xuICAgIGxldCB5ZWFyID0gTWF0aC5mbG9vcigoMzAgKiAoamQgLSBlcG9jaCkgKyAxMDY0NikgLyAxMDYzMSk7XG4gICAgbGV0IG1vbnRoID0gTWF0aC5taW4oMTIsIE1hdGguY2VpbCgoamQgLSAoMjkgKyAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkaXNsYW1pY1RvSnVsaWFuRGF5KGVwb2NoLCB5ZWFyLCAxLCAxKSkpIC8gMjkuNSkgKyAxKTtcbiAgICBsZXQgZGF5ID0gamQgLSAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkaXNsYW1pY1RvSnVsaWFuRGF5KGVwb2NoLCB5ZWFyLCBtb250aCwgMSkgKyAxO1xuICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKShjYWxlbmRhciwgeWVhciwgbW9udGgsIGRheSk7XG59XG5mdW5jdGlvbiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuICgxNCArIDExICogeWVhcikgJSAzMCA8IDExO1xufVxuY2xhc3MgJGVjYjJjNGNjOGM5YWFlMjUkZXhwb3J0JDIwNjY3OTVhYWRkMzdiZmMge1xuICAgIGZyb21KdWxpYW5EYXkoamQpIHtcbiAgICAgICAgcmV0dXJuICRlY2IyYzRjYzhjOWFhZTI1JHZhciRqdWxpYW5EYXlUb0lzbGFtaWModGhpcywgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJENJVklMX0VQT0MsIGpkKTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJGlzbGFtaWNUb0p1bGlhbkRheSgkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQ0lWSUxfRVBPQywgZGF0ZS55ZWFyLCBkYXRlLm1vbnRoLCBkYXRlLmRheSk7XG4gICAgfVxuICAgIGdldERheXNJbk1vbnRoKGRhdGUpIHtcbiAgICAgICAgbGV0IGxlbmd0aCA9IDI5ICsgZGF0ZS5tb250aCAlIDI7XG4gICAgICAgIGlmIChkYXRlLm1vbnRoID09PSAxMiAmJiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkaXNMZWFwWWVhcihkYXRlLnllYXIpKSBsZW5ndGgrKztcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgZ2V0TW9udGhzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gMTI7XG4gICAgfVxuICAgIGdldERheXNJblllYXIoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJGlzTGVhcFllYXIoZGF0ZS55ZWFyKSA/IDM1NSA6IDM1NDtcbiAgICB9XG4gICAgZ2V0WWVhcnNJbkVyYSgpIHtcbiAgICAgICAgLy8gOTk5OSBncmVnb3JpYW5cbiAgICAgICAgcmV0dXJuIDk2NjU7XG4gICAgfVxuICAgIGdldEVyYXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIkFIXCJcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gXCJpc2xhbWljLWNpdmlsXCI7XG4gICAgfVxufVxuY2xhc3MgJGVjYjJjNGNjOGM5YWFlMjUkZXhwb3J0JDM3ZjA4ODdmMmY5ZDIyZjcgZXh0ZW5kcyAkZWNiMmM0Y2M4YzlhYWUyNSRleHBvcnQkMjA2Njc5NWFhZGQzN2JmYyB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICByZXR1cm4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJGp1bGlhbkRheVRvSXNsYW1pYyh0aGlzLCAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQVNUUk9OT01JQ0FMX0VQT0MsIGpkKTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJGlzbGFtaWNUb0p1bGlhbkRheSgkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQVNUUk9OT01JQ0FMX0VQT0MsIGRhdGUueWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXkpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICAgICAgc3VwZXIoLi4uYXJncyk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IFwiaXNsYW1pYy10YmxhXCI7XG4gICAgfVxufVxuLy8gR2VuZXJhdGVkIGJ5IHNjcmlwdHMvZ2VuZXJhdGUtdW1hbHF1cmEuanNcbmNvbnN0ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9EQVRBID0gXCJxZ3BVRGNrTzFBYnFCbXdEclFwVkJha0drZ2VwQzlRRjJncGNCUzBObFFaS0IxUUxhZ3V0QmE0RVR3b1hCWXNHcFFiVkN0WUNXd21kQkUwS0pnMlZEYXdGdGdtNkFsc0tLd1dWQ3NvRzZRcjBBbllKdGdKV0Njb0twQXZTQzlrRjNBSnRDVTBGcFFwU0M2VUx0QVcyQ1ZjRmx3SkxCYU1HVWdkbEMyb0Zxd29yQlpVTVNnMmxEY29GMWdwWENhc0VTd21sQ2xJTGFndDFCWFlDdHdoYkJGVUZxUVcwQmRvSjNRUnVBallKcWdwVURiSU4xUVhhQWxzSnF3UlZDa2tMWkF0eEM3UUZ0UXBWQ2lVTmtnN0pEdFFHNlFwckNhc0Vrd3BKRGFRTnNnMjVDcm9FV3dvckJaVUtLZ3RWQzF3RnZRUTlBaDBKbFFwS0Mxb0xiUVcyQWpzSm13UlZCcWtHVkFkcUMyd0ZyUXBWQlNrTGtndXBDOVFGMmdwYUJhc0tsUVZKQjJRSHFndTFCYllDVmdwTkRpVUxVZ3RxQzYwRnJnSXZDWmNFU3dhbEJxd0cxZ3BkQlowRVRRb1dEWlVOcWdXMUJkb0NXd210QkpVRnlnYmtCdW9LOVFTMkFsWUpxZ3BVQzlJTDJRWHFBbTBKclFTVkNrb0xwUXV5QmJVSjFnU1hDa2NGa3daSkIxVUxhZ1ZyQ2lzRml3cEdEYU1OeWdYV0N0c0Vhd0pMQ2FVS1VndHBDM1VGZGdHM0NGc0NLd1ZsQmJRRjJnbnRCRzBCdGdpbUNsSU5xUTNVQmRvS1d3bXJCRk1HS1FkaUI2a0xzZ1cxQ2xVRkpRdVNEY2tPMGdicENtc0Zxd1JWQ2lrTlZBMnFEYlVKdWdRN0Nwc0VUUXFxQ3RVSzJnSmRDVjRFTGdxYURGVU5zZ2E1QnJvRVhRb3RCWlVLVWd1b0M3UUx1UVhhQWxvSlNndWtEZEVPNkFacUMyMEZOUVdWQmtvTnFBM1VEZG9HV3dXZEFpc0dGUXRLQzVVTHFnV3VDaTRKand3bkJaVUdxZ2JXQ2wwRm5RST1cIjtcbmxldCAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfTU9OVEhMRU5HVEg7XG5sZXQgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlRfVEFCTEU7XG5mdW5jdGlvbiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFZZWFyU3RhcnQoeWVhcikge1xuICAgIHJldHVybiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfU1RBUlRfREFZUyArICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUX1RBQkxFW3llYXIgLSAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVF07XG59XG5mdW5jdGlvbiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFNb250aExlbmd0aCh5ZWFyLCBtb250aCkge1xuICAgIGxldCBpZHggPSB5ZWFyIC0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlQ7XG4gICAgbGV0IG1hc2sgPSAweDAxIDw8IDExIC0gKG1vbnRoIC0gMSk7XG4gICAgaWYgKCgkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfTU9OVEhMRU5HVEhbaWR4XSAmIG1hc2spID09PSAwKSByZXR1cm4gMjk7XG4gICAgZWxzZSByZXR1cm4gMzA7XG59XG5mdW5jdGlvbiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFNb250aFN0YXJ0KHllYXIsIG1vbnRoKSB7XG4gICAgbGV0IGRheSA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYVllYXJTdGFydCh5ZWFyKTtcbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgbW9udGg7IGkrKylkYXkgKz0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJHVtYWxxdXJhTW9udGhMZW5ndGgoeWVhciwgaSk7XG4gICAgcmV0dXJuIGRheTtcbn1cbmZ1bmN0aW9uICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYVllYXJMZW5ndGgoeWVhcikge1xuICAgIHJldHVybiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVF9UQUJMRVt5ZWFyICsgMSAtICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUXSAtICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUX1RBQkxFW3llYXIgLSAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVF07XG59XG5jbGFzcyAkZWNiMmM0Y2M4YzlhYWUyNSRleHBvcnQkNWJhYWI0NzU4YzIzMTA3NiBleHRlbmRzICRlY2IyYzRjYzhjOWFhZTI1JGV4cG9ydCQyMDY2Nzk1YWFkZDM3YmZjIHtcbiAgICBmcm9tSnVsaWFuRGF5KGpkKSB7XG4gICAgICAgIGxldCBkYXlzID0gamQgLSAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkQ0lWSUxfRVBPQztcbiAgICAgICAgbGV0IHN0YXJ0RGF5cyA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYVllYXJTdGFydCgkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVCk7XG4gICAgICAgIGxldCBlbmREYXlzID0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJHVtYWxxdXJhWWVhclN0YXJ0KCRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX0VORCk7XG4gICAgICAgIGlmIChkYXlzIDwgc3RhcnREYXlzIHx8IGRheXMgPiBlbmREYXlzKSByZXR1cm4gc3VwZXIuZnJvbUp1bGlhbkRheShqZCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHkgPSAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVCAtIDE7XG4gICAgICAgICAgICBsZXQgbSA9IDE7XG4gICAgICAgICAgICBsZXQgZCA9IDE7XG4gICAgICAgICAgICB3aGlsZShkID4gMCl7XG4gICAgICAgICAgICAgICAgeSsrO1xuICAgICAgICAgICAgICAgIGQgPSBkYXlzIC0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJHVtYWxxdXJhWWVhclN0YXJ0KHkpICsgMTtcbiAgICAgICAgICAgICAgICBsZXQgeWVhckxlbmd0aCA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYVllYXJMZW5ndGgoeSk7XG4gICAgICAgICAgICAgICAgaWYgKGQgPT09IHllYXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbSA9IDEyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGQgPCB5ZWFyTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBtb250aExlbmd0aCA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYU1vbnRoTGVuZ3RoKHksIG0pO1xuICAgICAgICAgICAgICAgICAgICBtID0gMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUoZCA+IG1vbnRoTGVuZ3RoKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgLT0gbW9udGhMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBtKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb250aExlbmd0aCA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciR1bWFscXVyYU1vbnRoTGVuZ3RoKHksIG0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgKDAsICQ2MjVhZDFlMWY0YzQzYmMxJGV4cG9ydCQ5OWZhYTc2MGM3OTA4ZTRmKSh0aGlzLCB5LCBtLCBkYXlzIC0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJHVtYWxxdXJhTW9udGhTdGFydCh5LCBtKSArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvSnVsaWFuRGF5KGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUueWVhciA8ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUIHx8IGRhdGUueWVhciA+ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX0VORCkgcmV0dXJuIHN1cGVyLnRvSnVsaWFuRGF5KGRhdGUpO1xuICAgICAgICByZXR1cm4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJENJVklMX0VQT0MgKyAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFNb250aFN0YXJ0KGRhdGUueWVhciwgZGF0ZS5tb250aCkgKyAoZGF0ZS5kYXkgLSAxKTtcbiAgICB9XG4gICAgZ2V0RGF5c0luTW9udGgoZGF0ZSkge1xuICAgICAgICBpZiAoZGF0ZS55ZWFyIDwgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlQgfHwgZGF0ZS55ZWFyID4gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfRU5EKSByZXR1cm4gc3VwZXIuZ2V0RGF5c0luTW9udGgoZGF0ZSk7XG4gICAgICAgIHJldHVybiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFNb250aExlbmd0aChkYXRlLnllYXIsIGRhdGUubW9udGgpO1xuICAgIH1cbiAgICBnZXREYXlzSW5ZZWFyKGRhdGUpIHtcbiAgICAgICAgaWYgKGRhdGUueWVhciA8ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUIHx8IGRhdGUueWVhciA+ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX0VORCkgcmV0dXJuIHN1cGVyLmdldERheXNJblllYXIoZGF0ZSk7XG4gICAgICAgIHJldHVybiAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkdW1hbHF1cmFZZWFyTGVuZ3RoKGRhdGUueWVhcik7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IFwiaXNsYW1pYy11bWFscXVyYVwiO1xuICAgICAgICBpZiAoISRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9NT05USExFTkdUSCkgJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX01PTlRITEVOR1RIID0gbmV3IFVpbnQxNkFycmF5KFVpbnQ4QXJyYXkuZnJvbShhdG9iKCRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9EQVRBKSwgKGMpPT5jLmNoYXJDb2RlQXQoMCkpLmJ1ZmZlcik7XG4gICAgICAgIGlmICghJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlRfVEFCTEUpIHtcbiAgICAgICAgICAgICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUX1RBQkxFID0gbmV3IFVpbnQzMkFycmF5KCRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX0VORCAtICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUICsgMSk7XG4gICAgICAgICAgICBsZXQgeWVhclN0YXJ0ID0gMDtcbiAgICAgICAgICAgIGZvcihsZXQgeWVhciA9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX1NUQVJUOyB5ZWFyIDw9ICRlY2IyYzRjYzhjOWFhZTI1JHZhciRVTUFMUVVSQV9ZRUFSX0VORDsgeWVhcisrKXtcbiAgICAgICAgICAgICAgICAkZWNiMmM0Y2M4YzlhYWUyNSR2YXIkVU1BTFFVUkFfWUVBUl9TVEFSVF9UQUJMRVt5ZWFyIC0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJFVNQUxRVVJBX1lFQVJfU1RBUlRdID0geWVhclN0YXJ0O1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPD0gMTI7IGkrKyl5ZWFyU3RhcnQgKz0gJGVjYjJjNGNjOGM5YWFlMjUkdmFyJHVtYWxxdXJhTW9udGhMZW5ndGgoeWVhciwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIC8vIFBvcnRpb25zIG9mIHRoZSBjb2RlIGluIHRoaXMgZmlsZSBhcmUgYmFzZWQgb24gY29kZSBmcm9tIElDVS5cbi8vIE9yaWdpbmFsIGxpY2Vuc2luZyBjYW4gYmUgZm91bmQgaW4gdGhlIE5PVElDRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuXG5cbmNvbnN0ICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRIRUJSRVdfRVBPQ0ggPSAzNDc5OTc7XG4vLyBIZWJyZXcgZGF0ZSBjYWxjdWxhdGlvbnMgYXJlIHBlcmZvcm1lZCBpbiB0ZXJtcyBvZiBkYXlzLCBob3VycywgYW5kXG4vLyBcInBhcnRzXCIgKG9yIGhhbGFraW0pLCB3aGljaCBhcmUgMS8xMDgwIG9mIGFuIGhvdXIsIG9yIDMgMS8zIHNlY29uZHMuXG5jb25zdCAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkSE9VUl9QQVJUUyA9IDEwODA7XG5jb25zdCAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkREFZX1BBUlRTID0gMjQgKiAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkSE9VUl9QQVJUUztcbi8vIEFuIGFwcHJveGltYXRlIHZhbHVlIGZvciB0aGUgbGVuZ3RoIG9mIGEgbHVuYXIgbW9udGguXG4vLyBJdCBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgeWVhciBhbmQgbW9udGggb2YgYSBnaXZlblxuLy8gYWJzb2x1dGUgZGF0ZS5cbmNvbnN0ICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRNT05USF9EQVlTID0gMjk7XG5jb25zdCAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkTU9OVEhfRlJBQ1QgPSAxMiAqICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRIT1VSX1BBUlRTICsgNzkzO1xuY29uc3QgJDBmNTMyNGVlM2JkZDkzOTYkdmFyJE1PTlRIX1BBUlRTID0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJE1PTlRIX0RBWVMgKiAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkREFZX1BBUlRTICsgJDBmNTMyNGVlM2JkZDkzOTYkdmFyJE1PTlRIX0ZSQUNUO1xuZnVuY3Rpb24gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiAoMCwgJGE1MDkwZDY0MzA1MDIyMzgkZXhwb3J0JDg0MmEyY2YzN2FmOTc3ZTEpKHllYXIgKiA3ICsgMSwgMTkpIDwgNztcbn1cbi8vIFRlc3QgZm9yIGRlbGF5IG9mIHN0YXJ0IG9mIG5ldyB5ZWFyIGFuZCB0byBhdm9pZFxuLy8gU3VuZGF5LCBXZWRuZXNkYXksIGFuZCBGcmlkYXkgYXMgc3RhcnQgb2YgdGhlIG5ldyB5ZWFyLlxuZnVuY3Rpb24gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGhlYnJld0RlbGF5MSh5ZWFyKSB7XG4gICAgbGV0IG1vbnRocyA9IE1hdGguZmxvb3IoKDIzNSAqIHllYXIgLSAyMzQpIC8gMTkpO1xuICAgIGxldCBwYXJ0cyA9IDEyMDg0ICsgMTM3NTMgKiBtb250aHM7XG4gICAgbGV0IGRheSA9IG1vbnRocyAqIDI5ICsgTWF0aC5mbG9vcihwYXJ0cyAvIDI1OTIwKTtcbiAgICBpZiAoKDAsICRhNTA5MGQ2NDMwNTAyMjM4JGV4cG9ydCQ4NDJhMmNmMzdhZjk3N2UxKSgzICogKGRheSArIDEpLCA3KSA8IDMpIGRheSArPSAxO1xuICAgIHJldHVybiBkYXk7XG59XG4vLyBDaGVjayBmb3IgZGVsYXkgaW4gc3RhcnQgb2YgbmV3IHllYXIgZHVlIHRvIGxlbmd0aCBvZiBhZGphY2VudCB5ZWFyc1xuZnVuY3Rpb24gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGhlYnJld0RlbGF5Mih5ZWFyKSB7XG4gICAgbGV0IGxhc3QgPSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkaGVicmV3RGVsYXkxKHllYXIgLSAxKTtcbiAgICBsZXQgcHJlc2VudCA9ICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRoZWJyZXdEZWxheTEoeWVhcik7XG4gICAgbGV0IG5leHQgPSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkaGVicmV3RGVsYXkxKHllYXIgKyAxKTtcbiAgICBpZiAobmV4dCAtIHByZXNlbnQgPT09IDM1NikgcmV0dXJuIDI7XG4gICAgaWYgKHByZXNlbnQgLSBsYXN0ID09PSAzODIpIHJldHVybiAxO1xuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJHN0YXJ0T2ZZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGhlYnJld0RlbGF5MSh5ZWFyKSArICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRoZWJyZXdEZWxheTIoeWVhcik7XG59XG5mdW5jdGlvbiAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkZ2V0RGF5c0luWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRzdGFydE9mWWVhcih5ZWFyICsgMSkgLSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkc3RhcnRPZlllYXIoeWVhcik7XG59XG5mdW5jdGlvbiAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkZ2V0WWVhclR5cGUoeWVhcikge1xuICAgIGxldCB5ZWFyTGVuZ3RoID0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGdldERheXNJblllYXIoeWVhcik7XG4gICAgaWYgKHllYXJMZW5ndGggPiAzODApIHllYXJMZW5ndGggLT0gMzA7IC8vIFN1YnRyYWN0IGxlbmd0aCBvZiBsZWFwIG1vbnRoLlxuICAgIHN3aXRjaCh5ZWFyTGVuZ3RoKXtcbiAgICAgICAgY2FzZSAzNTM6XG4gICAgICAgICAgICByZXR1cm4gMDsgLy8gZGVmaWNpZW50XG4gICAgICAgIGNhc2UgMzU0OlxuICAgICAgICAgICAgcmV0dXJuIDE7IC8vIG5vcm1hbFxuICAgICAgICBjYXNlIDM1NTpcbiAgICAgICAgICAgIHJldHVybiAyOyAvLyBjb21wbGV0ZVxuICAgIH1cbn1cbmZ1bmN0aW9uICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRnZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgIC8vIE5vcm1hbGl6ZSBtb250aCBudW1iZXJzIGZyb20gMSAtIDEzLCBldmVuIG9uIG5vbi1sZWFwIHllYXJzXG4gICAgaWYgKG1vbnRoID49IDYgJiYgISQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRpc0xlYXBZZWFyKHllYXIpKSBtb250aCsrO1xuICAgIC8vIEZpcnN0IG9mIGFsbCwgZGlzcG9zZSBvZiBmaXhlZC1sZW5ndGggMjkgZGF5IG1vbnRoc1xuICAgIGlmIChtb250aCA9PT0gNCB8fCBtb250aCA9PT0gNyB8fCBtb250aCA9PT0gOSB8fCBtb250aCA9PT0gMTEgfHwgbW9udGggPT09IDEzKSByZXR1cm4gMjk7XG4gICAgbGV0IHllYXJUeXBlID0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGdldFllYXJUeXBlKHllYXIpO1xuICAgIC8vIElmIGl0J3MgSGVzaHZhbiwgZGF5cyBkZXBlbmQgb24gbGVuZ3RoIG9mIHllYXJcbiAgICBpZiAobW9udGggPT09IDIpIHJldHVybiB5ZWFyVHlwZSA9PT0gMiA/IDMwIDogMjk7XG4gICAgLy8gU2ltaWxhcmx5LCBLaXNsZXYgdmFyaWVzIHdpdGggdGhlIGxlbmd0aCBvZiB5ZWFyXG4gICAgaWYgKG1vbnRoID09PSAzKSByZXR1cm4geWVhclR5cGUgPT09IDAgPyAyOSA6IDMwO1xuICAgIC8vIEFkYXIgSSBvbmx5IGV4aXN0cyBpbiBsZWFwIHllYXJzXG4gICAgaWYgKG1vbnRoID09PSA2KSByZXR1cm4gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGlzTGVhcFllYXIoeWVhcikgPyAzMCA6IDA7XG4gICAgcmV0dXJuIDMwO1xufVxuY2xhc3MgJDBmNTMyNGVlM2JkZDkzOTYkZXhwb3J0JGNhNDA1MDQ4YjhmYjVhZiB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICBsZXQgZCA9IGpkIC0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJEhFQlJFV19FUE9DSDtcbiAgICAgICAgbGV0IG0gPSBkICogJDBmNTMyNGVlM2JkZDkzOTYkdmFyJERBWV9QQVJUUyAvICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRNT05USF9QQVJUUzsgLy8gTW9udGhzIChhcHByb3gpXG4gICAgICAgIGxldCB5ZWFyID0gTWF0aC5mbG9vcigoMTkgKiBtICsgMjM0KSAvIDIzNSkgKyAxOyAvLyBZZWFycyAoYXBwcm94KVxuICAgICAgICBsZXQgeXMgPSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkc3RhcnRPZlllYXIoeWVhcik7IC8vIDFzdCBkYXkgb2YgeWVhclxuICAgICAgICBsZXQgZGF5T2ZZZWFyID0gTWF0aC5mbG9vcihkIC0geXMpO1xuICAgICAgICAvLyBCZWNhdXNlIG9mIHRoZSBwb3N0cG9uZW1lbnQgcnVsZXMsIGl0J3MgcG9zc2libGUgdG8gZ3Vlc3Mgd3JvbmcuICBGaXggaXQuXG4gICAgICAgIHdoaWxlKGRheU9mWWVhciA8IDEpe1xuICAgICAgICAgICAgeWVhci0tO1xuICAgICAgICAgICAgeXMgPSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkc3RhcnRPZlllYXIoeWVhcik7XG4gICAgICAgICAgICBkYXlPZlllYXIgPSBNYXRoLmZsb29yKGQgLSB5cyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm93IGZpZ3VyZSBvdXQgd2hpY2ggbW9udGggd2UncmUgaW4sIGFuZCB0aGUgZGF0ZSB3aXRoaW4gdGhhdCBtb250aFxuICAgICAgICBsZXQgbW9udGggPSAxO1xuICAgICAgICBsZXQgbW9udGhTdGFydCA9IDA7XG4gICAgICAgIHdoaWxlKG1vbnRoU3RhcnQgPCBkYXlPZlllYXIpe1xuICAgICAgICAgICAgbW9udGhTdGFydCArPSAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpO1xuICAgICAgICAgICAgbW9udGgrKztcbiAgICAgICAgfVxuICAgICAgICBtb250aC0tO1xuICAgICAgICBtb250aFN0YXJ0IC09ICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRnZXREYXlzSW5Nb250aCh5ZWFyLCBtb250aCk7XG4gICAgICAgIGxldCBkYXkgPSBkYXlPZlllYXIgLSBtb250aFN0YXJ0O1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgeWVhciwgbW9udGgsIGRheSk7XG4gICAgfVxuICAgIHRvSnVsaWFuRGF5KGRhdGUpIHtcbiAgICAgICAgbGV0IGpkID0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJHN0YXJ0T2ZZZWFyKGRhdGUueWVhcik7XG4gICAgICAgIGZvcihsZXQgbW9udGggPSAxOyBtb250aCA8IGRhdGUubW9udGg7IG1vbnRoKyspamQgKz0gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGdldERheXNJbk1vbnRoKGRhdGUueWVhciwgbW9udGgpO1xuICAgICAgICByZXR1cm4gamQgKyBkYXRlLmRheSArICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRIRUJSRVdfRVBPQ0g7XG4gICAgfVxuICAgIGdldERheXNJbk1vbnRoKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuICQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRnZXREYXlzSW5Nb250aChkYXRlLnllYXIsIGRhdGUubW9udGgpO1xuICAgIH1cbiAgICBnZXRNb250aHNJblllYXIoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGlzTGVhcFllYXIoZGF0ZS55ZWFyKSA/IDEzIDogMTI7XG4gICAgfVxuICAgIGdldERheXNJblllYXIoZGF0ZSkge1xuICAgICAgICByZXR1cm4gJDBmNTMyNGVlM2JkZDkzOTYkdmFyJGdldERheXNJblllYXIoZGF0ZS55ZWFyKTtcbiAgICB9XG4gICAgZ2V0WWVhcnNJbkVyYSgpIHtcbiAgICAgICAgLy8gNjIzOSBncmVnb3JpYW5cbiAgICAgICAgcmV0dXJuIDk5OTk7XG4gICAgfVxuICAgIGdldEVyYXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIkFNXCJcbiAgICAgICAgXTtcbiAgICB9XG4gICAgYmFsYW5jZVllYXJNb250aChkYXRlLCBwcmV2aW91c0RhdGUpIHtcbiAgICAgICAgLy8gS2VlcCBkYXRlIGluIHRoZSBzYW1lIG1vbnRoIHdoZW4gc3dpdGNoaW5nIGJldHdlZW4gbGVhcCB5ZWFycyBhbmQgbm9uIGxlYXAgeWVhcnNcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZS55ZWFyICE9PSBkYXRlLnllYXIpIHtcbiAgICAgICAgICAgIGlmICgkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkaXNMZWFwWWVhcihwcmV2aW91c0RhdGUueWVhcikgJiYgISQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRpc0xlYXBZZWFyKGRhdGUueWVhcikgJiYgcHJldmlvdXNEYXRlLm1vbnRoID4gNikgZGF0ZS5tb250aC0tO1xuICAgICAgICAgICAgZWxzZSBpZiAoISQwZjUzMjRlZTNiZGQ5Mzk2JHZhciRpc0xlYXBZZWFyKHByZXZpb3VzRGF0ZS55ZWFyKSAmJiAkMGY1MzI0ZWUzYmRkOTM5NiR2YXIkaXNMZWFwWWVhcihkYXRlLnllYXIpICYmIHByZXZpb3VzRGF0ZS5tb250aCA+IDYpIGRhdGUubW9udGgrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmlkZW50aWZpZXIgPSBcImhlYnJld1wiO1xuICAgIH1cbn1cblxuXG4vKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gLy8gUG9ydGlvbnMgb2YgdGhlIGNvZGUgaW4gdGhpcyBmaWxlIGFyZSBiYXNlZCBvbiBjb2RlIGZyb20gSUNVLlxuLy8gT3JpZ2luYWwgbGljZW5zaW5nIGNhbiBiZSBmb3VuZCBpbiB0aGUgTk9USUNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG5cbmNvbnN0ICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRFVEhJT1BJQ19FUE9DSCA9IDE3MjM4NTY7XG5jb25zdCAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkQ09QVElDX0VQT0NIID0gMTgyNDY2NTtcbi8vIFRoZSBkZWx0YSBiZXR3ZWVuIEFtZXRlIEFsZW0gMSBhbmQgQW1ldGUgTWlocmV0IDFcbi8vIEFBIDU1MDEgPSBBTSAxXG5jb25zdCAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkQU1FVEVfTUlIUkVUX0RFTFRBID0gNTUwMDtcbmZ1bmN0aW9uICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRjZVRvSnVsaWFuRGF5KGVwb2NoLCB5ZWFyLCBtb250aCwgZGF5KSB7XG4gICAgcmV0dXJuIGVwb2NoIC8vIGRpZmZlcmVuY2UgZnJvbSBKdWxpYW4gZXBvY2ggdG8gMSwxLDFcbiAgICAgKyAzNjUgKiB5ZWFyIC8vIG51bWJlciBvZiBkYXlzIGZyb20geWVhcnNcbiAgICAgKyBNYXRoLmZsb29yKHllYXIgLyA0KSAvLyBleHRyYSBkYXkgb2YgbGVhcCB5ZWFyXG4gICAgICsgMzAgKiAobW9udGggLSAxIC8vIG51bWJlciBvZiBkYXlzIGZyb20gbW9udGhzICgxIGJhc2VkKVxuICAgICkgKyBkYXkgLSAxIC8vIG51bWJlciBvZiBkYXlzIGZvciBwcmVzZW50IG1vbnRoICgxIGJhc2VkKVxuICAgIDtcbn1cbmZ1bmN0aW9uICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRqdWxpYW5EYXlUb0NFKGVwb2NoLCBqZCkge1xuICAgIGxldCB5ZWFyID0gTWF0aC5mbG9vcig0ICogKGpkIC0gZXBvY2gpIC8gMTQ2MSk7XG4gICAgbGV0IG1vbnRoID0gMSArIE1hdGguZmxvb3IoKGpkIC0gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGNlVG9KdWxpYW5EYXkoZXBvY2gsIHllYXIsIDEsIDEpKSAvIDMwKTtcbiAgICBsZXQgZGF5ID0gamQgKyAxIC0gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGNlVG9KdWxpYW5EYXkoZXBvY2gsIHllYXIsIG1vbnRoLCAxKTtcbiAgICByZXR1cm4gW1xuICAgICAgICB5ZWFyLFxuICAgICAgICBtb250aCxcbiAgICAgICAgZGF5XG4gICAgXTtcbn1cbmZ1bmN0aW9uICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRnZXRMZWFwRGF5KHllYXIpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih5ZWFyICUgNCAvIDMpO1xufVxuZnVuY3Rpb24gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGdldERheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgLy8gVGhlIEV0aGlvcGlhbiBhbmQgQ29wdGljIGNhbGVuZGFycyBoYXZlIDEzIG1vbnRocywgMTIgb2YgMzAgZGF5cyBlYWNoIGFuZFxuICAgIC8vIGFuIGludGVyY2FsYXJ5IG1vbnRoIGF0IHRoZSBlbmQgb2YgdGhlIHllYXIgb2YgNSBvciA2IGRheXMsIGRlcGVuZGluZyB3aGV0aGVyXG4gICAgLy8gdGhlIHllYXIgaXMgYSBsZWFwIHllYXIgb3Igbm90LiBUaGUgTGVhcCBZZWFyIGZvbGxvd3MgdGhlIHNhbWUgcnVsZXMgYXMgdGhlXG4gICAgLy8gSnVsaWFuIENhbGVuZGFyIHNvIHRoYXQgdGhlIGV4dHJhIG1vbnRoIGFsd2F5cyBoYXMgc2l4IGRheXMgaW4gdGhlIHllYXIgYmVmb3JlXG4gICAgLy8gYSBKdWxpYW4gTGVhcCBZZWFyLlxuICAgIGlmIChtb250aCAlIDEzICE9PSAwKSAvLyBub3QgaW50ZXJjYWxhcnkgbW9udGhcbiAgICByZXR1cm4gMzA7XG4gICAgZWxzZSAvLyBpbnRlcmNhbGFyeSBtb250aCA1IGRheXMgKyBwb3NzaWJsZSBsZWFwIGRheVxuICAgIHJldHVybiAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkZ2V0TGVhcERheSh5ZWFyKSArIDU7XG59XG5jbGFzcyAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkMjZiYTZlYWI1ZTIwY2Q3ZCB7XG4gICAgZnJvbUp1bGlhbkRheShqZCkge1xuICAgICAgICBsZXQgW3llYXIsIG1vbnRoLCBkYXldID0gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGp1bGlhbkRheVRvQ0UoJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJEVUSElPUElDX0VQT0NILCBqZCk7XG4gICAgICAgIGxldCBlcmEgPSBcIkFNXCI7XG4gICAgICAgIGlmICh5ZWFyIDw9IDApIHtcbiAgICAgICAgICAgIGVyYSA9IFwiQUFcIjtcbiAgICAgICAgICAgIHllYXIgKz0gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJEFNRVRFX01JSFJFVF9ERUxUQTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgZXJhLCB5ZWFyLCBtb250aCwgZGF5KTtcbiAgICB9XG4gICAgdG9KdWxpYW5EYXkoZGF0ZSkge1xuICAgICAgICBsZXQgeWVhciA9IGRhdGUueWVhcjtcbiAgICAgICAgaWYgKGRhdGUuZXJhID09PSBcIkFBXCIpIHllYXIgLT0gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJEFNRVRFX01JSFJFVF9ERUxUQTtcbiAgICAgICAgcmV0dXJuICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRjZVRvSnVsaWFuRGF5KCQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRFVEhJT1BJQ19FUE9DSCwgeWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXkpO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIHJldHVybiAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkZ2V0RGF5c0luTW9udGgoZGF0ZS55ZWFyLCBkYXRlLm1vbnRoKTtcbiAgICB9XG4gICAgZ2V0TW9udGhzSW5ZZWFyKCkge1xuICAgICAgICByZXR1cm4gMTM7XG4gICAgfVxuICAgIGdldERheXNJblllYXIoZGF0ZSkge1xuICAgICAgICByZXR1cm4gMzY1ICsgJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGdldExlYXBEYXkoZGF0ZS55ZWFyKTtcbiAgICB9XG4gICAgZ2V0WWVhcnNJbkVyYShkYXRlKSB7XG4gICAgICAgIC8vIDk5OTktMTItMzEgZ3JlZ29yaWFuIGlzIDk5OTItMjAtMDIgZXRoaW9waWMuXG4gICAgICAgIC8vIFJvdW5kIGRvd24gdG8gOTk5MSBmb3IgdGhlIGxhc3QgZnVsbCB5ZWFyLlxuICAgICAgICAvLyBBQSA5OTk5LTAxLTAxIGV0aGlvcGljIGlzIDQ1MDYtMDktMzAgZ3JlZ29yaWFuLlxuICAgICAgICByZXR1cm4gZGF0ZS5lcmEgPT09IFwiQUFcIiA/IDk5OTkgOiA5OTkxO1xuICAgIH1cbiAgICBnZXRFcmFzKCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgXCJBQVwiLFxuICAgICAgICAgICAgXCJBTVwiXG4gICAgICAgIF07XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuaWRlbnRpZmllciA9IFwiZXRoaW9waWNcIjtcbiAgICB9XG59XG5jbGFzcyAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkZDcyZTBjMzcwMDVhNDkxNCBleHRlbmRzICQ0ZGIwNGQxMDUxYWYwZjJmJGV4cG9ydCQyNmJhNmVhYjVlMjBjZDdkIHtcbiAgICBmcm9tSnVsaWFuRGF5KGpkKSB7XG4gICAgICAgIGxldCBbeWVhciwgbW9udGgsIGRheV0gPSAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkanVsaWFuRGF5VG9DRSgkNGRiMDRkMTA1MWFmMGYyZiR2YXIkRVRISU9QSUNfRVBPQ0gsIGpkKTtcbiAgICAgICAgeWVhciArPSAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkQU1FVEVfTUlIUkVUX0RFTFRBO1xuICAgICAgICByZXR1cm4gbmV3ICgwLCAkNjI1YWQxZTFmNGM0M2JjMSRleHBvcnQkOTlmYWE3NjBjNzkwOGU0ZikodGhpcywgXCJBQVwiLCB5ZWFyLCBtb250aCwgZGF5KTtcbiAgICB9XG4gICAgZ2V0RXJhcygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFwiQUFcIlxuICAgICAgICBdO1xuICAgIH1cbiAgICBnZXRZZWFyc0luRXJhKCkge1xuICAgICAgICAvLyA5OTk5LTEzLTA0IGV0aGlvYWEgaXMgdGhlIG1heGltdW0gZGF0ZSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byA0NTA2LTA5LTI5IGdyZWdvcmlhbi5cbiAgICAgICAgcmV0dXJuIDk5OTk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gXCJldGhpb2FhXCIgLy8gYWxzbyBrbm93biBhcyAnZXRoaW9waWMtYW1ldGUtYWxlbScgaW4gSUNVXG4gICAgICAgIDtcbiAgICB9XG59XG5jbGFzcyAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkZmU2MjQzY2JlMWE0YjdjMSBleHRlbmRzICQ0ZGIwNGQxMDUxYWYwZjJmJGV4cG9ydCQyNmJhNmVhYjVlMjBjZDdkIHtcbiAgICBmcm9tSnVsaWFuRGF5KGpkKSB7XG4gICAgICAgIGxldCBbeWVhciwgbW9udGgsIGRheV0gPSAkNGRiMDRkMTA1MWFmMGYyZiR2YXIkanVsaWFuRGF5VG9DRSgkNGRiMDRkMTA1MWFmMGYyZiR2YXIkQ09QVElDX0VQT0NILCBqZCk7XG4gICAgICAgIGxldCBlcmEgPSBcIkNFXCI7XG4gICAgICAgIGlmICh5ZWFyIDw9IDApIHtcbiAgICAgICAgICAgIGVyYSA9IFwiQkNFXCI7XG4gICAgICAgICAgICB5ZWFyID0gMSAtIHllYXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDYyNWFkMWUxZjRjNDNiYzEkZXhwb3J0JDk5ZmFhNzYwYzc5MDhlNGYpKHRoaXMsIGVyYSwgeWVhciwgbW9udGgsIGRheSk7XG4gICAgfVxuICAgIHRvSnVsaWFuRGF5KGRhdGUpIHtcbiAgICAgICAgbGV0IHllYXIgPSBkYXRlLnllYXI7XG4gICAgICAgIGlmIChkYXRlLmVyYSA9PT0gXCJCQ0VcIikgeWVhciA9IDEgLSB5ZWFyO1xuICAgICAgICByZXR1cm4gJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJGNlVG9KdWxpYW5EYXkoJDRkYjA0ZDEwNTFhZjBmMmYkdmFyJENPUFRJQ19FUE9DSCwgeWVhciwgZGF0ZS5tb250aCwgZGF0ZS5kYXkpO1xuICAgIH1cbiAgICBnZXREYXlzSW5Nb250aChkYXRlKSB7XG4gICAgICAgIGxldCB5ZWFyID0gZGF0ZS55ZWFyO1xuICAgICAgICBpZiAoZGF0ZS5lcmEgPT09IFwiQkNFXCIpIHllYXIgPSAxIC0geWVhcjtcbiAgICAgICAgcmV0dXJuICQ0ZGIwNGQxMDUxYWYwZjJmJHZhciRnZXREYXlzSW5Nb250aCh5ZWFyLCBkYXRlLm1vbnRoKTtcbiAgICB9XG4gICAgaXNJbnZlcnNlRXJhKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGUuZXJhID09PSBcIkJDRVwiO1xuICAgIH1cbiAgICBiYWxhbmNlRGF0ZShkYXRlKSB7XG4gICAgICAgIGlmIChkYXRlLnllYXIgPD0gMCkge1xuICAgICAgICAgICAgZGF0ZS5lcmEgPSBkYXRlLmVyYSA9PT0gXCJCQ0VcIiA/IFwiQ0VcIiA6IFwiQkNFXCI7XG4gICAgICAgICAgICBkYXRlLnllYXIgPSAxIC0gZGF0ZS55ZWFyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEVyYXMoKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBcIkJDRVwiLFxuICAgICAgICAgICAgXCJDRVwiXG4gICAgICAgIF07XG4gICAgfVxuICAgIGdldFllYXJzSW5FcmEoZGF0ZSkge1xuICAgICAgICAvLyA5OTk5LTEyLTMwIGdyZWdvcmlhbiBpcyA5NzE2LTAyLTIwIGNvcHRpYy5cbiAgICAgICAgLy8gUm91bmQgZG93biB0byA5NzE1IGZvciB0aGUgbGFzdCBmdWxsIHllYXIuXG4gICAgICAgIC8vIEJDRSA5OTk5LTAxLTAxIGNvcHRpYyBpcyBCQyA5NzE2LTA2LTE1IGdyZWdvcmlhbi5cbiAgICAgICAgcmV0dXJuIGRhdGUuZXJhID09PSBcIkJDRVwiID8gOTk5OSA6IDk3MTU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3Mpe1xuICAgICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgICAgdGhpcy5pZGVudGlmaWVyID0gXCJjb3B0aWNcIjtcbiAgICB9XG59XG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIFxuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uICQ0OTIyYzBhNWE2OWRhMGJhJGV4cG9ydCRkZDBiYmM5YjI2ZGVmZTM3KG5hbWUpIHtcbiAgICBzd2l0Y2gobmFtZSl7XG4gICAgICAgIGNhc2UgXCJidWRkaGlzdFwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDU2MWM0ZWYwNTgyNzhiNzQkZXhwb3J0JDQyZDIwYTc4MzAxZGVlNDQpKCk7XG4gICAgICAgIGNhc2UgXCJldGhpb3BpY1wiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDRkYjA0ZDEwNTFhZjBmMmYkZXhwb3J0JDI2YmE2ZWFiNWUyMGNkN2QpKCk7XG4gICAgICAgIGNhc2UgXCJldGhpb2FhXCI6XG4gICAgICAgICAgICByZXR1cm4gbmV3ICgwLCAkNGRiMDRkMTA1MWFmMGYyZiRleHBvcnQkZDcyZTBjMzcwMDVhNDkxNCkoKTtcbiAgICAgICAgY2FzZSBcImNvcHRpY1wiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDRkYjA0ZDEwNTFhZjBmMmYkZXhwb3J0JGZlNjI0M2NiZTFhNGI3YzEpKCk7XG4gICAgICAgIGNhc2UgXCJoZWJyZXdcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDAsICQwZjUzMjRlZTNiZGQ5Mzk2JGV4cG9ydCRjYTQwNTA0OGI4ZmI1YWYpKCk7XG4gICAgICAgIGNhc2UgXCJpbmRpYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDAsICQ1ZjFkZmE1YzY3NjA5ZmU2JGV4cG9ydCQzOWYzMWM2MzlmYTE1NzI2KSgpO1xuICAgICAgICBjYXNlIFwiaXNsYW1pYy1jaXZpbFwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJGVjYjJjNGNjOGM5YWFlMjUkZXhwb3J0JDIwNjY3OTVhYWRkMzdiZmMpKCk7XG4gICAgICAgIGNhc2UgXCJpc2xhbWljLXRibGFcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgKDAsICRlY2IyYzRjYzhjOWFhZTI1JGV4cG9ydCQzN2YwODg3ZjJmOWQyMmY3KSgpO1xuICAgICAgICBjYXNlIFwiaXNsYW1pYy11bWFscXVyYVwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJGVjYjJjNGNjOGM5YWFlMjUkZXhwb3J0JDViYWFiNDc1OGMyMzEwNzYpKCk7XG4gICAgICAgIGNhc2UgXCJqYXBhbmVzZVwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJGIwYWMwNjAyZWY2NDZiMmMkZXhwb3J0JGI3NDZhYjJiNjBjZGZmYmYpKCk7XG4gICAgICAgIGNhc2UgXCJwZXJzaWFuXCI6XG4gICAgICAgICAgICByZXR1cm4gbmV3ICgwLCAkM2MwNjAxODFmYzcyNDlhZSRleHBvcnQkMzdmY2NkYmZkMTRjNTkzOSkoKTtcbiAgICAgICAgY2FzZSBcInJvY1wiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoMCwgJDljYzVkMzU3N2VjNDAyNDMkZXhwb3J0JDY1ZTAxMDgwYWZjYjA3OTkpKCk7XG4gICAgICAgIGNhc2UgXCJncmVnb3J5XCI6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbmV3ICgwLCAkYWYxNGM5ODEyZmRjZWIzMyRleHBvcnQkODBlZTYyNDVlYzRmMjllYykoKTtcbiAgICB9XG59XG5cblxuXG5cblxuLypcbiAqIENvcHlyaWdodCAyMDIwIEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbiAqIG9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbiAqIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuICogT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG4gKiBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovIGxldCAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkZm9ybWF0dGVyQ2FjaGUgPSBuZXcgTWFwKCk7XG5jbGFzcyAkOGYyM2EwNGFlOTBhNTg4YiRleHBvcnQkYWQ5OTFiNjYxMzM4NTFjZiB7XG4gICAgLyoqIEZvcm1hdHMgYSBkYXRlIGFzIGEgc3RyaW5nIGFjY29yZGluZyB0byB0aGUgbG9jYWxlIGFuZCBmb3JtYXQgb3B0aW9ucyBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLiAqLyBmb3JtYXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmZvcm1hdCh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBGb3JtYXRzIGEgZGF0ZSB0byBhbiBhcnJheSBvZiBwYXJ0cyBzdWNoIGFzIHNlcGFyYXRvcnMsIG51bWJlcnMsIHB1bmN0dWF0aW9uLCBhbmQgbW9yZS4gKi8gZm9ybWF0VG9QYXJ0cyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0VG9QYXJ0cyh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKiBGb3JtYXRzIGEgZGF0ZSByYW5nZSBhcyBhIHN0cmluZy4gKi8gZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0UmFuZ2UgPT09IFwiZnVuY3Rpb25cIikgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0UmFuZ2Uoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJFbmQgZGF0ZSBtdXN0IGJlID49IHN0YXJ0IGRhdGVcIik7XG4gICAgICAgIC8vIFZlcnkgYmFzaWMgZmFsbGJhY2sgZm9yIG9sZCBicm93c2Vycy5cbiAgICAgICAgcmV0dXJuIGAke3RoaXMuZm9ybWF0dGVyLmZvcm1hdChzdGFydCl9IFxcdXsyMDEzfSAke3RoaXMuZm9ybWF0dGVyLmZvcm1hdChlbmQpfWA7XG4gICAgfVxuICAgIC8qKiBGb3JtYXRzIGEgZGF0ZSByYW5nZSBhcyBhbiBhcnJheSBvZiBwYXJ0cy4gKi8gZm9ybWF0UmFuZ2VUb1BhcnRzKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZm9ybWF0dGVyLmZvcm1hdFJhbmdlVG9QYXJ0cyA9PT0gXCJmdW5jdGlvblwiKSAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdHRlci5mb3JtYXRSYW5nZVRvUGFydHMoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmIChlbmQgPCBzdGFydCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJFbmQgZGF0ZSBtdXN0IGJlID49IHN0YXJ0IGRhdGVcIik7XG4gICAgICAgIGxldCBzdGFydFBhcnRzID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0VG9QYXJ0cyhzdGFydCk7XG4gICAgICAgIGxldCBlbmRQYXJ0cyA9IHRoaXMuZm9ybWF0dGVyLmZvcm1hdFRvUGFydHMoZW5kKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLnN0YXJ0UGFydHMubWFwKChwKT0+KHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucCxcbiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBcInN0YXJ0UmFuZ2VcIlxuICAgICAgICAgICAgICAgIH0pKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImxpdGVyYWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCIgXFx1MjAxMyBcIixcbiAgICAgICAgICAgICAgICBzb3VyY2U6IFwic2hhcmVkXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuLi5lbmRQYXJ0cy5tYXAoKHApPT4oe1xuICAgICAgICAgICAgICAgICAgICAuLi5wLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IFwiZW5kUmFuZ2VcIlxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKiogUmV0dXJucyB0aGUgcmVzb2x2ZWQgZm9ybWF0dGluZyBvcHRpb25zIGJhc2VkIG9uIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSBjb25zdHJ1Y3Rvci4gKi8gcmVzb2x2ZWRPcHRpb25zKCkge1xuICAgICAgICBsZXQgcmVzb2x2ZWRPcHRpb25zID0gdGhpcy5mb3JtYXR0ZXIucmVzb2x2ZWRPcHRpb25zKCk7XG4gICAgICAgIGlmICgkOGYyM2EwNGFlOTBhNTg4YiR2YXIkaGFzQnVnZ3lSZXNvbHZlZEhvdXJDeWNsZSgpKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVzb2x2ZWRIb3VyQ3ljbGUpIHRoaXMucmVzb2x2ZWRIb3VyQ3ljbGUgPSAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkZ2V0UmVzb2x2ZWRIb3VyQ3ljbGUocmVzb2x2ZWRPcHRpb25zLmxvY2FsZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIHJlc29sdmVkT3B0aW9ucy5ob3VyQ3ljbGUgPSB0aGlzLnJlc29sdmVkSG91ckN5Y2xlO1xuICAgICAgICAgICAgcmVzb2x2ZWRPcHRpb25zLmhvdXIxMiA9IHRoaXMucmVzb2x2ZWRIb3VyQ3ljbGUgPT09IFwiaDExXCIgfHwgdGhpcy5yZXNvbHZlZEhvdXJDeWNsZSA9PT0gXCJoMTJcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTYWZhcmkgdXNlcyBhIGRpZmZlcmVudCBuYW1lIGZvciB0aGUgRXRoaW9waWMgKEFtZXRlIEFsZW0pIGNhbGVuZGFyLlxuICAgICAgICAvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjQxNTY0XG4gICAgICAgIGlmIChyZXNvbHZlZE9wdGlvbnMuY2FsZW5kYXIgPT09IFwiZXRoaW9waWMtYW1ldGUtYWxlbVwiKSByZXNvbHZlZE9wdGlvbnMuY2FsZW5kYXIgPSBcImV0aGlvYWFcIjtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVkT3B0aW9ucztcbiAgICB9XG4gICAgY29uc3RydWN0b3IobG9jYWxlLCBvcHRpb25zID0ge30pe1xuICAgICAgICB0aGlzLmZvcm1hdHRlciA9ICQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRnZXRDYWNoZWREYXRlRm9ybWF0dGVyKGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufVxuLy8gVGhlcmUgYXJlIG11bHRpcGxlIGJ1Z3MgaW52b2x2aW5nIHRoZSBob3VyMTIgYW5kIGhvdXJDeWNsZSBvcHRpb25zIGluIHZhcmlvdXMgYnJvd3NlciBlbmdpbmVzLlxuLy8gICAtIENocm9tZSBbMV0gKGFuZCB0aGUgRUNNQSA0MDIgc3BlYyBbMl0pIHJlc29sdmUgaG91cjEyOiBmYWxzZSBpbiBFbmdsaXNoIGFuZCBvdGhlciBsb2NhbGVzIHRvIGgyNCAoMjQ6MDAgLSAyMzo1OSlcbi8vICAgICByYXRoZXIgdGhhbiBoMjMgKDAwOjAwIC0gMjM6NTkpLiBTYW1lIGNhbiBoYXBwZW4gd2l0aCBob3VyMTI6IHRydWUgaW4gRnJlbmNoLCB3aGljaCBDaHJvbWUgcmVzb2x2ZXMgdG8gaDExICgwMDowMCAtIDExOjU5KVxuLy8gICAgIHJhdGhlciB0aGFuIGgxMiAoMTI6MDAgLSAxMTo1OSkuXG4vLyAgIC0gV2ViS2l0IHJldHVybnMgYW4gaW5jb3JyZWN0IGhvdXJDeWNsZSByZXNvbHZlZCBvcHRpb24gaW4gdGhlIEZyZW5jaCBsb2NhbGUgZHVlIHRvIGluY29ycmVjdCBwYXJzaW5nIG9mICdoJyBsaXRlcmFsXG4vLyAgICAgaW4gdGhlIHJlc29sdmVkIHBhdHRlcm4uIEl0IGFsc28gZm9ybWF0cyBpbmNvcnJlY3RseSB3aGVuIHNwZWNpZnlpbmcgdGhlIGhvdXJDeWNsZSBvcHRpb24gZm9yIHRoZSBzYW1lIHJlYXNvbi4gWzNdXG4vLyBbMV0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MTA0NTc5MVxuLy8gWzJdIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWE0MDIvaXNzdWVzLzQwMlxuLy8gWzNdIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yMjkzMTNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bmljb2RlLW9yZy9jbGRyL2Jsb2IvMDE4YjU1ZWZmN2NlYjM4OWM3ZTNmYzQ0ZTJmNjU3ZWFlM2IxMGIzOC9jb21tb24vc3VwcGxlbWVudGFsL3N1cHBsZW1lbnRhbERhdGEueG1sI0w0Nzc0LUw0ODAyXG5jb25zdCAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkaG91cjEyUHJlZmVyZW5jZXMgPSB7XG4gICAgdHJ1ZToge1xuICAgICAgICAvLyBPbmx5IEphcGFuZXNlIHVzZXMgdGhlIGgxMSBzdHlsZSBmb3IgMTIgaG91ciB0aW1lLiBBbGwgb3RoZXJzIHVzZSBoMTIuXG4gICAgICAgIGphOiBcImgxMVwiXG4gICAgfSxcbiAgICBmYWxzZToge1xuICAgIH1cbn07XG5mdW5jdGlvbiAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkZ2V0Q2FjaGVkRGF0ZUZvcm1hdHRlcihsb2NhbGUsIG9wdGlvbnMgPSB7fSkge1xuICAgIC8vIFdvcmsgYXJvdW5kIGJ1Z2d5IGhvdXIxMiBiZWhhdmlvciBpbiBDaHJvbWUgLyBFQ01BIDQwMiBzcGVjIGJ5IHVzaW5nIGhvdXJDeWNsZSBpbnN0ZWFkLlxuICAgIC8vIE9ubHkgYXBwbHkgdGhlIHdvcmthcm91bmQgaWYgdGhlIGlzc3VlIGlzIGRldGVjdGVkLCBiZWNhdXNlIHRoZSBob3VyQ3ljbGUgb3B0aW9uIGlzIGJ1Z2d5IGluIFNhZmFyaS5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuaG91cjEyID09PSBcImJvb2xlYW5cIiAmJiAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkaGFzQnVnZ3lIb3VyMTJCZWhhdmlvcigpKSB7XG4gICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zXG4gICAgICAgIH07XG4gICAgICAgIGxldCBwcmVmID0gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJGhvdXIxMlByZWZlcmVuY2VzW1N0cmluZyhvcHRpb25zLmhvdXIxMildW2xvY2FsZS5zcGxpdChcIi1cIilbMF1dO1xuICAgICAgICBsZXQgZGVmYXVsdEhvdXJDeWNsZSA9IG9wdGlvbnMuaG91cjEyID8gXCJoMTJcIiA6IFwiaDIzXCI7XG4gICAgICAgIG9wdGlvbnMuaG91ckN5Y2xlID0gcHJlZiAhPT0gbnVsbCAmJiBwcmVmICE9PSB2b2lkIDAgPyBwcmVmIDogZGVmYXVsdEhvdXJDeWNsZTtcbiAgICAgICAgZGVsZXRlIG9wdGlvbnMuaG91cjEyO1xuICAgIH1cbiAgICBsZXQgY2FjaGVLZXkgPSBsb2NhbGUgKyAob3B0aW9ucyA/IE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLnNvcnQoKGEsIGIpPT5hWzBdIDwgYlswXSA/IC0xIDogMSkuam9pbigpIDogXCJcIik7XG4gICAgaWYgKCQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRmb3JtYXR0ZXJDYWNoZS5oYXMoY2FjaGVLZXkpKSByZXR1cm4gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJGZvcm1hdHRlckNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgbGV0IG51bWJlckZvcm1hdHRlciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgJDhmMjNhMDRhZTkwYTU4OGIkdmFyJGZvcm1hdHRlckNhY2hlLnNldChjYWNoZUtleSwgbnVtYmVyRm9ybWF0dGVyKTtcbiAgICByZXR1cm4gbnVtYmVyRm9ybWF0dGVyO1xufVxubGV0ICQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRfaGFzQnVnZ3lIb3VyMTJCZWhhdmlvciA9IG51bGw7XG5mdW5jdGlvbiAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkaGFzQnVnZ3lIb3VyMTJCZWhhdmlvcigpIHtcbiAgICBpZiAoJDhmMjNhMDRhZTkwYTU4OGIkdmFyJF9oYXNCdWdneUhvdXIxMkJlaGF2aW9yID09IG51bGwpICQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRfaGFzQnVnZ3lIb3VyMTJCZWhhdmlvciA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZW4tVVNcIiwge1xuICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgaG91cjEyOiBmYWxzZVxuICAgIH0pLmZvcm1hdChuZXcgRGF0ZSgyMDIwLCAyLCAzLCAwKSkgPT09IFwiMjRcIjtcbiAgICByZXR1cm4gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJF9oYXNCdWdneUhvdXIxMkJlaGF2aW9yO1xufVxubGV0ICQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRfaGFzQnVnZ3lSZXNvbHZlZEhvdXJDeWNsZSA9IG51bGw7XG5mdW5jdGlvbiAkOGYyM2EwNGFlOTBhNTg4YiR2YXIkaGFzQnVnZ3lSZXNvbHZlZEhvdXJDeWNsZSgpIHtcbiAgICBpZiAoJDhmMjNhMDRhZTkwYTU4OGIkdmFyJF9oYXNCdWdneVJlc29sdmVkSG91ckN5Y2xlID09IG51bGwpICQ4ZjIzYTA0YWU5MGE1ODhiJHZhciRfaGFzQnVnZ3lSZXNvbHZlZEhvdXJDeWNsZSA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KFwiZnJcIiwge1xuICAgICAgICBob3VyOiBcIm51bWVyaWNcIixcbiAgICAgICAgaG91cjEyOiBmYWxzZVxuICAgIH0pLnJlc29sdmVkT3B0aW9ucygpLmhvdXJDeWNsZSA9PT0gXCJoMTJcIjtcbiAgICByZXR1cm4gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJF9oYXNCdWdneVJlc29sdmVkSG91ckN5Y2xlO1xufVxuZnVuY3Rpb24gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJGdldFJlc29sdmVkSG91ckN5Y2xlKGxvY2FsZSwgb3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucy50aW1lU3R5bGUgJiYgIW9wdGlvbnMuaG91cikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAvLyBXb3JrIGFyb3VuZCBidWdneSByZXN1bHRzIGluIHJlc29sdmVkIGhvdXJDeWNsZSBhbmQgaG91cjEyIG9wdGlvbnMgaW4gV2ViS2l0LlxuICAgIC8vIEZvcm1hdCB0aGUgbWluaW11bSBwb3NzaWJsZSBob3VyIGFuZCBtYXhpbXVtIHBvc3NpYmxlIGhvdXIgaW4gYSBkYXkgYW5kIHBhcnNlIHRoZSByZXN1bHRzLlxuICAgIGxvY2FsZSA9IGxvY2FsZS5yZXBsYWNlKC8oLXUtKT8tbnUtW2EtekEtWjAtOV0rLywgXCJcIik7XG4gICAgbG9jYWxlICs9IChsb2NhbGUuaW5jbHVkZXMoXCItdS1cIikgPyBcIlwiIDogXCItdVwiKSArIFwiLW51LWxhdG5cIjtcbiAgICBsZXQgZm9ybWF0dGVyID0gJDhmMjNhMDRhZTkwYTU4OGIkdmFyJGdldENhY2hlZERhdGVGb3JtYXR0ZXIobG9jYWxlLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHRpbWVab25lOiB1bmRlZmluZWQgLy8gdXNlIGxvY2FsIHRpbWV6b25lXG4gICAgfSk7XG4gICAgbGV0IG1pbiA9IHBhcnNlSW50KGZvcm1hdHRlci5mb3JtYXRUb1BhcnRzKG5ldyBEYXRlKDIwMjAsIDIsIDMsIDApKS5maW5kKChwKT0+cC50eXBlID09PSBcImhvdXJcIikudmFsdWUsIDEwKTtcbiAgICBsZXQgbWF4ID0gcGFyc2VJbnQoZm9ybWF0dGVyLmZvcm1hdFRvUGFydHMobmV3IERhdGUoMjAyMCwgMiwgMywgMjMpKS5maW5kKChwKT0+cC50eXBlID09PSBcImhvdXJcIikudmFsdWUsIDEwKTtcbiAgICBpZiAobWluID09PSAwICYmIG1heCA9PT0gMjMpIHJldHVybiBcImgyM1wiO1xuICAgIGlmIChtaW4gPT09IDI0ICYmIG1heCA9PT0gMjMpIHJldHVybiBcImgyNFwiO1xuICAgIGlmIChtaW4gPT09IDAgJiYgbWF4ID09PSAxMSkgcmV0dXJuIFwiaDExXCI7XG4gICAgaWYgKG1pbiA9PT0gMTIgJiYgbWF4ID09PSAxMSkgcmV0dXJuIFwiaDEyXCI7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBob3VyIGN5Y2xlIHJlc3VsdFwiKTtcbn1cblxuXG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFpbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@internationalized/date/dist/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@internationalized/message/dist/main.js":
/*!**************************************************************!*\
  !*** ./node_modules/@internationalized/message/dist/main.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var $g9nQA$intlmessageformat = __webpack_require__(/*! intl-messageformat */ \"(ssr)/./node_modules/intl-messageformat/index.js\");\n\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n$parcel$export(module.exports, \"MessageDictionary\", () => $9a5a7b8408290694$export$64839e615120df17);\n$parcel$export(module.exports, \"MessageFormatter\", () => $7a31ee9993c13f0b$export$526ebc05ff964723);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ class $9a5a7b8408290694$export$64839e615120df17 {\n    getStringForLocale(key, locale) {\n        let strings = this.messages[locale];\n        if (!strings) {\n            strings = $9a5a7b8408290694$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n            this.messages[locale] = strings;\n        }\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    constructor(messages, defaultLocale = \"en-US\"){\n        // Clone messages so we don't modify the original object.\n        this.messages = {\n            ...messages\n        };\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $9a5a7b8408290694$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $9a5a7b8408290694$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \"-\")) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $9a5a7b8408290694$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split(\"-\")[0];\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nclass $7a31ee9993c13f0b$export$526ebc05ff964723 {\n    format(key, variables) {\n        let message = this.cache[key];\n        if (!message) {\n            let msg = this.messages.getStringForLocale(key, this.locale);\n            if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);\n            message = new (0, ($parcel$interopDefault($g9nQA$intlmessageformat)))(msg, this.locale);\n            this.cache[key] = message;\n        }\n        let varCopy;\n        if (variables) varCopy = Object.keys(variables).reduce((acc, key)=>{\n            acc[key] = variables[key] == null ? false : variables[key];\n            return acc;\n        }, {});\n        return message.format(varCopy);\n    }\n    constructor(locale, messages){\n        this.locale = locale;\n        this.messages = messages;\n        this.cache = {};\n    }\n}\n\n\n\n\n//# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGludGVybmF0aW9uYWxpemVkL21lc3NhZ2UvZGlzdC9tYWluLmpzIiwibWFwcGluZ3MiOiJBQUFBLCtCQUErQixtQkFBTyxDQUFDLDRFQUFvQjs7O0FBRzNEO0FBQ0EsK0JBQStCLHFEQUFxRDtBQUNwRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLEtBQUssS0FBSyxRQUFRO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLEtBQUssS0FBSyxhQUFhO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQSIsInNvdXJjZXMiOlsid2VicGFjazovL2xwLWFscGlsb2dpLy4vbm9kZV9tb2R1bGVzL0BpbnRlcm5hdGlvbmFsaXplZC9tZXNzYWdlL2Rpc3QvbWFpbi5qcz9mMWFjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZzluUUEkaW50bG1lc3NhZ2Vmb3JtYXQgPSByZXF1aXJlKFwiaW50bC1tZXNzYWdlZm9ybWF0XCIpO1xuXG5cbmZ1bmN0aW9uICRwYXJjZWwkZXhwb3J0KGUsIG4sIHYsIHMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG4sIHtnZXQ6IHYsIHNldDogcywgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG59XG5cbmZ1bmN0aW9uICRwYXJjZWwkaW50ZXJvcERlZmF1bHQoYSkge1xuICByZXR1cm4gYSAmJiBhLl9fZXNNb2R1bGUgPyBhLmRlZmF1bHQgOiBhO1xufVxuXG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJNZXNzYWdlRGljdGlvbmFyeVwiLCAoKSA9PiAkOWE1YTdiODQwODI5MDY5NCRleHBvcnQkNjQ4MzllNjE1MTIwZGYxNyk7XG4kcGFyY2VsJGV4cG9ydChtb2R1bGUuZXhwb3J0cywgXCJNZXNzYWdlRm9ybWF0dGVyXCIsICgpID0+ICQ3YTMxZWU5OTkzYzEzZjBiJGV4cG9ydCQ1MjZlYmMwNWZmOTY0NzIzKTtcbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyAvKlxuICogQ29weXJpZ2h0IDIwMjAgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxuICogb2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxuICogdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG4gKiBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbiAqIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi8gY2xhc3MgJDlhNWE3Yjg0MDgyOTA2OTQkZXhwb3J0JDY0ODM5ZTYxNTEyMGRmMTcge1xuICAgIGdldFN0cmluZ0ZvckxvY2FsZShrZXksIGxvY2FsZSkge1xuICAgICAgICBsZXQgc3RyaW5ncyA9IHRoaXMubWVzc2FnZXNbbG9jYWxlXTtcbiAgICAgICAgaWYgKCFzdHJpbmdzKSB7XG4gICAgICAgICAgICBzdHJpbmdzID0gJDlhNWE3Yjg0MDgyOTA2OTQkdmFyJGdldFN0cmluZ3NGb3JMb2NhbGUobG9jYWxlLCB0aGlzLm1lc3NhZ2VzLCB0aGlzLmRlZmF1bHRMb2NhbGUpO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlc1tsb2NhbGVdID0gc3RyaW5ncztcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3RyaW5nID0gc3RyaW5nc1trZXldO1xuICAgICAgICBpZiAoIXN0cmluZykgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBpbnRsIG1lc3NhZ2UgJHtrZXl9IGluICR7bG9jYWxlfSBsb2NhbGVgKTtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG4gICAgY29uc3RydWN0b3IobWVzc2FnZXMsIGRlZmF1bHRMb2NhbGUgPSBcImVuLVVTXCIpe1xuICAgICAgICAvLyBDbG9uZSBtZXNzYWdlcyBzbyB3ZSBkb24ndCBtb2RpZnkgdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IHtcbiAgICAgICAgICAgIC4uLm1lc3NhZ2VzXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGVmYXVsdExvY2FsZSA9IGRlZmF1bHRMb2NhbGU7XG4gICAgfVxufVxuZnVuY3Rpb24gJDlhNWE3Yjg0MDgyOTA2OTQkdmFyJGdldFN0cmluZ3NGb3JMb2NhbGUobG9jYWxlLCBzdHJpbmdzLCBkZWZhdWx0TG9jYWxlID0gXCJlbi1VU1wiKSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gZXhhY3QgbWF0Y2gsIHVzZSBpdC5cbiAgICBpZiAoc3RyaW5nc1tsb2NhbGVdKSByZXR1cm4gc3RyaW5nc1tsb2NhbGVdO1xuICAgIC8vIEF0dGVtcHQgdG8gZmluZCB0aGUgY2xvc2VzdCBtYXRjaCBieSBsYW5ndWFnZS5cbiAgICAvLyBGb3IgZXhhbXBsZSwgaWYgdGhlIGxvY2FsZSBpcyBmci1DQSAoRnJlbmNoIENhbmFkaWFuKSwgYnV0IHRoZXJlIGlzIG9ubHlcbiAgICAvLyBhbiBmci1GUiAoRnJhbmNlKSBzZXQgb2Ygc3RyaW5ncywgdXNlIHRoYXQuXG4gICAgLy8gVGhpcyBjb3VsZCBiZSByZXBsYWNlZCB3aXRoIEludGwuTG9jYWxlTWF0Y2hlciBvbmNlIGl0IGlzIHN1cHBvcnRlZC5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1pbnRsLWxvY2FsZW1hdGNoZXJcbiAgICBsZXQgbGFuZ3VhZ2UgPSAkOWE1YTdiODQwODI5MDY5NCR2YXIkZ2V0TGFuZ3VhZ2UobG9jYWxlKTtcbiAgICBpZiAoc3RyaW5nc1tsYW5ndWFnZV0pIHJldHVybiBzdHJpbmdzW2xhbmd1YWdlXTtcbiAgICBmb3IobGV0IGtleSBpbiBzdHJpbmdzKXtcbiAgICAgICAgaWYgKGtleS5zdGFydHNXaXRoKGxhbmd1YWdlICsgXCItXCIpKSByZXR1cm4gc3RyaW5nc1trZXldO1xuICAgIH1cbiAgICAvLyBOb3RoaW5nIGNsb3NlLCB1c2UgZW5nbGlzaC5cbiAgICByZXR1cm4gc3RyaW5nc1tkZWZhdWx0TG9jYWxlXTtcbn1cbmZ1bmN0aW9uICQ5YTVhN2I4NDA4MjkwNjk0JHZhciRnZXRMYW5ndWFnZShsb2NhbGUpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKEludGwuTG9jYWxlKSAvLyBAdHMtaWdub3JlXG4gICAgcmV0dXJuIG5ldyBJbnRsLkxvY2FsZShsb2NhbGUpLmxhbmd1YWdlO1xuICAgIHJldHVybiBsb2NhbGUuc3BsaXQoXCItXCIpWzBdO1xufVxuXG5cbi8qXG4gKiBDb3B5cmlnaHQgMjAyMCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG4gKiBvZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG4gKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbiAqIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqLyBcbmNsYXNzICQ3YTMxZWU5OTkzYzEzZjBiJGV4cG9ydCQ1MjZlYmMwNWZmOTY0NzIzIHtcbiAgICBmb3JtYXQoa2V5LCB2YXJpYWJsZXMpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB0aGlzLmNhY2hlW2tleV07XG4gICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgbGV0IG1zZyA9IHRoaXMubWVzc2FnZXMuZ2V0U3RyaW5nRm9yTG9jYWxlKGtleSwgdGhpcy5sb2NhbGUpO1xuICAgICAgICAgICAgaWYgKCFtc2cpIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgaW50bCBtZXNzYWdlICR7a2V5fSBpbiAke3RoaXMubG9jYWxlfSBsb2NhbGVgKTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBuZXcgKDAsICgkcGFyY2VsJGludGVyb3BEZWZhdWx0KCRnOW5RQSRpbnRsbWVzc2FnZWZvcm1hdCkpKShtc2csIHRoaXMubG9jYWxlKTtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZhckNvcHk7XG4gICAgICAgIGlmICh2YXJpYWJsZXMpIHZhckNvcHkgPSBPYmplY3Qua2V5cyh2YXJpYWJsZXMpLnJlZHVjZSgoYWNjLCBrZXkpPT57XG4gICAgICAgICAgICBhY2Nba2V5XSA9IHZhcmlhYmxlc1trZXldID09IG51bGwgPyBmYWxzZSA6IHZhcmlhYmxlc1trZXldO1xuICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgfSwge30pO1xuICAgICAgICByZXR1cm4gbWVzc2FnZS5mb3JtYXQodmFyQ29weSk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGxvY2FsZSwgbWVzc2FnZXMpe1xuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IG1lc3NhZ2VzO1xuICAgICAgICB0aGlzLmNhY2hlID0ge307XG4gICAgfVxufVxuXG5cblxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYWluLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@internationalized/message/dist/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@internationalized/number/dist/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/@internationalized/number/dist/main.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"NumberFormatter\", () => $0c1d5654b62fc485$export$cc77c4ff7e8673c5);\n$parcel$export(module.exports, \"NumberParser\", () => $d68f3f4c684426c6$export$cd11ab140839f11d);\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ let $0c1d5654b62fc485$var$formatterCache = new Map();\nlet $0c1d5654b62fc485$var$supportsSignDisplay = false;\ntry {\n    // @ts-ignore\n    $0c1d5654b62fc485$var$supportsSignDisplay = new Intl.NumberFormat(\"de-DE\", {\n        signDisplay: \"exceptZero\"\n    }).resolvedOptions().signDisplay === \"exceptZero\";\n// eslint-disable-next-line no-empty\n} catch (e) {}\nlet $0c1d5654b62fc485$var$supportsUnit = false;\ntry {\n    // @ts-ignore\n    $0c1d5654b62fc485$var$supportsUnit = new Intl.NumberFormat(\"de-DE\", {\n        style: \"unit\",\n        unit: \"degree\"\n    }).resolvedOptions().style === \"unit\";\n// eslint-disable-next-line no-empty\n} catch (e) {}\n// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.\n// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.\n// Values were determined by switching to each locale manually in Chrome.\nconst $0c1d5654b62fc485$var$UNITS = {\n    degree: {\n        narrow: {\n            default: \"\\xb0\",\n            \"ja-JP\": \" \\u5EA6\",\n            \"zh-TW\": \"\\u5EA6\",\n            \"sl-SI\": \" \\xb0\"\n        }\n    }\n};\nclass $0c1d5654b62fc485$export$cc77c4ff7e8673c5 {\n    /** Formats a number value as a string, according to the locale and options provided to the constructor. */ format(value) {\n        let res = \"\";\n        if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null) res = $0c1d5654b62fc485$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);\n        else res = this.numberFormatter.format(value);\n        if (this.options.style === \"unit\" && !$0c1d5654b62fc485$var$supportsUnit) {\n            var _UNITS_unit;\n            let { unit: unit, unitDisplay: unitDisplay = \"short\", locale: locale } = this.resolvedOptions();\n            if (!unit) return res;\n            let values = (_UNITS_unit = $0c1d5654b62fc485$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];\n            res += values[locale] || values.default;\n        }\n        return res;\n    }\n    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */ formatToParts(value) {\n        // TODO: implement signDisplay for formatToParts\n        // @ts-ignore\n        return this.numberFormatter.formatToParts(value);\n    }\n    /** Formats a number range as a string. */ formatRange(start, end) {\n        // @ts-ignore\n        if (typeof this.numberFormatter.formatRange === \"function\") // @ts-ignore\n        return this.numberFormatter.formatRange(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        // Very basic fallback for old browsers.\n        return `${this.format(start)} \\u{2013} ${this.format(end)}`;\n    }\n    /** Formats a number range as an array of parts. */ formatRangeToParts(start, end) {\n        // @ts-ignore\n        if (typeof this.numberFormatter.formatRangeToParts === \"function\") // @ts-ignore\n        return this.numberFormatter.formatRangeToParts(start, end);\n        if (end < start) throw new RangeError(\"End date must be >= start date\");\n        let startParts = this.numberFormatter.formatToParts(start);\n        let endParts = this.numberFormatter.formatToParts(end);\n        return [\n            ...startParts.map((p)=>({\n                    ...p,\n                    source: \"startRange\"\n                })),\n            {\n                type: \"literal\",\n                value: \" \\u2013 \",\n                source: \"shared\"\n            },\n            ...endParts.map((p)=>({\n                    ...p,\n                    source: \"endRange\"\n                }))\n        ];\n    }\n    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {\n        let options = this.numberFormatter.resolvedOptions();\n        if (!$0c1d5654b62fc485$var$supportsSignDisplay && this.options.signDisplay != null) options = {\n            ...options,\n            signDisplay: this.options.signDisplay\n        };\n        if (!$0c1d5654b62fc485$var$supportsUnit && this.options.style === \"unit\") options = {\n            ...options,\n            style: \"unit\",\n            unit: this.options.unit,\n            unitDisplay: this.options.unitDisplay\n        };\n        return options;\n    }\n    constructor(locale, options = {}){\n        this.numberFormatter = $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options);\n        this.options = options;\n    }\n}\nfunction $0c1d5654b62fc485$var$getCachedNumberFormatter(locale, options = {}) {\n    let { numberingSystem: numberingSystem } = options;\n    if (numberingSystem && locale.includes(\"-nu-\")) {\n        if (!locale.includes(\"-u-\")) locale += \"-u-\";\n        locale += `-nu-${numberingSystem}`;\n    }\n    if (options.style === \"unit\" && !$0c1d5654b62fc485$var$supportsUnit) {\n        var _UNITS_unit;\n        let { unit: unit, unitDisplay: unitDisplay = \"short\" } = options;\n        if (!unit) throw new Error('unit option must be provided with style: \"unit\"');\n        if (!((_UNITS_unit = $0c1d5654b62fc485$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);\n        options = {\n            ...options,\n            style: \"decimal\"\n        };\n    }\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : \"\");\n    if ($0c1d5654b62fc485$var$formatterCache.has(cacheKey)) return $0c1d5654b62fc485$var$formatterCache.get(cacheKey);\n    let numberFormatter = new Intl.NumberFormat(locale, options);\n    $0c1d5654b62fc485$var$formatterCache.set(cacheKey, numberFormatter);\n    return numberFormatter;\n}\nfunction $0c1d5654b62fc485$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {\n    if (signDisplay === \"auto\") return numberFormat.format(num);\n    else if (signDisplay === \"never\") return numberFormat.format(Math.abs(num));\n    else {\n        let needsPositiveSign = false;\n        if (signDisplay === \"always\") needsPositiveSign = num > 0 || Object.is(num, 0);\n        else if (signDisplay === \"exceptZero\") {\n            if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);\n            else needsPositiveSign = num > 0;\n        }\n        if (needsPositiveSign) {\n            let negative = numberFormat.format(-num);\n            let noSign = numberFormat.format(num);\n            // ignore RTL/LTR marker character\n            let minus = negative.replace(noSign, \"\").replace(/\\u200e|\\u061C/, \"\");\n            if ([\n                ...minus\n            ].length !== 1) console.warn(\"@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case\");\n            let positive = negative.replace(noSign, \"!!!\").replace(minus, \"+\").replace(\"!!!\", noSign);\n            return positive;\n        } else return numberFormat.format(num);\n    }\n}\n\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nconst $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX = new RegExp(\"^.*\\\\(.*\\\\).*$\");\nconst $d68f3f4c684426c6$var$NUMBERING_SYSTEMS = [\n    \"latn\",\n    \"arab\",\n    \"hanidec\"\n];\nclass $d68f3f4c684426c6$export$cd11ab140839f11d {\n    /**\n   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.\n   */ parse(value) {\n        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).parse(value);\n    }\n    /**\n   * Returns whether the given string could potentially be a valid number. This should be used to\n   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity\n   * of the minus/plus sign characters can be checked.\n   */ isValidPartialNumber(value, minValue, maxValue) {\n        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);\n    }\n    /**\n   * Returns a numbering system for which the given string is valid in the current locale.\n   * If no numbering system could be detected, the default numbering system for the current\n   * locale is returned.\n   */ getNumberingSystem(value) {\n        return $d68f3f4c684426c6$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;\n    }\n    constructor(locale, options = {}){\n        this.locale = locale;\n        this.options = options;\n    }\n}\nconst $d68f3f4c684426c6$var$numberParserCache = new Map();\nfunction $d68f3f4c684426c6$var$getNumberParserImpl(locale, options, value) {\n    // First try the default numbering system for the provided locale\n    let defaultParser = $d68f3f4c684426c6$var$getCachedNumberParser(locale, options);\n    // If that doesn't match, and the locale doesn't include a hard coded numbering system,\n    // try each of the other supported numbering systems until we find one that matches.\n    if (!locale.includes(\"-nu-\") && !defaultParser.isValidPartialNumber(value)) {\n        for (let numberingSystem of $d68f3f4c684426c6$var$NUMBERING_SYSTEMS)if (numberingSystem !== defaultParser.options.numberingSystem) {\n            let parser = $d68f3f4c684426c6$var$getCachedNumberParser(locale + (locale.includes(\"-u-\") ? \"-nu-\" : \"-u-nu-\") + numberingSystem, options);\n            if (parser.isValidPartialNumber(value)) return parser;\n        }\n    }\n    return defaultParser;\n}\nfunction $d68f3f4c684426c6$var$getCachedNumberParser(locale, options) {\n    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : \"\");\n    let parser = $d68f3f4c684426c6$var$numberParserCache.get(cacheKey);\n    if (!parser) {\n        parser = new $d68f3f4c684426c6$var$NumberParserImpl(locale, options);\n        $d68f3f4c684426c6$var$numberParserCache.set(cacheKey, parser);\n    }\n    return parser;\n}\n// The actual number parser implementation. Instances of this class are cached\n// based on the locale, options, and detected numbering system.\nclass $d68f3f4c684426c6$var$NumberParserImpl {\n    parse(value) {\n        // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'\n        let fullySanitizedValue = this.sanitize(value);\n        if (this.symbols.group) // Remove group characters, and replace decimal points and numerals with ASCII values.\n        fullySanitizedValue = $d68f3f4c684426c6$var$replaceAll(fullySanitizedValue, this.symbols.group, \"\");\n        if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, \".\");\n        if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, \"-\");\n        fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);\n        if (this.options.style === \"percent\") {\n            // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing\n            let isNegative = fullySanitizedValue.indexOf(\"-\");\n            fullySanitizedValue = fullySanitizedValue.replace(\"-\", \"\");\n            let index = fullySanitizedValue.indexOf(\".\");\n            if (index === -1) index = fullySanitizedValue.length;\n            fullySanitizedValue = fullySanitizedValue.replace(\".\", \"\");\n            if (index - 2 === 0) fullySanitizedValue = `0.${fullySanitizedValue}`;\n            else if (index - 2 === -1) fullySanitizedValue = `0.0${fullySanitizedValue}`;\n            else if (index - 2 === -2) fullySanitizedValue = \"0.00\";\n            else fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;\n            if (isNegative > -1) fullySanitizedValue = `-${fullySanitizedValue}`;\n        }\n        let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;\n        if (isNaN(newValue)) return NaN;\n        if (this.options.style === \"percent\") {\n            // extra step for rounding percents to what our formatter would output\n            let options = {\n                ...this.options,\n                style: \"decimal\",\n                minimumFractionDigits: Math.min(this.options.minimumFractionDigits + 2, 20),\n                maximumFractionDigits: Math.min(this.options.maximumFractionDigits + 2, 20)\n            };\n            return new $d68f3f4c684426c6$export$cd11ab140839f11d(this.locale, options).parse(new (0, $0c1d5654b62fc485$export$cc77c4ff7e8673c5)(this.locale, options).format(newValue));\n        }\n        // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again\n        if (this.options.currencySign === \"accounting\" && $d68f3f4c684426c6$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;\n        return newValue;\n    }\n    sanitize(value) {\n        // Remove literals and whitespace, which are allowed anywhere in the string\n        value = value.replace(this.symbols.literals, \"\");\n        // Replace the ASCII minus sign with the minus sign used in the current locale\n        // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.\n        if (this.symbols.minusSign) value = value.replace(\"-\", this.symbols.minusSign);\n        // In arab numeral system, their decimal character is 1643, but most keyboards don't type that\n        // instead they use the , (44) character or apparently the (1548) character.\n        if (this.options.numberingSystem === \"arab\") {\n            if (this.symbols.decimal) {\n                value = value.replace(\",\", this.symbols.decimal);\n                value = value.replace(String.fromCharCode(1548), this.symbols.decimal);\n            }\n            if (this.symbols.group) value = $d68f3f4c684426c6$var$replaceAll(value, \".\", this.symbols.group);\n        }\n        // fr-FR group character is char code 8239, but that's not a key on the french keyboard,\n        // so allow 'period' as a group char and replace it with a space\n        if (this.options.locale === \"fr-FR\") value = $d68f3f4c684426c6$var$replaceAll(value, \".\", String.fromCharCode(8239));\n        return value;\n    }\n    isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {\n        value = this.sanitize(value);\n        // Remove minus or plus sign, which must be at the start of the string.\n        if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);\n        else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);\n        // Numbers cannot start with a group separator\n        if (this.symbols.group && value.startsWith(this.symbols.group)) return false;\n        // Numbers that can't have any decimal values fail if a decimal character is typed\n        if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;\n        // Remove numerals, groups, and decimals\n        if (this.symbols.group) value = $d68f3f4c684426c6$var$replaceAll(value, this.symbols.group, \"\");\n        value = value.replace(this.symbols.numeral, \"\");\n        if (this.symbols.decimal) value = value.replace(this.symbols.decimal, \"\");\n        // The number is valid if there are no remaining characters\n        return value.length === 0;\n    }\n    constructor(locale, options = {}){\n        this.locale = locale;\n        this.formatter = new Intl.NumberFormat(locale, options);\n        this.options = this.formatter.resolvedOptions();\n        this.symbols = $d68f3f4c684426c6$var$getSymbols(locale, this.formatter, this.options, options);\n        var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;\n        if (this.options.style === \"percent\" && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn(\"NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.\");\n    }\n}\nconst $d68f3f4c684426c6$var$nonLiteralParts = new Set([\n    \"decimal\",\n    \"fraction\",\n    \"integer\",\n    \"minusSign\",\n    \"plusSign\",\n    \"group\"\n]);\n// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes\n// all unique numbers which we need to check in order to determine all the plural forms for a given locale.\n// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script\nconst $d68f3f4c684426c6$var$pluralNumbers = [\n    0,\n    4,\n    2,\n    1,\n    11,\n    20,\n    3,\n    7,\n    100,\n    21,\n    0.1,\n    1.1\n];\nfunction $d68f3f4c684426c6$var$getSymbols(locale, formatter, intlOptions, originalOptions) {\n    var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;\n    // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set\n    let symbolFormatter = new Intl.NumberFormat(locale, {\n        ...intlOptions,\n        minimumSignificantDigits: 1,\n        maximumSignificantDigits: 21\n    });\n    // Note: some locale's don't add a group symbol until there is a ten thousands place\n    let allParts = symbolFormatter.formatToParts(-10000.111);\n    let posAllParts = symbolFormatter.formatToParts(10000.111);\n    let pluralParts = $d68f3f4c684426c6$var$pluralNumbers.map((n)=>symbolFormatter.formatToParts(n));\n    var _allParts_find_value;\n    let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p)=>p.type === \"minusSign\")) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : \"-\";\n    let plusSign = (_posAllParts_find = posAllParts.find((p)=>p.type === \"plusSign\")) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;\n    // Safari does not support the signDisplay option, but our number parser polyfills it.\n    // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.\n    // @ts-ignore\n    if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"exceptZero\" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === \"always\")) plusSign = \"+\";\n    // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters\n    // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal\n    let decimalParts = new Intl.NumberFormat(locale, {\n        ...intlOptions,\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    }).formatToParts(0.001);\n    let decimal = (_decimalParts_find = decimalParts.find((p)=>p.type === \"decimal\")) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;\n    let group = (_allParts_find1 = allParts.find((p)=>p.type === \"group\")) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;\n    // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that\n    // don't contribute to the numerical value\n    let allPartsLiterals = allParts.filter((p)=>!$d68f3f4c684426c6$var$nonLiteralParts.has(p.type)).map((p)=>$d68f3f4c684426c6$var$escapeRegex(p.value));\n    let pluralPartsLiterals = pluralParts.flatMap((p)=>p.filter((p)=>!$d68f3f4c684426c6$var$nonLiteralParts.has(p.type)).map((p)=>$d68f3f4c684426c6$var$escapeRegex(p.value)));\n    let sortedLiterals = [\n        ...new Set([\n            ...allPartsLiterals,\n            ...pluralPartsLiterals\n        ])\n    ].sort((a, b)=>b.length - a.length);\n    let literals = sortedLiterals.length === 0 ? new RegExp(\"[\\\\p{White_Space}]\", \"gu\") : new RegExp(`${sortedLiterals.join(\"|\")}|[\\\\p{White_Space}]`, \"gu\");\n    // These are for replacing non-latn characters with the latn equivalent\n    let numerals = [\n        ...new Intl.NumberFormat(intlOptions.locale, {\n            useGrouping: false\n        }).format(9876543210)\n    ].reverse();\n    let indexes = new Map(numerals.map((d, i)=>[\n            d,\n            i\n        ]));\n    let numeral = new RegExp(`[${numerals.join(\"\")}]`, \"g\");\n    let index = (d)=>String(indexes.get(d));\n    return {\n        minusSign: minusSign,\n        plusSign: plusSign,\n        decimal: decimal,\n        group: group,\n        literals: literals,\n        numeral: numeral,\n        index: index\n    };\n}\nfunction $d68f3f4c684426c6$var$replaceAll(str, find, replace) {\n    // @ts-ignore\n    if (str.replaceAll) // @ts-ignore\n    return str.replaceAll(find, replace);\n    return str.split(find).join(replace);\n}\nfunction $d68f3f4c684426c6$var$escapeRegex(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n\n\n\n\n//# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@internationalized/number/dist/main.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@internationalized/string/dist/main.js":
/*!*************************************************************!*\
  !*** ./node_modules/@internationalized/string/dist/main.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n$parcel$export(module.exports, \"LocalizedStringDictionary\", () => $f80be5fd4d03dda9$export$c17fa47878dc55b6);\n$parcel$export(module.exports, \"LocalizedStringFormatter\", () => $3e95fbf3429967d1$export$2f817fcdc4b89ae0);\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $f80be5fd4d03dda9$var$localeSymbol = Symbol.for(\"react-aria.i18n.locale\");\nconst $f80be5fd4d03dda9$var$stringsSymbol = Symbol.for(\"react-aria.i18n.strings\");\nlet $f80be5fd4d03dda9$var$cachedGlobalStrings = undefined;\nclass $f80be5fd4d03dda9$export$c17fa47878dc55b6 {\n    /** Returns a localized string for the given key and locale. */ getStringForLocale(key, locale) {\n        let strings = this.getStringsForLocale(locale);\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    /** Returns all localized strings for the given locale. */ getStringsForLocale(locale) {\n        let strings = this.strings[locale];\n        if (!strings) {\n            strings = $f80be5fd4d03dda9$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n            this.strings[locale] = strings;\n        }\n        return strings;\n    }\n    static getGlobalDictionaryForPackage(packageName) {\n        if (typeof window === \"undefined\") return null;\n        let locale = window[$f80be5fd4d03dda9$var$localeSymbol];\n        if ($f80be5fd4d03dda9$var$cachedGlobalStrings === undefined) {\n            let globalStrings = window[$f80be5fd4d03dda9$var$stringsSymbol];\n            if (!globalStrings) return null;\n            $f80be5fd4d03dda9$var$cachedGlobalStrings = {};\n            for(let pkg in globalStrings)$f80be5fd4d03dda9$var$cachedGlobalStrings[pkg] = new $f80be5fd4d03dda9$export$c17fa47878dc55b6({\n                [locale]: globalStrings[pkg]\n            }, locale);\n        }\n        let dictionary = $f80be5fd4d03dda9$var$cachedGlobalStrings === null || $f80be5fd4d03dda9$var$cachedGlobalStrings === void 0 ? void 0 : $f80be5fd4d03dda9$var$cachedGlobalStrings[packageName];\n        if (!dictionary) throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n        return dictionary;\n    }\n    constructor(messages, defaultLocale = \"en-US\"){\n        // Clone messages so we don't modify the original object.\n        this.strings = {\n            ...messages\n        };\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $f80be5fd4d03dda9$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $f80be5fd4d03dda9$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \"-\")) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $f80be5fd4d03dda9$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split(\"-\")[0];\n}\n\n\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $3e95fbf3429967d1$var$pluralRulesCache = new Map();\nconst $3e95fbf3429967d1$var$numberFormatCache = new Map();\nclass $3e95fbf3429967d1$export$2f817fcdc4b89ae0 {\n    /** Formats a localized string for the given key with the provided variables. */ format(key, variables) {\n        let message = this.strings.getStringForLocale(key, this.locale);\n        return typeof message === \"function\" ? message(variables, this) : message;\n    }\n    plural(count, options, type = \"cardinal\") {\n        let opt = options[\"=\" + count];\n        if (opt) return typeof opt === \"function\" ? opt() : opt;\n        let key = this.locale + \":\" + type;\n        let pluralRules = $3e95fbf3429967d1$var$pluralRulesCache.get(key);\n        if (!pluralRules) {\n            pluralRules = new Intl.PluralRules(this.locale, {\n                type: type\n            });\n            $3e95fbf3429967d1$var$pluralRulesCache.set(key, pluralRules);\n        }\n        let selected = pluralRules.select(count);\n        opt = options[selected] || options.other;\n        return typeof opt === \"function\" ? opt() : opt;\n    }\n    number(value) {\n        let numberFormat = $3e95fbf3429967d1$var$numberFormatCache.get(this.locale);\n        if (!numberFormat) {\n            numberFormat = new Intl.NumberFormat(this.locale);\n            $3e95fbf3429967d1$var$numberFormatCache.set(this.locale, numberFormat);\n        }\n        return numberFormat.format(value);\n    }\n    select(options, value) {\n        let opt = options[value] || options.other;\n        return typeof opt === \"function\" ? opt() : opt;\n    }\n    constructor(locale, strings){\n        this.locale = locale;\n        this.strings = strings;\n    }\n}\n\n\n\n\n//# sourceMappingURL=main.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@internationalized/string/dist/main.js\n");

/***/ })

};
;